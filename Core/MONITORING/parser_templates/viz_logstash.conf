input {
    tcp {
        port => 5000
        type => "viz"
    }
}

filter {
    ###################
    # Message parsers #
    ###################
    if [type] == "viz" {
        json {
            source => "message"
            target => "logger_json"
            remove_field => "message"
        }
        mutate {
            rename => { "[logger_json][message]" => "message" }
        }
    }
}

filter {

    ####################################
    # Process/Watcher/Pipeline Parsers #
    ####################################

    if [type] == "viz" {
        grok {
            match => {
                "[logger_json][extra][logger_name]" => [
                    "processing_pipeline\.utils\.process\.%%{GREEDYDATA:process}",
                    "processing_pipeline\.watcher\.%%{GREEDYDATA:watcher}",
                    "processing_pipeline\.manager\.%%{GREEDYDATA:pipeline}",
                    "processing_pipeline\.launcher\.%%{GREEDYDATA:process}",
                    "process\.%%{GREEDYDATA:process}",
                    "watcher\.%%{GREEDYDATA:watcher}",
                    "manager\.%%{GREEDYDATA:pipeline}",
                    "launcher\.%%{GREEDYDATA:process}"
                ]
            }
        }

        grok {
            match => {
                "[logger_json][extra][logger_name]" => [
                    "processing_pipeline\.watcher\.%%{GREEDYDATA:process}",
                    "watcher\.%%{GREEDYDATA:process}"
                ]
            }
        }

        if [host] =~ /ip-10-27-4-...ec2.internal/ {
            mutate { add_field => { "viz_environment" => "Development" } }
        }

        if [host] =~ /ip-10-26-150-...ec2.internal/ {
            mutate { add_field => { "viz_environment" => "Staging" } }
        }

        ######################
        # Pipeline heartbeat #
        ######################

        if [process] {
            grok {
                match => { "message" => "Heartbeat" }
                add_field => { "metric_type" => "process_heartbeat" }
            }
        }

        ##########################
        # Process/Watcher parser #
        ##########################

        grok {
            match => { "message" => "Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} by the %%{GREEDYDATA:watcher} Watcher: %%{GREEDYDATA:command}" }
            add_field => { "process_status_code" => 0 }
            add_field => { "watcher_status_code" => 7 }
            add_field => { "service_status_code" => 4 }
            add_field => { "metric_type" => ["process_status", "watcher_status"] }
        }

        grok {
            match => { "message" => "Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} by the %%{GREEDYDATA:watcher} Watcher has exited" }
            add_field => { "process_status_code" => 8 }
            add_field => { "service_status_code" => 10 }
            add_field => { "metric_type" => "process_status" }
        }

        #######################
        # Process log parsers #
        #######################

        grok {
            match => { "message" => "Execute function called for %%{TIMESTAMP_ISO8601:latest_data_time}[.]" }
            add_field => { "process_status_code" => 1 }
            add_field => { "metric_type" => "process_status" }
            add_tag => [ "processStarted" ]
        }

        grok {
            match => { "message" => "Validating workspace for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "process_status_code" => 2 }
            add_field => { "service_status_code" => 5 }
            add_field => { "metric_type" => "process_status" }
        }

        grok {
            match => { "message" => "Executing processing for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "process_status_code" => 3 }
            add_field => { "service_status_code" => 6 }
            add_field => { "metric_type" => "process_status" }
        }

        grok {
            match => { "message" => "Updating data for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "process_status_code" => 4 }
            add_field => { "service_status_code" => 7 }
            add_field => { "metric_type" => "process_status" }
        }

        grok {
            match => { "message" => "Updating portal item for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]"}
            add_field => { "process_status_code" => 5 }
            add_field => { "service_status_code" => 8 }
            add_field => { "metric_type" => "process_status" }
        }

        grok {
            match => { "message" => "Updating service properties for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "process_status_code" => 6 }
            add_field => { "service_status_code" => 9 }
            add_field => { "metric_type" => "process_status" }
        }

        grok {
            match => { "message" => "Successfully executed processing for %%{TIMESTAMP_ISO8601:latest_data_time}[.]" }
            add_field => { "process_status_code" => 7 }
            add_field => { "metric_type" => "process_status" }
            add_field => { "metric_type" => "latest_process_time" }
            add_tag => [ "processFinished" ]
        }

        grok {
            match => { "message" => "Processing for %%{TIMESTAMP_ISO8601:latest_data_time} failed" }
        }

        grok {
            match => { "message" => "EGIS Log[:] type=%%{GREEDYDATA:egis_type}[,] time=%%{GREEDYDATA:egis_time}[,] message=%%{GREEDYDATA:egis_message}[,] machine=%%{GREEDYDATA:egis_machine}" }
            add_field => { "metric_type" => "egis_log" }
        }

        elapsed {
            start_tag => "processStarted"
            end_tag => "processFinished"
            unique_id_field => "process"
            timeout => 6000
        }

        #######################
        # Watcher log parsers #
        #######################

        grok {
            match => { "message" => "A Watch for data corresponding to date %%{TIMESTAMP_ISO8601:latest_data_time} will now begin." }
            add_field => { "metric_type" => "process_status" }
            add_field => { "service_status_code" => 0 }
        }

         grok {
            match => { "message" => "Sleeping for %%{NUMBER} seconds until data is expected" }
            add_field => { "metric_type" => "process_status" }
            add_field => { "service_status_code" => 0 }
        }


        grok {
            match => { "message" => "Attempting to locate/fetch a batch of %%{NUMBER} resources for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "metric_type" => "process_status" }
            add_field => { "service_status_code" => 1 }
        }

        grok {
            match => { "message" => "%%{NUMBER:resources_fetched} of %%{NUMBER:total_resources} resources for %%{TIMESTAMP_ISO8601:latest_data_time} now available." }
            add_field => { "metric_type" => "download_progress" }
            add_field => { "service_status_code" => 2 }
        }

        grok {
            match => { "message" => "All resources for %%{TIMESTAMP_ISO8601:latest_data_time} now available." }
            add_field => { "metric_type" => "process_status" }
            add_field => { "service_status_code" => 3 }
        }

        grok {
            match => { "message" => "Polling files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "watcher_status_code" => 1 }
            add_field => { "metric_type" => "watcher_status" }
        }

        grok {
            match => { "message" => "One or more files available for %%{TIMESTAMP_ISO8601:latest_data_time}[.]" }
            add_field => { "watcher_status_code" => 2 }
            add_field => { "metric_type" => "watcher_status" }
        }

        grok {
            match => { "message" => "Pulling one or more files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "watcher_status_code" => 3 }
            add_field => { "metric_type" => "watcher_status" }
        }

        grok {
            match => { "message" => "All files available for %%{TIMESTAMP_ISO8601:latest_data_time}[.]" }
            add_field => { "watcher_status_code" => 4 }
            add_field => { "metric_type" => "watcher_status" }
            add_field => { "metric_type" => "latest_available_time" }
        }

        grok {
            match => { "message" => "Pulling all files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]" }
            add_field => { "watcher_status_code" => 5 }
            add_field => { "metric_type" => "watcher_status" }
        }

        grok {
            match => { "message" => "Successfully pulled all files for %%{TIMESTAMP_ISO8601:latest_data_time}[.]" }
            add_field => { "watcher_status_code" => 6 }
            add_field => { "metric_type" => "watcher_status" }
        }

        grok {
          match => { "message" => "The Watch for %%{TIMESTAMP_ISO8601:latest_data_time} expired" }
        }

        grok {
          match => { "message" => "Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} exited with return code 1." }
        }

        ##########################################
        # ArcGIS Server service recovery parsers #
        ##########################################

        if [logger_json][extra][logger_name] == 'restart-arcgis-server-monitor' {
            mutate { add_field => { "metric_type" => "recover_monitor" } }
        }

        grok {
            match => { "message" => "Triggering " }
              add_field => { "metric_type" => "recover_monitor" }
        }

        #########################
        # Configuration parsers #
        #########################

        grok {
            break_on_match => false
            match => {
                "process" => "(?<configuration>\b\w{3})_"
                "watcher" => "(?<configuration>\b\w{3})_"
                "pipeline" => "(?<configuration>\b\w{3})_"
            }
        }

        if ![configuration] {
            mutate { add_field => { "configuration" => "xxx" } }
        }

        grok {
            match => { "message" => "%%{NUMBER:total_processes} processes are expected to be running." }
            add_field => { "metric_type" => "total_processes" }
        }

        if [logger_json][level] == 'ERROR' {
            mutate {
                add_field => { "service_status_code" => 999 }
                add_tag => ["shouldmail"]
            }
        }

        #################
        # Email parsers #
        #################

        grok {
            match => { "message" => "email_group:%%{GREEDYDATA:email_group}--email_title:%%{GREEDYDATA:email_title}--email_body:%%{GREEDYDATA:email_body}" }
            add_tag => ["shouldmail"]
        }

        ##########################
        # Resource Usage parsers #
        ##########################

        grok {
            match => { "message" => "%%{GREEDYDATA:resource_process} Viz Service %%{GREEDYDATA:resource_type} Usage - %%{NUMBER:resource_usage} %%{GREEDYDATA:resource_unit}"}
            add_field => { "metric_type" => "viz_resource_usage" }
        }
    }
}

filter {
    ###############################
    # Drop all unnecessary fields #
    ###############################
    if [type] == "viz" {
        mutate {
            rename => { "[logger_json][@timestamp]" => "temp_timestamp" }
            rename => { "[logger_json][level]" => "temp_level" }
            remove_field => ["logger_json"]
        }

        mutate {
            rename => { "temp_timestamp" => "[logger_json][@timestamp]" }
            rename => { "temp_level" => "[logger_json][level]" }
        }

        #########################
        # Data type conversions #
        #########################

        mutate {
            convert => {
                "process_status_code" => "integer"
                "watcher_status_code" => "integer"
                "total_resources" => "integer"
                "resources_fetched" => "integer"
                "service_status_code" => "integer"
                "total_processes" => "integer"
            }
        }
    }
}

filter {
    #############################
    # Drop all unnecessary logs #
    #############################
    if [type] == "viz" {
        if ![metric_type] and [logger_json][level] == 'INFO' {
            drop { }
        }
    }
}

output {
    stdout {}
    if [type] == "viz" {
        amazon_es {
            hosts => ["${es_endpoint}"]
            region => "${region}"
            aws_access_key_id => ''
            aws_secret_access_key => ''
            index => "nwmviz-%%{+YYYY.MM}"
        }
    }
}

