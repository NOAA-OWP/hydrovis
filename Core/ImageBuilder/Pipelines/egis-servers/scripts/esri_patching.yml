schemaVersion: 1.0
parameters:
  - WorkingFolder:
      type: string
      description: Working Folder.

  - PatchingTool:
      type: string
      description: Patching Tool.
      default: 'C:\Program Files\ArcGIS\Server\tools\patchnotification\patchnotification.bat'

phases:
  - name: build
    steps:
      - name: ArcGISEnterprisePatchStep
        action: ExecutePowerShell
        timeoutSeconds: 21600
        inputs:
          commands:
            - |
              Function Invoke-RunCommand($cmd, $cmdArgs, $waitSeconds=-1) {

                $process = New-Object System.Diagnostics.Process
                $process.StartInfo.UseShellExecute = $false
                $process.StartInfo.RedirectStandardOutput = $true
                $process.StartInfo.RedirectStandardError = $true
                $process.StartInfo.WorkingDirectory = $(Split-Path -Path $cmd)
                $process.StartInfo.FileName = $cmd

                if($cmdArgs) { $process.StartInfo.Arguments = $cmdArgs }
                $process.Start() | Out-Null

                $outTask = $process.StandardOutput.ReadToEndAsync();
                $errTask = $process.StandardError.ReadToEndAsync();

                # convert wait to milliseconds
                if ($waitSeconds -gt -1) { $waitSeconds *= 1000 }
                $finished = $process.WaitForExit($waitSeconds)

                # get stderr
                if (-not $finished) {
                    $process.Kill()
                    $errText = "Operation Timeout";
                } else {
                    $errText = $errTask.Result;
                }
                
                # get std out
                $outText = $outTask.Result

                $pResult = New-Object -TypeName PSObject -Property ([Ordered]@{
                    "Command" = $cmd;
                    "Args" = $cmdArgs;
                    "ExitCode" = $process.ExitCode;
                    "StandardOutput" = $outText;
                    "StandardError" = $errText;
                })

                return $pResult
              }     

              # Disable Antivirus Scanning, will enable it on completion
              Set-MpPreference -DisableRealtimeMonitoring $true

              # Patch the system
              $patchUtility = '{{ PatchingTool }}'
              $patchLevel = "all" 

              Write-Host "Current Patching Status"
              $cmdOutput = Invoke-RunCommand "$patchUtility" "-c"
              Write-Host $cmdOutput.StandardOutput

              Write-Host "Ensure Patch Delete"
              $cmdOutput = Invoke-RunCommand "$patchUtility" "-c -o always"
              Write-Host $cmdOutput.StandardOutput

              Write-Host "Install Patches: $patchLevel"
              $cmdOutput = Invoke-RunCommand "$patchUtility" "-c -i $patchLevel"
              $message = [string]$cmdOutput.StandardOutput
              # this output of this command
              # gets long lets just grab the last N characters
              $maxLength = 750
              if ($message.Length -gt 750) {
                Write-Host $message.Substring($message.Length - $maxLength, $maxLength)
              } else {
                Write-Host $message
              }

              Write-Host "Current Patching Status"
              $cmdOutput = Invoke-RunCommand "$patchUtility" "-c"
              Write-Host $cmdOutput.StandardOutput

              Function Install-MSP ($url, $localDirectory, $localName){
                  Write-Output ('Downloading ' + $url + '.')
                  $appsetup = Join-Path $localDirectory $localName
                  $ProgressPreference = 'SilentlyContinue'
                  Invoke-WebRequest -Uri $url -OutFile $appsetup
                  $ProgressPreference = 'Continue'
                  Write-Output ('Installing ' + $localName + '.')
                  $process = Start-Process msiexec -PassThru -Wait -ArgumentList ('/quiet /passive /p', $appsetup)
                  if (($process.ExitCode -ne 0) -and ($process.ExitCode -ne 1603)) {
                      throw 'Installing ' + $appname + ' is failed. Exit code:' + $process.ExitCode
                  }
              }

              Install-MSP 'https://gisupdates.esri.com/QFE/WAI-111-P-963/ArcGIS-111-WAI-RU2-PatchB.msp' '{{ WorkingFolder }}' 'ArcGIS-111-WAI-RU2-PatchB.msp'              

              # Enable Antivirus Scanning
              Set-MpPreference -DisableRealtimeMonitoring $false

      # # install ArcGIS Web Adaptor 11.1 Reliability Update 2 Patch
      # # - name: DownloadWebAdaptorPatch
      # #   action: WebDownload
      # #   maxAttempts: 3
      # #   inputs:
      # #   - source: https://gisupdates.esri.com/QFE/WAI-111-P-963/ArcGIS-111-WAI-RU2-Patch.msp
      # #     destination: '{{ WorkingFolder }}/ArcGIS-111-WAI-RU2-Patch.msp'

      # - name: InstallWAPatches
      #   action: ExecutePowerShell
      #   timeoutSeconds: 21600
      #   onFailure: Abort
      #   inputs:
      #     commands:
      #       - |

      - name: StopServices
        action: ExecutePowerShell
        timeoutSeconds: 600
        onFailure: Abort
        inputs:
          commands:
            - |
              Function Stop-Service ($serviceName) {
                  $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
                  if ($service.Length -gt 0) {
                      Set-Service -Name $serviceName -StartupType Disabled -Status Stopped
                  }    
              }

              Stop-Service "ArcGIS Data Store"
              Stop-Service "ArcGIS Server"
              Stop-Service "Portal for ArcGIS"
