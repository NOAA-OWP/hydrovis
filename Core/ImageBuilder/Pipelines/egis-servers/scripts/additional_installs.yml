schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: InstallChrome
        action: ExecutePowerShell
        timeoutSeconds: 1200
        onFailure: Ignore
        inputs:
          commands:
            - |
              # Define the download URL and the installer
              $chromeUrl = "https://dl.google.com/chrome/install/latest/chrome_installer.exe"
              $tempPath = $env:TEMP
              $chromeInstaller = "chrome_installer.exe"
              $installer = "$tempPath$chromeInstaller"

              # Download Google Chrome installer
              Invoke-WebRequest -Uri $chromeUrl -OutFile $installer

              # Install Google Chrome silently
              Start-Process -FilePath $installer -ArgumentList "/silent /install" -Wait

              # Remove the installer after installation finished
              Remove-Item $installer

      - name: InstallCustomMetrics
        action: ExecutePowerShell
        timeoutSeconds: 1200
        onFailure: Ignore
        inputs:
          commands:
            - |
              # write custom metric script
              $code = @(
              'param(',
              '[Parameter(Mandatory=$true)]',
              '[string]$NamespaceParameter = ""',
              ')',
              '# Prep metrics dimensions and namespace',
              'Import-Module AWSPowerShell',
              '$namespace = if ([string]::IsNullOrWhiteSpace($NamespaceParameter)) {',
              '"Custom-Metrics"',
              '} else {',
              '"Custom-Metrics/$NamespaceParameter"',
              '}',
              '$instanceId = (New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/instance-id")',
              '# Associate instance to custom metric',
              '$instanceDimension = New-Object -TypeName Amazon.CloudWatch.Model.Dimension;',
              '$instanceDimension.Name = "instanceid";',
              '$instanceDimension.Value = $instanceId;',
              '$timestamp_now = [DateTime]::UtcNow;',
              '$metrics = @();',
              '# Get total physical memory',
              '$totalMemory = (Get-CimInstance -ClassName Win32_OperatingSystem).TotalVisibleMemorySize / 1MB',
              '$metric = New-Object -TypeName Amazon.CloudWatch.Model.MetricDatum;',
              '$metric.Timestamp = $timestamp_now;',
              '$metric.MetricName = "Total Memory";',
              '$metric.Value = ([math]::round($totalMemory,2));',
              '$metric.Unit = "Gigabytes";',
              '$metric.Dimensions = $instanceDimension;',
              '$metrics += $metric;',
              '# Get available memory',
              '$freeMemory = (Get-CimInstance -ClassName Win32_OperatingSystem).FreePhysicalMemory / 1MB',
              '$metric = New-Object -TypeName Amazon.CloudWatch.Model.MetricDatum;',
              '$metric.Timestamp = $timestamp_now;',
              '$metric.MetricName = "Free Memory";',
              '$metric.Value = ([math]::round($freeMemory,2));',
              '$metric.Unit = "Gigabytes";',
              '$metric.Dimensions = $instanceDimension;',
              '$metrics += $metric;',
              '# Get memory used',
              '$usedMemory = ($totalMemory - $freeMemory)',
              '$metric = New-Object -TypeName Amazon.CloudWatch.Model.MetricDatum;',
              '$metric.Timestamp = $timestamp_now;',
              '$metric.MetricName = "Used Memory";',
              '$metric.Value = ([math]::round($usedMemory,2));',
              '$metric.Unit = "Gigabytes";',
              '$metric.Dimensions = $instanceDimension;',
              '$metrics += $metric;',
              '# Calculate percentage of memory available',
              '$percentMemoryAvailable = ($freeMemory / $totalMemory) * 100',
              '$metric = New-Object -TypeName Amazon.CloudWatch.Model.MetricDatum;',
              '$metric.Timestamp = $timestamp_now;',
              '$metric.MetricName = "% Memory Available";',
              '$metric.Value = ([math]::round($percentMemoryAvailable));',
              '$metric.Unit = "Percent";',
              '$metric.Dimensions = $instanceDimension;',
              '$metrics += $metric;',
              '# Calculate percentage of memory used',
              '$percentMemoryUsed = ($usedMemory / $totalMemory) * 100',
              '$metric = New-Object -TypeName Amazon.CloudWatch.Model.MetricDatum;',
              '$metric.Timestamp = $timestamp_now;',
              '$metric.MetricName = "% Memory Used";',
              '$metric.Value = ([math]::round($percentMemoryUsed));',
              '$metric.Unit = "Percent";',
              '$metric.Dimensions = $instanceDimension;',
              '$metrics += $metric;',
              '# Write custom metrics to Cloudwatch',
              'Write-Host "Total Memory: $totalMemory"',
              'Write-Host "Used Memory: $usedMemory"',
              'Write-Host "Free Memory: $freeMemory"',
              'Write-Host "Percent Available: $percentMemoryAvailable%"',
              'Write-Host "Percent Used: $percentMemoryUsed%"',
              'Write-CWMetricData -Namespace $Namespace -MetricData $metrics'
              )

              # write out the script to file
              $code | Out-File -Append "C:\ProgramData\Amazon\Tools\custom-cw-metrics.ps1"
