#!/bin/bash

echo "---- SETTING UP VIZ DB ----"

VIZDBNAME="${VIZDBNAME}"
VIZDBHOST="${VIZDBHOST}"
VIZDBPORT=${VIZDBPORT}
VIZDBUSERNAME="${VIZDBUSERNAME}"
VIZDBPASSWORD="${VIZDBPASSWORD}"
EGISDBNAME="${EGISDBNAME}"
EGISDBHOST="${EGISDBHOST}"
EGISDBPORT=${EGISDBPORT}
EGISDBUSERNAME="${EGISDBUSERNAME}"
EGISDBPASSWORD="${EGISDBPASSWORD}"
DEPLOYMENT_BUCKET="${DEPLOYMENT_BUCKET}"
HOME="${HOME}"
VIZ_PROC_ADMIN_RW_USER="${VIZ_PROC_ADMIN_RW_USER}"
VIZ_PROC_ADMIN_RW_PASS="${VIZ_PROC_ADMIN_RW_PASS}"
VIZ_PROC_DEV_RW_USER="${VIZ_PROC_DEV_RW_USER}"
VIZ_PROC_DEV_RW_PASS="${VIZ_PROC_DEV_RW_PASS}"

### install postgresql ###
sudo yum install -y postgresql12

# Setting up EGIS DB
export PGPASSWORD=$${EGISDBPASSWORD}

aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/ingest/database/postgis_setup.sql" "$${HOME}/postgis_setup.sql"
psql -h "$${EGISDBHOST}" -U "$${EGISDBUSERNAME}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -f "$${HOME}/postgis_setup.sql"
rm "$${HOME}/postgis_setup.sql"

# Cleaning up EGIS DB - Part 1
echo "Drop EGIS Services Schema"
psql -h "$${EGISDBHOST}" -U "$${EGISDBUSERNAME}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -c "DROP SCHEMA IF EXISTS services CASCADE;"

echo "Setting up services schema in the EGIS DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/egisDB_services.dump" "$${HOME}/egisDB_services.dump"
pg_restore -h "$${EGISDBHOST}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -U $${EGISDBUSERNAME} -j 4 -v "$${HOME}/egisDB_services.dump"
rm "$${HOME}/egisDB_services.dump"

# Setting up Viz DB
export PGPASSWORD=$${VIZDBPASSWORD}

# Adding postgis extension and aws export extentions to Viz DB
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/ingest/database/postgis_setup.sql" "$${HOME}/postgis_setup.sql"
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -f "$${HOME}/postgis_setup.sql"
rm "$${HOME}/postgis_setup.sql"
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "CREATE EXTENSION IF NOT EXISTS aws_s3 CASCADE;"

# Adding users to Viz DB
echo "Adding viz proc user..."
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "CREATE ROLE $${VIZ_PROC_ADMIN_RW_USER};"
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "ALTER ROLE $${VIZ_PROC_ADMIN_RW_USER} WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 2000 ENCRYPTED PASSWORD '$${VIZ_PROC_ADMIN_RW_PASS}';"

echo "Adding viz dev user..."
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "CREATE ROLE $${VIZ_PROC_DEV_RW_USER};"
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "ALTER ROLE $${VIZ_PROC_DEV_RW_USER} WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 25 ENCRYPTED PASSWORD '$${VIZ_PROC_DEV_RW_PASS}';"

# Drop Viz DB Schemas
echo "Cleaning up Viz DB..."
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -c "DROP SCHEMA IF EXISTS admin CASCADE; DROP SCHEMA IF EXISTS archive CASCADE; DROP SCHEMA IF EXISTS ingest CASCADE; DROP SCHEMA IF EXISTS derived CASCADE; DROP SCHEMA IF EXISTS external CASCADE; DROP SCHEMA IF EXISTS fim CASCADE; DROP SCHEMA IF EXISTS cache CASCADE; DROP SCHEMA IF EXISTS publish CASCADE;"

# Resoring Viz DB Schema Dumps
echo "Setting up admin schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_admin.dump" "$${HOME}/vizDB_admin.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_admin.dump"
rm "$${HOME}/vizDB_admin.dump"

echo "Setting up archive schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_archive.dump" "$${HOME}/vizDB_archive.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_archive.dump"
rm "$${HOME}/vizDB_archive.dump"

echo "Setting up cache schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_cache.dump" "$${HOME}/vizDB_cache.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_cache.dump"
rm "$${HOME}/vizDB_cache.dump"

echo "Setting up derived schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_derived.dump" "$${HOME}/vizDB_derived.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_derived.dump"
rm "$${HOME}/vizDB_derived.dump"

echo "Setting up external schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_external.dump" "$${HOME}/vizDB_external.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_external.dump"
rm "$${HOME}/vizDB_external.dump"

echo "Setting up ingest schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_ingest.dump" "$${HOME}/vizDB_ingest.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_ingest.dump"
rm "$${HOME}/vizDB_ingest.dump"

echo "Setting up publish schema in the VIZ DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/vizDB_publish.dump" "$${HOME}/vizDB_publish.dump"
pg_restore -h "$${VIZDBHOST}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" -U $${VIZDBUSERNAME} -j 4 -v "$${HOME}/vizDB_publish.dump"
rm "$${HOME}/vizDB_publish.dump"

# Adding Dev Schema to Viz DB #ToDo: Only do this in Dev / TI environments.
echo "Setting up dev schema in the VIZ DB and grant full permissions to both viz proc and dev users..."
psql -h "$${VIZDBHOST}" -U "$${VIZDBUSERNAME}" -p $${VIZDBPORT} -d "$${VIZDBNAME}" \
    -tAc "DROP SCHEMA IF EXISTS dev CASCADE;
            CREATE SCHEMA dev;
            GRANT ALL ON SCHEMA dev TO $${VIZ_PROC_ADMIN_RW_USER};
            GRANT ALL ON ALL TABLES IN SCHEMA dev TO $${VIZ_PROC_ADMIN_RW_USER};
            ALTER DEFAULT PRIVILEGES IN SCHEMA dev GRANT all ON TABLES TO $${VIZ_PROC_ADMIN_RW_USER};
            GRANT ALL ON SCHEMA dev TO $${VIZ_PROC_DEV_RW_USER};
            GRANT ALL ON ALL TABLES IN SCHEMA dev TO $${VIZ_PROC_DEV_RW_USER};
            ALTER DEFAULT PRIVILEGES IN SCHEMA dev GRANT all ON TABLES TO $${VIZ_PROC_DEV_RW_USER};"

# Setting up EGIS DB - Part 2
export PGPASSWORD=$${EGISDBPASSWORD}

# Adding foreign data wrapper-linked schema to the viz processing publish, for the transfer of published data.
echo "Setting up vizprc_publish schema in the EGIS DB, ensuring postgres_fdw extension installed, and setting up foreign table wrappers..."
psql -h "$${EGISDBHOST}" -U "$${EGISDBUSERNAME}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" \
    -tAc "DROP SCHEMA IF EXISTS vizprc_publish;
            CREATE SCHEMA IF NOT EXISTS vizprc_publish;
            GRANT ALL ON SCHEMA vizprc_publish TO $${EGISDBUSERNAME};
            GRANT ALL ON ALL TABLES IN SCHEMA vizprc_publish TO $${EGISDBUSERNAME};
            ALTER DEFAULT PRIVILEGES IN SCHEMA vizprc_publish GRANT all ON TABLES TO $${EGISDBUSERNAME};

            CREATE EXTENSION IF NOT EXISTS postgres_fdw;
            DROP SERVER IF EXISTS vizprc_db CASCADE;
            CREATE SERVER vizprc_db FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '$${VIZDBHOST}', dbname '$${VIZDBNAME}', port '$${VIZDBPORT}');
            CREATE USER MAPPING FOR $${EGISDBUSERNAME} SERVER vizprc_db OPTIONS (user '$${VIZ_PROC_ADMIN_RW_USER}', password '$${VIZ_PROC_ADMIN_RW_PASS}');
            IMPORT FOREIGN SCHEMA publish FROM SERVER vizprc_db INTO vizprc_publish;"

# Drop EGIS Reference Schema
echo "Cleaning up EGIS DB..."
psql -h "$${EGISDBHOST}" -U "$${EGISDBUSERNAME}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -c "DROP SCHEMA IF EXISTS reference CASCADE;"

# Restoring EGIS Reference Schema Dumps
echo "Setting up reference schema in the EGIS DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/egisDB_reference.dump" "$${HOME}/egisDB_reference.dump"
pg_restore -h "$${EGISDBHOST}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -U $${EGISDBUSERNAME} -j 4 -v "$${HOME}/egisDB_reference.dump"
rm "$${HOME}/egisDB_reference.dump"

# Restoring FIM Catchments Schema Dumps
echo "Setting up fim_catchments schema in the EGIS DB..."
aws s3 cp "s3://$${DEPLOYMENT_BUCKET}/viz/db_pipeline/db_dumps/egisDB_fim_catchments.dump" "$${HOME}/egisDB_fim_catchments.dump"
pg_restore -h "$${EGISDBHOST}" -p $${EGISDBPORT} -d "$${EGISDBNAME}" -U $${EGISDBUSERNAME} -j 4 -v "$${HOME}/egisDB_fim_catchments.dump"
rm "$${HOME}/egisDB_fim_catchments.dump"