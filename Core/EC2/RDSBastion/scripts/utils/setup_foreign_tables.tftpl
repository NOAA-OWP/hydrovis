#!/bin/bash

echo ""
echo "---- SETTING UP FOREIGN TABLES ----"

export PGOPTIONS='-c client_min_messages=warning'
export PGPASSWORD=${db_password}

echo "Dropping existing foreign tables in the ${db_schema} schema"
psql -h "${db_host}" -U "${db_username}" -p ${db_port} -d "${db_name}" \
    -tAc "do
            '
            declare
            l_rec record;
            begin
            for l_rec in (select foreign_table_schema, foreign_table_name 
                            from information_schema.foreign_tables
                            where foreign_table_schema = ''${db_schema}'') loop
                execute format(''drop foreign table %I.%I'', l_rec.foreign_table_schema, l_rec.foreign_table_name);
            end loop;
            end;
            '"

echo "Creating new foreign tables in the ${db_schema} schema"
psql -h "${db_host}" -U "${db_username}" -p ${db_port} -d "${db_name}" \
    -tAc "CREATE EXTENSION IF NOT EXISTS postgres_fdw;
            DROP SERVER IF EXISTS ${foreign_server} CASCADE;
            CREATE SERVER ${foreign_server} FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '${foreign_db_host}', dbname '${foreign_db_name}', port '${foreign_db_port}');
            CREATE USER MAPPING FOR ${db_username} SERVER ${foreign_server} OPTIONS (user '${foreign_db_username}', password '${foreign_db_password}');
            IMPORT FOREIGN SCHEMA ${foreign_schema} FROM SERVER ${foreign_server} INTO ${db_schema};
            ALTER SERVER ${foreign_server} OPTIONS (fetch_size '150000');"

%{ for user in user_mappings ~}
echo "Creating user mappings for ${user}"
psql -h "${db_host}" -U "${db_username}" -p ${db_port} -d "${db_name}" \
    -tAc "CREATE USER MAPPING FOR ${user} SERVER ${foreign_server} OPTIONS (user '${foreign_db_username}', password '${foreign_db_password}');"

%{ endfor ~}

%{ if foreign_server == "wrds_location" }

psql -h "${db_host}" -U "${db_username}" -p ${db_port} -d "${db_name}" -tAc "\
DROP VIEW IF EXISTS rnr.flow_thresholds;
CREATE VIEW rnr.flow_thresholds AS

WITH

main AS (
	SELECT 
		station.location_id as nws_station_id,
		COALESCE(native.action_flow, usgs.action_flow_calc, nrldb.action_flow_calc) as action,
			CASE 
				WHEN native.action_flow IS NOT NULL
				THEN 'Native'
				WHEN usgs.action_flow_calc IS NOT NULL
				THEN 'USGS'
				WHEN nrldb.action_flow_calc IS NOT NULL
				THEN 'NRLDB'
			END as action_source,
			COALESCE(native.minor_flow, usgs.minor_flow_calc, nrldb.minor_flow_calc) as minor,
			CASE 
				WHEN native.minor_flow IS NOT NULL
				THEN 'Native'
				WHEN usgs.minor_flow_calc IS NOT NULL
				THEN 'USGS'
				WHEN nrldb.minor_flow_calc IS NOT NULL
				THEN 'NRLDB'
			END as minor_source,
			COALESCE(native.moderate_flow, usgs.moderate_flow_calc, nrldb.moderate_flow_calc) as moderate,
			CASE 
				WHEN native.moderate_flow IS NOT NULL
				THEN 'Native'
				WHEN usgs.moderate_flow_calc IS NOT NULL
				THEN 'USGS'
				WHEN nrldb.moderate_flow_calc IS NOT NULL
				THEN 'NRLDB'
			END as moderate_source,
			COALESCE(native.major_flow, usgs.major_flow_calc, nrldb.major_flow_calc) as major,
			CASE 
				WHEN native.major_flow IS NOT NULL
				THEN 'Native'
				WHEN usgs.major_flow_calc IS NOT NULL
				THEN 'USGS'
				WHEN nrldb.major_flow_calc IS NOT NULL
				THEN 'NRLDB'
			END as major_source,
			COALESCE(native.record_flow, usgs.record_flow_calc, nrldb.record_flow_calc) as record,
			CASE 
				WHEN native.record_flow IS NOT NULL
				THEN 'Native'
				WHEN usgs.record_flow_calc IS NOT NULL
				THEN 'USGS'
				WHEN nrldb.record_flow_calc IS NOT NULL
				THEN 'NRLDB'
			END as record_source
	FROM (SELECT DISTINCT location_id FROM external.threshold) AS station
	LEFT JOIN external.threshold native
		ON native.location_id = station.location_id 
		AND native.rating_source = 'NONE'
	LEFT JOIN external.threshold usgs
		ON usgs.location_id = station.location_id 
		AND usgs.rating_source = 'USGS Rating Depot'
	LEFT JOIN external.threshold nrldb
		ON nrldb.location_id = station.location_id 
		AND nrldb.rating_source = 'NRLDB'
)

SELECT * FROM main
WHERE COALESCE(action, minor, moderate, major, record) IS NOT NULL;

-- CREATE STAGE THRESHOLDS VIEW
DROP VIEW IF EXISTS rnr.stage_thresholds;
CREATE VIEW rnr.stage_thresholds AS

WITH

native_stage_thresholds AS (
	SELECT 
		location_id,
		action_stage,
		minor_stage,
		moderate_stage,
		major_stage,
		record_stage
	FROM external.threshold
	WHERE rating_source = 'NONE'
)

SELECT 
	location_id AS nws_station_id,
	action_stage as action,
	'Native' as action_source,
	minor_stage as minor,
	'Native' as minor_source,
	moderate_stage as moderate,
	'Native' as moderate_source,
	major_stage as major,
	'Native' as major_source,
	record_stage as record,
	'Native' as record_source
FROM external.threshold station
WHERE rating_source = 'NONE' 
	AND COALESCE(action_stage, minor_stage, moderate_stage, major_stage, record_stage) IS NOT NULL;
"

%{ endif }