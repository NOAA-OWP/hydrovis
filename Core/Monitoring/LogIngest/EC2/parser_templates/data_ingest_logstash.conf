filter {
    if [hydrovis_application] == "data_ingest" {
        grok {
            match => { "message" => "logger: %%{WORD:logger}, .*, level: %%{WORD:logger_level} - %%{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        grok {
            match => { "message" => "%%{WORD:logger}\.py.*: %%{WORD:logger_level}: %%{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        grok {
            match => { "message" => "%%{WORD:logger}\.sh.*: %%{WORD:logger_level}: %%{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        grok {
            match => { "message" => "Waiting for %%{WORD:ingest_event} events from RabbitMQ"}
        }

        grok {
            match => { "message" => "Received an %%{WORD:ingest_event} event message with id: %%{NUMBER:ingest_event_id:int} and url: '%%{GREEDYDATA:ingest_file}'"}
            add_field => { "hml_ingest_process_status_code" => 1 }
        }
        
        grok {
            match => { "message" => "Processed file: '%%{GREEDYDATA:ingest_file}' - forecasts extracted: %%{NUMBER:hml_forecasts:int}"}
            add_field => { "hml_ingest_process_status_code" => 2 }
        }

        if [ingest_file] {
            grok {
                match => {"ingest_file" => "_HML%%{GREEDYDATA:wfo}\."}
            }
        }
            
        grok {
            match => { "message" => "Parsing %%{WORD:ingest_event} from wfo: %%{WORD:wfo}, gage: %%{WORD:gage}"}
            add_field => { "xml_ingest_process_status_code" => 1 }
        }
        
        grok {
            match => { "message" => "<ForecastTimeSeries\( generation_time: %%{TIMESTAMP_ISO8601:forecast_generation_time}, issued_time: %%{TIMESTAMP_ISO8601:forecast_issued_time}wfo:%%{WORD:wfo}, gage: %%{WORD:gage}, category: %%{WORD:forecast_category}, name: %%{WORD:forecast_type} \)>"}
            add_field => { "xml_ingest_process_status_code" => 2 }
        }

        grok {
            match => { "message" => "Inserting %%{WORD:forecast_category} forecasts for gage: %%{WORD:gage}"}
            add_field => { "xml_ingest_process_status_code" => 3 }
        }
                    
        grok {
            match => { "message" => "Removing records older than %%{TIMESTAMP_ISO8601:ingest_cleaner_threshold} from table %%{WORD:ingest_cleaner_table}"}
            add_field => { "ingest_cleaner_process_status_code" => 1 }
        }

        grok {
            match => { "message" => "Removed %%{WORD:ingest_records_cleaned:int} records from table %%{WORD:ingest_cleaner_table}"}
            add_field => { "ingest_cleaner_process_status_code" => 2 }
        }

        grok {
            match => { "message" => "Getting list of hours from %%{GREEDYDATA:hml_s3_bucket}"}
            add_field => { "ingest_backfill_process_status_code" => 1 }
        }

        grok {
            match => { "message" => "Latest time in %%{GREEDYDATA:hml_s3_bucket} is %%{GREEDYDATA:hml_s3_bucket_latest_date} %%{NUMBER:hml_s3_bucket_latest_hour:int} UTC"}
            add_field => {"hml_s3_bucket_latest_datetime" => "%%{hml_s3_bucket_latest_date}T%%{hml_s3_bucket_latest_hour}"}
            add_field => { "ingest_backfill_process_status_code" => 2 }
        }
                                        
        grok {
            match => { "message" => "Found %%{NUMBER:hml_records_found:int} for (?<hml_data_year>[\d.]{4})(?<hml_data_month>[\d.]{2})(?<hml_data_day>[\d.]{2})(?<hml_data_hour>[\d.]{2}) in %%{GREEDYDATA:hmml_s3_bucket}"}
            add_field => {"hml_data_datetime" => "%%{hml_data_year}-%%{hml_data_month}-%%{hml_data_day}T%%{hml_data_hour}"}
            add_field => { "ingest_backfill_process_status_code" => 3 }
        }

        grok {
            match => { "message" => "Found %%{NUMBER:hml_backfill_records_found:int} backfill entries"}
            add_field => { "ingest_backfill_process_status_code" => 4 }
        }

        grok {
            match => { "message" => "Done processing"}
            add_field => { "ingest_backfill_process_status_code" => 5 }
        }

        mutate {
            convert => {
                "hml_ingest_process_status_code" => "integer"
                "xml_ingest_process_status_code" => "integer"
                "ingest_cleaner_process_status_code" => "integer"
                "ingest_backfill_process_status_code" => "integer"
            }
        }
    }
}

#############
## Spin Up ##
#############

filter {
    if [hydrovis_application] == "data_ingest" and [programname] == "cloud-init" {
        grok {
            match => { "message" => "Setting up Rsyslog Configuration"}
            add_field => { "ingest_spinup_status_code" => 1 }
        }
        
        grok {
            match => { "message" => "Installing System Dependencies"}
            add_field => { "ingest_spinup_status_code" => 2 }
        } 
        
        grok {
            match => { "message" => "Installing HML Ingester"}
            add_field => { "ingest_spinup_status_code" => 3 }
        } 
        
        grok {
            match => { "message" => "Updating HML Ingester Configs"}
            add_field => { "ingest_spinup_status_code" => 4 }
        } 
        
        grok {
            match => { "message" => "Building HML Ingester Dockers"}
            add_field => { "ingest_spinup_status_code" => 5 }
        } 
        
        grok {
            match => { "message" => "Spinning up HML Ingester Dockers"}
            add_field => { "ingest_spinup_status_code" => 6 }
        }  
        
        grok {
            match => { "message" => "Finished Setup"}
            add_field => { "ingest_spinup_status_code" => 7 }
        }
    }

    mutate {
        convert => {
            "ingest_spinup_status_code" => "integer"
        }
    }
}