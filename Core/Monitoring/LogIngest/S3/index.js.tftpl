var https = require('https');

const endpoint = '${os_endpoint}'; // e.g. search-domain.region.es.amazonaws.com

exports.handler = async function(event, _context) {

    var snsPublishTime = event.Records[0].Sns.Timestamp

    var messageId = event.Records[0].Sns.MessageId
    var message = JSON.parse(event.Records[0].Sns.Message)
    var newAlertState = message.NewStateValue
    var oldAlertState = message.OldStateValue

    var bucketName = message.Trigger.Metrics[1].MetricStat.Metric.Dimensions[1].value

    if (newAlertState != oldAlertState) {
        if (newAlertState == "ALARM") {
            console.log(`Bucket $${bucketName} reported irregular object counts at $${snsPublishTime}`)
        }
        else {
            console.log(`Bucket $${bucketName} reported back to normal at $${snsPublishTime}`)
        }

        var json = {
            "@timestamp": snsPublishTime,
            "bucket": bucketName,
            "alert_state": newAlertState,
        };

        return indexDocument(json, messageId)
    }
};

function indexDocument(json, id) {

    // post documents to the Amazon OpenSearch Service
    post(JSON.stringify(json), id, function(error, success, statusCode, failedItems) {
        console.log('Response: ' + JSON.stringify({
            "statusCode": statusCode
        }));

        if (error) {
            logFailure(error, failedItems);
            context.fail(JSON.stringify(error));
        } else {
            console.log('Success: ' + JSON.stringify(success));
            context.succeed('Success');
        }
    });
};



function post(body, id, callback) {
    var requestParams = buildRequest(body, id);

    var request = https.request(requestParams, function(response) {
        var responseBody = '';
        response.on('data', function(chunk) {
            responseBody += chunk;
        });

        response.on('end', function() {
            var info = JSON.parse(responseBody);
            var failedItems;
            var success;
            var error;

            if (response.statusCode >= 200 && response.statusCode < 299) {
                failedItems = info.items.filter(function(x) {
                    return x.index.status >= 300;
                });

                success = {
                    "attemptedItems": info.items.length,
                    "successfulItems": info.items.length - failedItems.length,
                    "failedItems": failedItems.length
                };
            }

            if (response.statusCode !== 200 || info.errors === true) {
                // prevents logging of failed entries, but allows logging
                // of other errors such as access restrictions
                delete info.items;
                error = {
                    statusCode: response.statusCode,
                    responseBody: info
                };
            }

            callback(error, success, response.statusCode, failedItems);
        });
    }).on('error', function(e) {
        callback(e);
    });
    request.end(requestParams.body);
}

function buildRequest(body, id) {
    var request = {
        host: endpoint,
        method: 'PUT',
        path: '/s3_anomaly_detection/_doc/' + id,
        body: body,
        headers: {
            'Content-Type': 'application/json',
            'Host': endpoint,
            'Content-Length': Buffer.byteLength(body)
        },
        auth: '${admin_username}:${admin_password}'
    };

    return request;
}

function logFailure(error, failedItems) {
    if (logFailedResponses) {
        console.log('Error: ' + JSON.stringify(error, null, 2));

        if (failedItems && failedItems.length > 0) {
            console.log("Failed Items: " +
                JSON.stringify(failedItems, null, 2));
        }
    }
}
