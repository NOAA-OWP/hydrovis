{
  "Comment": "Processes the outputs for all SCHISM FIM services.",
  "StartAt": "DB Prep",
  "States": {
    "DB Prep": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${db_postprocess_sql_arn}",
        "Payload": {
          "step": "ingest_prep",
          "folder": "admin",
          "args": {
            "reference_time.$": "$.reference_time",
            "sql_rename_dict.$": "$.sql_rename_dict",
            "db_ingest_group": {
              "target_table.$": "$.fim_config.target_table",
              "index_columns": "()",
              "index_name.$": "States.Format('idx_{}', States.ArrayGetItem(States.StringSplit($.fim_config.target_table, '.'), 1))",
              "dependent_on": ""
            }
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 2
        }
      ],
      "Next": "Get Tile Keys From S3",
      "ResultPath": null
    },
    "Get Tile Keys From S3": {
      "Type": "Task",
      "Next": "Iterate over Tiles",
      "Parameters": {
        "Bucket": "${schism_fim_datasets_bucket}",
        "Prefix.$": "States.Format('schism_fim/dems/{}/tiles/', States.ArrayGetItem(States.StringSplit($.fim_config.sql_file, '_'), 1))"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "ResultSelector": {
        "Bucket.$": "$.Name",
        "Keys.$": "States.ArrayPartition($.Contents[?(@.Key =~ /.*\\.tif/i)].Key, 7)"
      },
      "ResultPath": "$.tiles"
    },
    "Iterate over Tiles": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Process Tile",
        "States": {
          "Process Tile": {
            "Type": "Task",
            "Resource": "arn:aws:states:::batch:submitJob.sync",
            "Parameters": {
              "JobName.$": "$.job_name",
              "JobDefinition": "${schism_fim_job_definition_arn}",
              "JobQueue": "${schism_fim_job_queue_arn}",
              "Parameters": {
                "args_as_json.$": "States.JsonToString($)"
              }
            },
            "End": true,
            "TimeoutSeconds": 5400
          }
        }
      },
      "ItemsPath": "$.tiles.Keys",
      "ItemSelector": {
        "tile_keys.$": "$$.Map.Item.Value",
        "reference_time.$": "$.reference_time",
        "product.$": "$.product.product",
        "output_bucket.$": "$.product.raster_outputs.output_bucket",
        "output_workspaces.$": "$.product.raster_outputs.output_raster_workspaces",
        "fim_config.$": "$.fim_config",
        "step": "iteration",
        "job_name.$": "States.Format('{}_{}', $$.Execution.Name, $$.Map.Item.Index)"
      },
      "Next": "DB Finalize",
      "ResultPath": null
    },
    "DB Finalize": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${db_postprocess_sql_arn}",
        "Payload": {
          "step": "ingest_finish",
          "folder": "admin",
          "args": {
            "reference_time.$": "$.reference_time",
            "sql_rename_dict.$": "$.sql_rename_dict",
            "db_ingest_group": {
              "target_table.$": "$.fim_config.target_table",
              "index_columns.$": "States.Format('USING GIST (geom); ALTER TABLE {} DROP COLUMN IF EXISTS huc8;', $.fim_config.target_table)",
              "index_name.$": "States.Format('idx_{}', States.ArrayGetItem(States.StringSplit($.fim_config.target_table, '.'), 1))",
              "dependent_on": ""
            }
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Create VRT",
      "ResultPath": null
    },
    "Create VRT": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${optimize_rasters_arn}",
        "Payload": {
          "step": "create_vrt",
          "args": {
            "fim_config.$": "$.fim_config",
            "product.$": "$.product"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "End": true
    }
  }
}