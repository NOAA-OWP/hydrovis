{
  "Comment": "A description of my state machine",
  "StartAt": "Python Max Flow Processing",
  "States": {
    "Python Max Flow Processing": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Python - Max Flows",
        "States": {
          "Python - Max Flows": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${max_flows_arn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Next": "Input Data Groups",
      "ItemsPath": "$.configuration_data_flow.lambda_max_flows",
      "ResultPath": null
    },
    "Input Data Groups": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "Postprocess SQL - Input Data Prep",
        "States": {
          "Postprocess SQL - Input Data Prep": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "args.$": "$",
                "step": "ingest_prep",
                "folder": "admin"
              },
              "FunctionName": "${db_postprocess_sql_arn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "Next": "Input Data Files",
            "ResultPath": null
          },
          "Input Data Files": {
            "Type": "Map",
            "Iterator": {
              "StartAt": "Input Data Checker/Ingester",
              "States": {
                "Input Data Checker/Ingester": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${db_ingest_arn}"
                  },
                  "End": true,
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "MissingS3FileException"
                      ],
                      "BackoffRate": 1,
                      "IntervalSeconds": 120,
                      "MaxAttempts": 35,
                      "Comment": "Missing S3 File"
                    },
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ]
                }
              }
            },
            "ResultPath": null,
            "Next": "Postprocess SQL - Input Data Prep Finish",
            "Parameters": {
              "file.$": "$$.Map.Item.Value",
              "target_table.$": "$.map_item.target_table",
              "bucket.$": "$.map_item.bucket",
              "reference_time.$": "$.reference_time",
              "keep_flows_at_or_above.$": "$.map_item.keep_flows_at_or_above"
            },
            "ItemsPath": "$.map_item.ingest_datasets"
          },
          "Postprocess SQL - Input Data Prep Finish": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "args.$": "$",
                "step": "ingest_finish",
                "folder": "admin"
              },
              "FunctionName": "${db_postprocess_sql_arn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "End": true,
            "ResultPath": null
          }
        }
      },
      "ResultPath": null,
      "ItemsPath": "$.configuration_data_flow.db_ingest_groups",
      "Parameters": {
        "map_item.$": "$$.Map.Item.Value",
        "reference_time.$": "$.reference_time",
        "sql_rename_dict.$": "$.sql_rename_dict"
      },
      "Next": "DB Max Flows Processing"
    },
    "DB Max Flows Processing": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "Postprocess SQL - Max Flows",
        "States": {
          "Postprocess SQL - Max Flows": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${db_postprocess_sql_arn}",
              "Payload": {
                "args.$": "$",
                "step": "max_flows",
                "folder": "max_flows"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "End": true
          }
        }
      },
      "ResultPath": null,
      "ItemsPath": "$.configuration_data_flow.db_max_flows",
      "Parameters": {
        "map_item.$": "$$.Map.Item.Value",
        "reference_time.$": "$.reference_time",
        "sql_rename_dict.$": "$.sql_rename_dict"
      },
      "MaxConcurrency": 5,
      "Next": "Product Processing"
    },
    "Product Processing": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "FIM vs Non-FIM Services",
        "States": {
          "FIM vs Non-FIM Services": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.product.product_type",
                "StringEquals": "fim",
                "Comment": "FIM Processing",
                "Next": "FIM Config Processing"
              }
            ],
            "Default": "Vector vs Raster"
          },
          "Vector vs Raster": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.product.product_type",
                "StringEquals": "raster",
                "Comment": "Raster Processing",
                "Next": "Raster Processing"
              }
            ],
            "Default": "Postprocess SQL - Service"
          },
          "Raster Processing": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${raster_processing_arn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "Next": "Map",
            "OutputPath": "$.Payload"
          },
          "Map": {
            "Type": "Map",
            "Next": "Postprocess SQL - Service",
            "Iterator": {
              "StartAt": "Optimize Rasters",
              "States": {
                "Optimize Rasters": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${optimize_rasters_arn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "End": true
                }
              }
            },
            "ItemsPath": "$.output_rasters",
            "Parameters": {
              "output_raster.$": "$$.Map.Item.Value",
              "service.$": "$.service",
              "reference_time.$": "$.reference_time",
              "map_item.$": "$.map_item",
              "job_type.$": "$.job_type",
              "output_bucket.$": "$.output_bucket"
            },
            "ResultPath": null
          },
          "FIM Config Processing": {
            "Type": "Map",
            "Next": "Parallelize Summaries",
            "Iterator": {
              "StartAt": "Choice",
              "States": {
                "Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.fim_config",
                      "StringMatches": "*coastal*",
                      "Next": "SCHISM Max Flows"
                    }
                  ],
                  "Default": "FIM Data Preparation - Setup HUC Branch Data"
                },
                "SCHISM Max Flows": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${max_flows_arn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Process Coastal (SCHISM) FIM"
                },
                "Process Coastal (SCHISM) FIM": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution.sync:2",
                  "Parameters": {
                    "StateMachineArn": "${schism_fim_processing_step_function_arn}",
                    "Input": {
                      "configuration.$": "$.fim_config",
                      "reference_time.$": "$.reference_time",
                      "job_type.$": "$.job_type",
                      "service.$": "$.service"
                    }
                  },
                  "Next": "Add \"_inundation\" to $.map_item (",
                  "ResultPath": null
                },
                "Add \"_inundation\" to $.map_item (": {
                  "Type": "Pass",
                  "Next": "Add \"_inundation\" to $.map_item (1)",
                  "Parameters": {
                    "input.$": "$",
                    "mods": {
                      "map_item.$": "States.Format('{}_inundation', $.map_item)"
                    }
                  }
                },
                "Add \"_inundation\" to $.map_item (1)": {
                  "Type": "Pass",
                  "Next": "Update EGIS Data - FIM Config",
                  "Parameters": {
                    "output.$": "States.JsonMerge($.input, $.mods, false)"
                  },
                  "OutputPath": "$.output"
                },
                "FIM Data Preparation - Setup HUC Branch Data": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${fim_data_prep_arn}",
                    "Payload": {
                      "args.$": "$",
                      "step": "setup_branch_iteration"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "Next": "HUC Processing Map",
                  "ResultPath": "$.huc_processing_payload",
                  "ResultSelector": {
                    "huc_branches_to_process.$": "$.Payload.huc_branches_to_process",
                    "db_fim_table.$": "$.Payload.db_fim_table",
                    "data_bucket.$": "$.Payload.data_bucket",
                    "data_prefix.$": "$.Payload.data_prefix",
                    "reference_time.$": "$.Payload.reference_time",
                    "fim_config.$": "$.Payload.fim_config",
                    "service.$": "$.Payload.service"
                  }
                },
                "HUC Processing Map": {
                  "Type": "Map",
                  "Iterator": {
                    "StartAt": "FIM HUC Processing State Machine",
                    "States": {
                      "FIM HUC Processing State Machine": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::states:startExecution.sync:2",
                        "Parameters": {
                          "StateMachineArn": "arn:aws:states:us-east-1:526904826677:stateMachine:huc_processing_ti_new_infrastructure",
                          "Name.$": "$.state_machine_name",
                          "Input": {
                            "huc_branches_to_process.$": "$.huc_branches_to_process",
                            "db_fim_table.$": "$.db_fim_table",
                            "data_bucket.$": "$.data_bucket",
                            "data_prefix.$": "$.data_prefix",
                            "reference_time.$": "$.reference_time",
                            "fim_config.$": "$.fim_config",
                            "service.$": "$.service.service",
                            "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                          }
                        },
                        "End": true
                      }
                    }
                  },
                  "ItemsPath": "$.huc_processing_payload.huc_branches_to_process",
                  "ResultPath": null,
                  "Next": "Postprocess SQL - FIM Config",
                  "ItemSelector": {
                    "huc_branches_to_process.$": "$$.Map.Item.Value",
                    "db_fim_table.$": "$.huc_processing_payload.db_fim_table",
                    "data_bucket.$": "$.huc_processing_payload.data_bucket",
                    "data_prefix.$": "$.huc_processing_payload.data_prefix",
                    "reference_time.$": "$.huc_processing_payload.reference_time",
                    "fim_config.$": "$.huc_processing_payload.fim_config",
                    "service.$": "$.service",
                    "state_machine_name.$": "States.Format('{}_{}_{}', $$.Execution.Name, $.fim_config, $$.Map.Item.Index)"
                  },
                  "MaxConcurrency": 4
                },
                "Postprocess SQL - FIM Config": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${db_postprocess_sql_arn}",
                    "Payload": {
                      "args": {
                        "map.$": "$",
                        "map_item.$": "$.fim_config",
                        "reference_time.$": "$.reference_time",
                        "sql_rename_dict.$": "$.sql_rename_dict"
                      },
                      "step": "fim_config",
                      "folder": "services"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "ResultPath": null,
                  "Next": "Update EGIS Data - FIM Config"
                },
                "Update EGIS Data - FIM Config": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${update_egis_data_arn}",
                    "Payload": {
                      "args.$": "$",
                      "step": "update_fim_config_data"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "ResultPath": null,
                  "End": true
                }
              }
            },
            "ItemsPath": "$.service.fim_configs",
            "Parameters": {
              "fim_config.$": "$$.Map.Item.Value",
              "map_item.$": "$$.Map.Item.Value",
              "job_type.$": "$.job_type",
              "service.$": "$.service",
              "reference_time.$": "$.reference_time",
              "sql_rename_dict.$": "$.sql_rename_dict"
            },
            "ResultPath": null
          },
          "Postprocess SQL - Service": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${db_postprocess_sql_arn}",
              "Payload": {
                "args.$": "$",
                "step": "products",
                "folder": "products"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "Next": "Update EGIS Data - Service",
            "ResultPath": null
          },
          "Update EGIS Data - Service": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${update_egis_data_arn}",
              "Payload": {
                "args.$": "$",
                "step": "update_service_data"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              }
            ],
            "ResultPath": null,
            "Next": "Parallelize Summaries"
          },
          "Parallelize Summaries": {
            "Type": "Map",
            "Next": "Update EGIS Data - Unstage",
            "Iterator": {
              "StartAt": "Postprocess SQL - Summary",
              "States": {
                "Postprocess SQL - Summary": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${db_postprocess_sql_arn}",
                    "Payload": {
                      "args": {
                        "map.$": "$",
                        "map_item.$": "$.postprocess_summary",
                        "reference_time.$": "$.reference_time",
                        "sql_rename_dict.$": "$.sql_rename_dict"
                      },
                      "step": "summaries",
                      "folder": "summaries"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "ResultPath": null,
                  "Next": "Update EGIS Data - Summary"
                },
                "Update EGIS Data - Summary": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${update_egis_data_arn}",
                    "Payload": {
                      "args.$": "$",
                      "step": "update_summary_data"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "ResultPath": null,
                  "End": true
                }
              }
            },
            "ItemsPath": "$.product.product_summaries",
            "Parameters": {
              "product.$": "$.product",
              "map_item.$": "$.map_item",
              "reference_time.$": "$.reference_time",
              "job_type.$": "$.job_type",
              "sql_rename_dict.$": "$.sql_rename_dict",
              "postprocess_summary.$": "$$.Map.Item.Value"
            },
            "ResultPath": null
          },
          "Update EGIS Data - Unstage": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${update_egis_data_arn}",
              "Payload": {
                "args.$": "$",
                "step": "unstage"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2,
                "Comment": "Lambda Service Errors"
              },
              {
                "ErrorEquals": [
                  "UndefinedTable"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 5,
                "MaxAttempts": 3,
                "Comment": "Stage Table Doesn't Exist"
              }
            ],
            "ResultPath": null,
            "Next": "Auto vs. Past Event Run"
          },
          "Auto vs. Past Event Run": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.job_type",
                "StringEquals": "past_event",
                "Next": "Pass"
              }
            ],
            "Default": "Service Publishing"
          },
          "Service Publishing": {
            "Type": "Map",
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Publish Service",
              "States": {
                "Publish Service": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${publish_service_arn}",
                    "Payload": {
                      "service.$": "$",
                      "step": "publish"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2,
                      "Comment": "Lambda Service Errors"
                    }
                  ],
                  "ResultPath": null,
                  "End": true
                }
              }
            },
            "Next": "Pass",
            "ItemsPath": "$.product.services"
          },
          "Pass": {
            "Type": "Pass",
            "End": true,
            "ResultPath": null,
            "Result": {
              "ValueEnteredInForm": ""
            }
          }
        }
      },
      "Parameters": {
        "product.$": "$$.Map.Item.Value",
        "reference_time.$": "$.reference_time",
        "job_type.$": "$.job_type",
        "sql_rename_dict.$": "$.sql_rename_dict"
      },
      "ItemsPath": "$.pipeline_products",
      "MaxConcurrency": 15,
      "ResultSelector": {
        "error.$": "$[?(@.error)]"
      },
      "End": true
    }
  },
  "TimeoutSeconds": 4500
}