{
  "version": 4,
  "terraform_version": "1.0.1",
  "serial": 105,
  "lineage": "03c5ee1f-7761-cdc4-9e96-f02cd3570078",
  "outputs": {},
  "resources": [
    {
      "module": "module.data-ingest-ec2",
      "mode": "data",
      "type": "aws_ami",
      "name": "linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-025b76b777024295e",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0a876d9af57e76134",
                  "throughput": "0",
                  "volume_size": "12",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-11-19T21:49:21.000Z",
            "description": "add docker for stig",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-amznlinux2-STIGD*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-025b76b777024295e",
            "image_id": "ami-025b76b777024295e",
            "image_location": "526904826677/hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0a876d9af57e76134",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-ingest-ec2",
      "mode": "data",
      "type": "template_file",
      "name": "prc_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "970ba82c216ab05a37dd8e4e93089861829ccb86c42b79e65273ff8fd6e2b9e3",
            "rendered": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_ingest\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Installing System Dependencies\"\nsudo yum -y install git postgresql12\n\necho \"Installing HML Ingester\"\naws s3 cp s3://hydrovis-uat-deployment-us-east-1/ingest/owp-hml-ingester.tar.gz /home/ec2-user\ntar -C /home/ec2-user -xzf /home/ec2-user/owp-hml-ingester.tar.gz\n\necho \"Updating HML Ingester Configs\"\nRSCHEME=amqps\nRPORT=5671\nRHOST=b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com\nRPASSWORD=J9SabmtesQFUF5O50t2o8O3Cb\nDBHOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\nDBPASSWORD=J9SabmtesQFUF5O50t2o8O3Cb\n\n# Update configs\n(echo \"$RHOST\"; echo \"$RPASSWORD\"; echo \"$DBHOST\"; echo \"$DBPASSWORD\") | sudo /home/ec2-user/owp-hml-ingester/update_configs.sh hydrovis.uat\n\necho \"Building HML Ingester Dockers\"\n/usr/local/bin/docker-compose -f /home/ec2-user/owp-hml-ingester/docker-compose_hydrovis_uat.yml build\n\necho \"Spinning up HML Ingester Dockers\"\n/usr/local/bin/docker-compose -f /home/ec2-user/owp-hml-ingester/docker-compose_hydrovis_uat.yml up -d\n\necho \"Finished Setup\"\n\n",
            "template": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=${logstash_ip}\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_ingest\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Installing System Dependencies\"\nsudo yum -y install git postgresql12\n\necho \"Installing HML Ingester\"\naws s3 cp s3://${DEPLOYMENT_DATA_BUCKET}/ingest/owp-hml-ingester.tar.gz /home/ec2-user\ntar -C /home/ec2-user -xzf /home/ec2-user/owp-hml-ingester.tar.gz\n\necho \"Updating HML Ingester Configs\"\nRSCHEME=${RSCHEME}\nRPORT=${RPORT}\nRHOST=${RHOST}\nRPASSWORD=${MQINGESTPASSWORD}\nDBHOST=${DBHOST}\nDBPASSWORD=${DBPASSWORD}\n\n# Update configs\n(echo \"$RHOST\"; echo \"$RPASSWORD\"; echo \"$DBHOST\"; echo \"$DBPASSWORD\") | sudo /home/ec2-user/owp-hml-ingester/update_configs.sh hydrovis.${HVLEnvironment}\n\necho \"Building HML Ingester Dockers\"\n/usr/local/bin/docker-compose -f /home/ec2-user/owp-hml-ingester/docker-compose_hydrovis_${HVLEnvironment}.yml build\n\necho \"Spinning up HML Ingester Dockers\"\n/usr/local/bin/docker-compose -f /home/ec2-user/owp-hml-ingester/docker-compose_hydrovis_${HVLEnvironment}.yml up -d\n\necho \"Finished Setup\"\n\n",
            "vars": {
              "DBHOST": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
              "DBPASSWORD": "J9SabmtesQFUF5O50t2o8O3Cb",
              "DEPLOYMENT_DATA_BUCKET": "hydrovis-uat-deployment-us-east-1",
              "HVLEnvironment": "uat",
              "MQINGESTPASSWORD": "J9SabmtesQFUF5O50t2o8O3Cb",
              "RHOST": "b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com",
              "RPORT": "5671",
              "RSCHEME": "amqps",
              "logstash_ip": "10.27.2.20"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "DBPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "MQINGESTPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RHOST",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RPORT",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RSCHEME",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.data-ingest-ec2",
      "mode": "managed",
      "type": "aws_instance",
      "name": "ingest_prc1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-025b76b777024295e",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-0647e62775c92944b",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "hydrovis-uat-hml-ingest-role",
            "id": "i-0647e62775c92944b",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0843754469fcd51e4",
            "private_dns": "ip-10-27-2-72.ec2.internal",
            "private_ip": "10.27.2.72",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-00ec9115d5d908a3c",
                "volume_size": 30,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-04914abb2085ae5dd",
            "tags": {
              "Name": "hv-uat-ing-l-prc-1",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-ing-l-prc-1",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "1a1f871a41aea2dd6a7408cad96ff090c2b3f3ca",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01a5ed608003e9f20",
              "sg-0584d6697b3f809b5",
              "sg-0e1ceb05bcc5bf0af"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.monitoring.aws_instance.logstash",
            "module.monitoring.data.cloudinit_config.startup",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_instance_profile.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.monitoring.data.template_file.parser_templates",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_instance_profile.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.monitoring.aws_iam_service_linked_role.es",
            "module.monitoring.data.aws_ami.linux",
            "module.data-ingest-ec2.data.template_file.prc_install",
            "module.monitoring.aws_elasticsearch_domain.es",
            "module.monitoring.data.template_file.startup",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.data-ingest-ec2.data.aws_ami.linux",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.monitoring.aws_cloudwatch_log_group.es_loggroup",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a"
          ]
        }
      ]
    },
    {
      "module": "module.data-ingest-ec2",
      "mode": "managed",
      "type": "aws_instance",
      "name": "ingest_prc2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-025b76b777024295e",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-03ccea2d0fe4f719c",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "hydrovis-uat-hml-ingest-role",
            "id": "i-03ccea2d0fe4f719c",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0731db3e29017bb31",
            "private_dns": "ip-10-27-2-165.ec2.internal",
            "private_ip": "10.27.2.165",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-023e4fb91b465144e",
                "volume_size": 30,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-002c2ed1565d4579d",
            "tags": {
              "Name": "hv-uat-ing-l-prc-2",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-ing-l-prc-2",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "1a1f871a41aea2dd6a7408cad96ff090c2b3f3ca",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01a5ed608003e9f20",
              "sg-0584d6697b3f809b5",
              "sg-0e1ceb05bcc5bf0af"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.monitoring.aws_cloudwatch_log_group.es_loggroup",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.data-ingest-ec2.data.template_file.prc_install",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.monitoring.data.cloudinit_config.startup",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.iam-roles.aws_iam_instance_profile.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_instance_profile.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.monitoring.aws_elasticsearch_domain.es",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.monitoring.data.template_file.startup",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.monitoring.aws_iam_service_linked_role.es",
            "module.monitoring.aws_instance.logstash",
            "module.monitoring.data.template_file.parser_templates",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.data-ingest-ec2.data.aws_ami.linux",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.monitoring.data.aws_ami.linux",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a"
          ]
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "aws_ami",
      "name": "linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-025b76b777024295e",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0a876d9af57e76134",
                  "throughput": "0",
                  "volume_size": "12",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-11-19T21:49:21.000Z",
            "description": "add docker for stig",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-amznlinux2-STIGD*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-025b76b777024295e",
            "image_id": "ami-025b76b777024295e",
            "image_location": "526904826677/hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0a876d9af57e76134",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "cloudinit_config",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "1282143273",
            "part": [
              {
                "content": "#cloud-config\n{\"write_files\":[{\"content\":\"-----BEGIN OPENSSH PRIVATE KEY-----\\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\\nQyNTUxOQAAACCuSfpuEIxUW00QYRRbi9UDxPhg9qGMV3kgVuumB4rDFQAAAKCvoIHSr6CB\\n0gAAAAtzc2gtZWQyNTUxOQAAACCuSfpuEIxUW00QYRRbi9UDxPhg9qGMV3kgVuumB4rDFQ\\nAAAEAuLTSnhRk/7tqqFTrONBLjaP1YX0CAss6cUf0Y4SqtiK5J+m4QjFRbTRBhFFuL1QPE\\n+GD2oYxXeSBW66YHisMVAAAAFm5pY2suY2hhZHdpY2tAbm9hYS5nb3YBAgMEBQYH\\n-----END OPENSSH PRIVATE KEY-----\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/home/ec2-user/.ssh/id_ed25519\",\"permissions\":\"0400\"},{\"content\":\"version: \\\"3.5\\\"\\nservices:\\n  wrds_infrastructure:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n    container_name: wrds_infrastructure\\n    restart: always\\n    volumes:\\n      - wrds_apis:/var/www/\\n    networks:\\n      - wrds_nginx\\n    ports:\\n      - \\\"80:80\\\"\\n    environment:\\n      - ENV=aws\\n    external_links:\\n      - wrds_location_api_v3.0\\n      - wrds_rfc_forecast_api_v2.0\\n      - wrds_rfc_forecast_api_v1.1\\nvolumes:\\n  wrds_apis:\\n    name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-infrastructure.yml\",\"permissions\":\"0777\"},{\"content\":\"DB_NAME=wrds_location3\\nDB_USER=location_ro_user\\nDB_PASS=rtKiTGcG7E9WKI8CqqtQsDGBM\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nLOCATION_API_VERSION=v3.0\\nLOCATION_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nMODEL_TRACING_API_HOST=http://wrdsmodeltracingapi:4000\\nMODEL_TRACING_API_VERSION=uat\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_NWM_LOCATION_CROSSWALK_DATASET=2.1-corrected\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nLOCATION_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/location.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_location_api_v3.0:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.5g\\n    container_name: wrds_location_api_v3.0\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_location_api/location_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"4000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdslocationapiv3.0\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-location.yml\",\"permissions\":\"0777\"},{\"content\":\"### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\\nDB_NAME=rfcfcst\\nLOCATION_DB_NAME=wrds_location3\\nDB_USER=rfc_fcst_ro_user\\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nRFC_FORECAST_API_VERSION=v2.0\\nRFC_FORECAST_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nFORECAST_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/forecast-2.0.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_rfc_forecast_api_v2.0:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.0g\\n    container_name: wrds_rfc_forecast_api_v2.0\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"8000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdsrfcforecastapiv2.0\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-forecast-2.0.yml\",\"permissions\":\"0777\"},{\"content\":\"### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\\nDB_NAME=rfcfcst\\nLOCATION_DB_NAME=wrds_location3\\nDB_USER=rfc_fcst_ro_user\\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nRFC_FORECAST_API_VERSION=v1.1\\nRFC_FORECAST_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nLOCATION_API_HOST=http://wrdslocationapiv3:4000\\nLOCATION_API_VERSION=v3\\nLOCATION_API_STACK=uat\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nFORECAST_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/forecast-1.1.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_rfc_forecast_api_v1.1:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.0g\\n    container_name: wrds_rfc_forecast_api_v1.1\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"8000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdsrfcforecastapiv1.1\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-forecast-1.1.yml\",\"permissions\":\"0777\"}]}\n",
                "content_type": "text/cloud-config",
                "filename": "cloud-config.yaml",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_services\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Disabling Vlab Hostkey Requirement\"\n# Disable the need to require VLab's host key for the git clone commands\n# Couldn't seem to figure out how to properly add Vlab to the known_hosts file\nexport GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/ec2-user/.ssh/id_ed25519 -o IdentitiesOnly=yes\"\n\n\necho \"Installing System Dependencies\"\nsudo yum -y install git\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\necho \"Setting up WRDS File Structure\"\nsudo chmod 777 /wrds\ncd /wrds\n\necho \"Cloning WRDS Infrastructure\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-infrastructure\ncd wrds-infrastructure\ngit checkout 8f7131f9b70ff3f480f252c4bc911cb961ffa762\ngit pull\n\necho \"Building NGINX Docker\"\ncd nginx\nmv ../../docker-compose-infrastructure.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Location API\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-location-api\ncd wrds-location-api\ngit checkout ce1bfd821c335a69942519c5078a2929c4d397be\n\necho \"Building Location API Docker\"\ncd wrds-location-api\nmv ../../location.env env.aws\nmv ../../docker-compose-location.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V2.0\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api\ncd rfc-forecast-api\ngit checkout a598b16314daea5e1ea880af7eebe798d4fdc04f\n\necho \"Building Forecast API V2.0 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-2.0.env env.aws\nmv ../../docker-compose-forecast-2.0.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V1.1\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api rfc-forecast-api-1.1\ncd rfc-forecast-api-1.1\ngit checkout 19edf9cc9dbbd84e08f5a03622a2f97bfd67df4b\n\necho \"Building Forecast API V1.1 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-1.1.env env.aws\nmv ../../docker-compose-forecast-1.1.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Restarting NGINX Docker\"\nsudo docker restart wrds_infrastructure\n\necho \"Finished Setup\"",
                "content_type": "text/x-shellscript",
                "filename": "startup.sh",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"cloud-config.yaml\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\n{\"write_files\":[{\"content\":\"-----BEGIN OPENSSH PRIVATE KEY-----\\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\\nQyNTUxOQAAACCuSfpuEIxUW00QYRRbi9UDxPhg9qGMV3kgVuumB4rDFQAAAKCvoIHSr6CB\\n0gAAAAtzc2gtZWQyNTUxOQAAACCuSfpuEIxUW00QYRRbi9UDxPhg9qGMV3kgVuumB4rDFQ\\nAAAEAuLTSnhRk/7tqqFTrONBLjaP1YX0CAss6cUf0Y4SqtiK5J+m4QjFRbTRBhFFuL1QPE\\n+GD2oYxXeSBW66YHisMVAAAAFm5pY2suY2hhZHdpY2tAbm9hYS5nb3YBAgMEBQYH\\n-----END OPENSSH PRIVATE KEY-----\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/home/ec2-user/.ssh/id_ed25519\",\"permissions\":\"0400\"},{\"content\":\"version: \\\"3.5\\\"\\nservices:\\n  wrds_infrastructure:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n    container_name: wrds_infrastructure\\n    restart: always\\n    volumes:\\n      - wrds_apis:/var/www/\\n    networks:\\n      - wrds_nginx\\n    ports:\\n      - \\\"80:80\\\"\\n    environment:\\n      - ENV=aws\\n    external_links:\\n      - wrds_location_api_v3.0\\n      - wrds_rfc_forecast_api_v2.0\\n      - wrds_rfc_forecast_api_v1.1\\nvolumes:\\n  wrds_apis:\\n    name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-infrastructure.yml\",\"permissions\":\"0777\"},{\"content\":\"DB_NAME=wrds_location3\\nDB_USER=location_ro_user\\nDB_PASS=rtKiTGcG7E9WKI8CqqtQsDGBM\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nLOCATION_API_VERSION=v3.0\\nLOCATION_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nMODEL_TRACING_API_HOST=http://wrdsmodeltracingapi:4000\\nMODEL_TRACING_API_VERSION=uat\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_NWM_LOCATION_CROSSWALK_DATASET=2.1-corrected\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nLOCATION_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/location.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_location_api_v3.0:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.5g\\n    container_name: wrds_location_api_v3.0\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_location_api/location_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"4000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdslocationapiv3.0\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-location.yml\",\"permissions\":\"0777\"},{\"content\":\"### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\\nDB_NAME=rfcfcst\\nLOCATION_DB_NAME=wrds_location3\\nDB_USER=rfc_fcst_ro_user\\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nRFC_FORECAST_API_VERSION=v2.0\\nRFC_FORECAST_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nFORECAST_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/forecast-2.0.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_rfc_forecast_api_v2.0:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.0g\\n    container_name: wrds_rfc_forecast_api_v2.0\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"8000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdsrfcforecastapiv2.0\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-forecast-2.0.yml\",\"permissions\":\"0777\"},{\"content\":\"### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\\nDB_NAME=rfcfcst\\nLOCATION_DB_NAME=wrds_location3\\nDB_USER=rfc_fcst_ro_user\\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\\nDB_PORT=5432\\nENVIRONMENT=development\\nRFC_FORECAST_API_VERSION=v1.1\\nRFC_FORECAST_API_STACK=uat\\nALLOWED_GUNICORN_WORKERS=3\\nLOCATION_API_HOST=http://wrdslocationapiv3:4000\\nLOCATION_API_VERSION=v3\\nLOCATION_API_STACK=uat\\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\\n## Logging variables\\nFORECAST_LOGLEVEL=Debug\\nCONSOLE_LOG=True\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/forecast-1.1.env\",\"permissions\":\"0777\"},{\"content\":\"version: '3.5'\\nservices:\\n  wrds_rfc_forecast_api_v1.1:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.aws\\n      args:\\n        API_HOST: localhost\\n    cpus: \\\"4.0\\\"\\n    mem_limit: 4.0g\\n    container_name: wrds_rfc_forecast_api_v1.1\\n    restart: always\\n    entrypoint:\\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\\n    env_file: env.aws\\n    expose:\\n      - \\\"8000\\\"\\n    networks:\\n      wrds_nginx:\\n        aliases:\\n          - wrdsrfcforecastapiv1.1\\n    volumes:\\n      - type: volume\\n        source: wrds_apis\\n        target: /var/www/\\nvolumes:\\n  wrds_apis:\\n    external:\\n      name: wrds_apis\\nnetworks:\\n  wrds_nginx:\\n    external:\\n      name: wrds_nginx\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/wrds/docker-compose-forecast-1.1.yml\",\"permissions\":\"0777\"}]}\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"startup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_services\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Disabling Vlab Hostkey Requirement\"\n# Disable the need to require VLab's host key for the git clone commands\n# Couldn't seem to figure out how to properly add Vlab to the known_hosts file\nexport GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/ec2-user/.ssh/id_ed25519 -o IdentitiesOnly=yes\"\n\n\necho \"Installing System Dependencies\"\nsudo yum -y install git\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\necho \"Setting up WRDS File Structure\"\nsudo chmod 777 /wrds\ncd /wrds\n\necho \"Cloning WRDS Infrastructure\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-infrastructure\ncd wrds-infrastructure\ngit checkout 8f7131f9b70ff3f480f252c4bc911cb961ffa762\ngit pull\n\necho \"Building NGINX Docker\"\ncd nginx\nmv ../../docker-compose-infrastructure.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Location API\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-location-api\ncd wrds-location-api\ngit checkout ce1bfd821c335a69942519c5078a2929c4d397be\n\necho \"Building Location API Docker\"\ncd wrds-location-api\nmv ../../location.env env.aws\nmv ../../docker-compose-location.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V2.0\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api\ncd rfc-forecast-api\ngit checkout a598b16314daea5e1ea880af7eebe798d4fdc04f\n\necho \"Building Forecast API V2.0 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-2.0.env env.aws\nmv ../../docker-compose-forecast-2.0.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V1.1\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api rfc-forecast-api-1.1\ncd rfc-forecast-api-1.1\ngit checkout 19edf9cc9dbbd84e08f5a03622a2f97bfd67df4b\n\necho \"Building Forecast API V1.1 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-1.1.env env.aws\nmv ../../docker-compose-forecast-1.1.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Restarting NGINX Docker\"\nsudo docker restart wrds_infrastructure\n\necho \"Finished Setup\"\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "docker_compose_forecast_1_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d6e5b7f6409fe0d568dab1fe32512f6ad4c5799d1efeee53013539ea2f7f102b",
            "rendered": "version: '3.5'\nservices:\n  wrds_rfc_forecast_api_v1.1:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.0g\n    container_name: wrds_rfc_forecast_api_v1.1\n    restart: always\n    entrypoint:\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"8000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdsrfcforecastapiv1.1\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "template": "version: '3.5'\nservices:\n  wrds_rfc_forecast_api_v1.1:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.0g\n    container_name: wrds_rfc_forecast_api_v1.1\n    restart: always\n    entrypoint:\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"8000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdsrfcforecastapiv1.1\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "vars": {
              "environment": "uat"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "docker_compose_forecast_2_0",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "15d274018124f43f66a20a8c63be9b456f134f32d7c37f5efbb114791b078536",
            "rendered": "version: '3.5'\nservices:\n  wrds_rfc_forecast_api_v2.0:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.0g\n    container_name: wrds_rfc_forecast_api_v2.0\n    restart: always\n    entrypoint:\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"8000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdsrfcforecastapiv2.0\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "template": "version: '3.5'\nservices:\n  wrds_rfc_forecast_api_v2.0:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.0g\n    container_name: wrds_rfc_forecast_api_v2.0\n    restart: always\n    entrypoint:\n      - /opt/wrds_rfc_forecast_api/rfc_forecast_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"8000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdsrfcforecastapiv2.0\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "vars": {
              "environment": "uat"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "docker_compose_infrastructure",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "affe1767e046f1b91d91be7aed5b1329bc33c6814035b7565bdaac0cbee26fd1",
            "rendered": "version: \"3.5\"\nservices:\n  wrds_infrastructure:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n    container_name: wrds_infrastructure\n    restart: always\n    volumes:\n      - wrds_apis:/var/www/\n    networks:\n      - wrds_nginx\n    ports:\n      - \"80:80\"\n    environment:\n      - ENV=aws\n    external_links:\n      - wrds_location_api_v3.0\n      - wrds_rfc_forecast_api_v2.0\n      - wrds_rfc_forecast_api_v1.1\nvolumes:\n  wrds_apis:\n    name: wrds_apis\nnetworks:\n  wrds_nginx:\n    name: wrds_nginx",
            "template": "version: \"3.5\"\nservices:\n  wrds_infrastructure:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n    container_name: wrds_infrastructure\n    restart: always\n    volumes:\n      - wrds_apis:/var/www/\n    networks:\n      - wrds_nginx\n    ports:\n      - \"80:80\"\n    environment:\n      - ENV=aws\n    external_links:\n      - wrds_location_api_v3.0\n      - wrds_rfc_forecast_api_v2.0\n      - wrds_rfc_forecast_api_v1.1\nvolumes:\n  wrds_apis:\n    name: wrds_apis\nnetworks:\n  wrds_nginx:\n    name: wrds_nginx",
            "vars": {
              "environment": "uat"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "docker_compose_location",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "6c308b00aab17c2779b190233235fbd7a948999c6ecb5b4e600d9bcc96bccfdf",
            "rendered": "version: '3.5'\nservices:\n  wrds_location_api_v3.0:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.5g\n    container_name: wrds_location_api_v3.0\n    restart: always\n    entrypoint:\n      - /opt/wrds_location_api/location_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"4000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdslocationapiv3.0\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "template": "version: '3.5'\nservices:\n  wrds_location_api_v3.0:\n    build:\n      context: .\n      dockerfile: Dockerfile.aws\n      args:\n        API_HOST: localhost\n    cpus: \"4.0\"\n    mem_limit: 4.5g\n    container_name: wrds_location_api_v3.0\n    restart: always\n    entrypoint:\n      - /opt/wrds_location_api/location_api/entrypoint.sh\n    env_file: env.aws\n    expose:\n      - \"4000\"\n    networks:\n      wrds_nginx:\n        aliases:\n          - wrdslocationapiv3.0\n    volumes:\n      - type: volume\n        source: wrds_apis\n        target: /var/www/\nvolumes:\n  wrds_apis:\n    external:\n      name: wrds_apis\nnetworks:\n  wrds_nginx:\n    external:\n      name: wrds_nginx",
            "vars": {
              "environment": "uat"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "forecast_1_1_env",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "6eb794cade8012baedb0f2a9c53bf33940d388aa7e4f46d0931fa4c14d18d7c8",
            "rendered": "### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\nDB_NAME=rfcfcst\nLOCATION_DB_NAME=wrds_location3\nDB_USER=rfc_fcst_ro_user\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\nDB_PORT=5432\nENVIRONMENT=development\nRFC_FORECAST_API_VERSION=v1.1\nRFC_FORECAST_API_STACK=uat\nALLOWED_GUNICORN_WORKERS=3\nLOCATION_API_HOST=http://wrdslocationapiv3:4000\nLOCATION_API_VERSION=v3\nLOCATION_API_STACK=uat\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nFORECAST_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "template": "### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\nDB_NAME=${db_name}\nLOCATION_DB_NAME=${location_db_name}\nDB_USER=${db_username}\nDB_PASS=${db_password}\nDB_HOST=${db_host}\nDB_PORT=${db_port}\nENVIRONMENT=development\nRFC_FORECAST_API_VERSION=v1.1\nRFC_FORECAST_API_STACK=${environment}\nALLOWED_GUNICORN_WORKERS=3\nLOCATION_API_HOST=http://wrdslocationapiv3:4000\nLOCATION_API_VERSION=v3\nLOCATION_API_STACK=${environment}\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nFORECAST_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "vars": {
              "db_host": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
              "db_name": "rfcfcst",
              "db_password": "JdjES1KtMwGvr3UVkYwgawGvi",
              "db_port": "5432",
              "db_username": "rfc_fcst_ro_user",
              "environment": "uat",
              "location_db_name": "wrds_location3"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_password",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_username",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "forecast_2_0_env",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "786d0f8a140b63eb50bfb42a10710eab0871dbd69640948ee376e440ac4ac628",
            "rendered": "### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\nDB_NAME=rfcfcst\nLOCATION_DB_NAME=wrds_location3\nDB_USER=rfc_fcst_ro_user\nDB_PASS=JdjES1KtMwGvr3UVkYwgawGvi\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\nDB_PORT=5432\nENVIRONMENT=development\nRFC_FORECAST_API_VERSION=v2.0\nRFC_FORECAST_API_STACK=uat\nALLOWED_GUNICORN_WORKERS=3\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nFORECAST_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "template": "### THIS IS A TEMPLATE ONLY, PLEASE COPY AND PASTE FOR EACH ENVIRONMENT LIKE env.dev, env.stage, env.prod\nDB_NAME=${db_name}\nLOCATION_DB_NAME=${location_db_name}\nDB_USER=${db_username}\nDB_PASS=${db_password}\nDB_HOST=${db_host}\nDB_PORT=${db_port}\nENVIRONMENT=development\nRFC_FORECAST_API_VERSION=v2.0\nRFC_FORECAST_API_STACK=${environment}\nALLOWED_GUNICORN_WORKERS=3\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nFORECAST_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "vars": {
              "db_host": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
              "db_name": "rfcfcst",
              "db_password": "JdjES1KtMwGvr3UVkYwgawGvi",
              "db_port": "5432",
              "db_username": "rfc_fcst_ro_user",
              "environment": "uat",
              "location_db_name": "wrds_location3"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_password",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_username",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "location_env",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "e5f33a826cef18aa0e46cc7c83636fa382cc1f695ba10a9c695dba7ae71530a2",
            "rendered": "DB_NAME=wrds_location3\nDB_USER=location_ro_user\nDB_PASS=rtKiTGcG7E9WKI8CqqtQsDGBM\nDB_HOST=hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\nDB_PORT=5432\nENVIRONMENT=development\nLOCATION_API_VERSION=v3.0\nLOCATION_API_STACK=uat\nALLOWED_GUNICORN_WORKERS=3\nMODEL_TRACING_API_HOST=http://wrdsmodeltracingapi:4000\nMODEL_TRACING_API_VERSION=uat\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_NWM_LOCATION_CROSSWALK_DATASET=2.1-corrected\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nLOCATION_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "template": "DB_NAME=${db_name}\nDB_USER=${db_username}\nDB_PASS=${db_password}\nDB_HOST=${db_host}\nDB_PORT=${db_port}\nENVIRONMENT=development\nLOCATION_API_VERSION=v3.0\nLOCATION_API_STACK=${environment}\nALLOWED_GUNICORN_WORKERS=3\nMODEL_TRACING_API_HOST=http://wrdsmodeltracingapi:4000\nMODEL_TRACING_API_VERSION=${environment}\nDEFAULT_NWS_USGS_CROSSWALK_DATASET=1.0\nDEFAULT_NWM_LOCATION_CROSSWALK_DATASET=2.1-corrected\nDEFAULT_LOCATION_NWM_CROSSWALK_DATASET=1.1\n## Logging variables\nLOCATION_LOGLEVEL=Debug\nCONSOLE_LOG=True",
            "vars": {
              "db_host": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
              "db_name": "wrds_location3",
              "db_password": "rtKiTGcG7E9WKI8CqqtQsDGBM",
              "db_port": "5432",
              "db_username": "location_ro_user",
              "environment": "uat"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_password",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "db_username",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "data",
      "type": "template_file",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "629721e07f82fe53a5e08eaafc46483e68b023f3572145fc6610591e76cd4f75",
            "rendered": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_services\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Disabling Vlab Hostkey Requirement\"\n# Disable the need to require VLab's host key for the git clone commands\n# Couldn't seem to figure out how to properly add Vlab to the known_hosts file\nexport GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/ec2-user/.ssh/id_ed25519 -o IdentitiesOnly=yes\"\n\n\necho \"Installing System Dependencies\"\nsudo yum -y install git\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\necho \"Setting up WRDS File Structure\"\nsudo chmod 777 /wrds\ncd /wrds\n\necho \"Cloning WRDS Infrastructure\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-infrastructure\ncd wrds-infrastructure\ngit checkout 8f7131f9b70ff3f480f252c4bc911cb961ffa762\ngit pull\n\necho \"Building NGINX Docker\"\ncd nginx\nmv ../../docker-compose-infrastructure.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Location API\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/wrds-location-api\ncd wrds-location-api\ngit checkout ce1bfd821c335a69942519c5078a2929c4d397be\n\necho \"Building Location API Docker\"\ncd wrds-location-api\nmv ../../location.env env.aws\nmv ../../docker-compose-location.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V2.0\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api\ncd rfc-forecast-api\ngit checkout a598b16314daea5e1ea880af7eebe798d4fdc04f\n\necho \"Building Forecast API V2.0 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-2.0.env env.aws\nmv ../../docker-compose-forecast-2.0.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V1.1\"\ngit clone ssh://nick.chadwick@vlab.noaa.gov:29418/rfc-forecast-api rfc-forecast-api-1.1\ncd rfc-forecast-api-1.1\ngit checkout 19edf9cc9dbbd84e08f5a03622a2f97bfd67df4b\n\necho \"Building Forecast API V1.1 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-1.1.env env.aws\nmv ../../docker-compose-forecast-1.1.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Restarting NGINX Docker\"\nsudo docker restart wrds_infrastructure\n\necho \"Finished Setup\"",
            "template": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\n# Used for Rsyslog to send relevant logs to Logstash\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=${logstash_ip}\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=data_services\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\necho \"Disabling Vlab Hostkey Requirement\"\n# Disable the need to require VLab's host key for the git clone commands\n# Couldn't seem to figure out how to properly add Vlab to the known_hosts file\nexport GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/ec2-user/.ssh/${ssh_key_filename} -o IdentitiesOnly=yes\"\n\n\necho \"Installing System Dependencies\"\nsudo yum -y install git\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\necho \"Setting up WRDS File Structure\"\nsudo chmod 777 /wrds\ncd /wrds\n\necho \"Cloning WRDS Infrastructure\"\ngit clone ${vlab_repo_prefix}/wrds-infrastructure\ncd wrds-infrastructure\ngit checkout ${infrastructure_commit}\ngit pull\n\necho \"Building NGINX Docker\"\ncd nginx\nmv ../../docker-compose-infrastructure.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Location API\"\ngit clone ${vlab_repo_prefix}/wrds-location-api\ncd wrds-location-api\ngit checkout ${location_api_3_0_commit}\n\necho \"Building Location API Docker\"\ncd wrds-location-api\nmv ../../location.env env.aws\nmv ../../docker-compose-location.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V2.0\"\ngit clone ${vlab_repo_prefix}/rfc-forecast-api\ncd rfc-forecast-api\ngit checkout ${forecast_api_2_0_commit}\n\necho \"Building Forecast API V2.0 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-2.0.env env.aws\nmv ../../docker-compose-forecast-2.0.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Cloning Forecast API V1.1\"\ngit clone ${vlab_repo_prefix}/rfc-forecast-api rfc-forecast-api-1.1\ncd rfc-forecast-api-1.1\ngit checkout ${forecast_api_1_1_commit}\n\necho \"Building Forecast API V1.1 Docker\"\ncd wrds-rfc-forecast-api\nmv ../../forecast-1.1.env env.aws\nmv ../../docker-compose-forecast-1.1.yml docker-compose.yml\nsudo docker-compose up --build -d\ncd ../..\n\necho \"Restarting NGINX Docker\"\nsudo docker restart wrds_infrastructure\n\necho \"Finished Setup\"",
            "vars": {
              "forecast_api_1_1_commit": "19edf9cc9dbbd84e08f5a03622a2f97bfd67df4b",
              "forecast_api_2_0_commit": "a598b16314daea5e1ea880af7eebe798d4fdc04f",
              "infrastructure_commit": "8f7131f9b70ff3f480f252c4bc911cb961ffa762",
              "location_api_3_0_commit": "ce1bfd821c335a69942519c5078a2929c4d397be",
              "logstash_ip": "10.27.2.20",
              "ssh_key_filename": "id_ed25519",
              "vlab_repo_prefix": "ssh://nick.chadwick@vlab.noaa.gov:29418"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.data-services",
      "mode": "managed",
      "type": "aws_instance",
      "name": "data_services",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-025b76b777024295e",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-0bada6e1a6a3c7305",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisSSMInstanceProfileRole",
            "id": "i-0bada6e1a6a3c7305",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "c5.xlarge",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-01ad5ba74080d2cfc",
            "private_dns": "ip-10-27-2-90.ec2.internal",
            "private_ip": "10.27.2.90",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0f164c0e2bc54cfd7",
                "volume_size": 12,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-04914abb2085ae5dd",
            "tags": {
              "Name": "hv-uat-useast1a-data-services",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-useast1a-data-services",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "a847cece934abb13cb589a1e0c05f27fb1d0fb1d",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01a5ed608003e9f20",
              "sg-05068fed65f00bff2",
              "sg-0e1ceb05bcc5bf0af"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.monitoring.aws_cloudwatch_log_group.es_loggroup",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.data-services.data.template_file.docker_compose_infrastructure",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_instance_profile.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.monitoring.data.aws_ami.linux",
            "module.monitoring.data.cloudinit_config.startup",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.monitoring.data.template_file.parser_templates",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.data-services.data.cloudinit_config.startup",
            "module.data-services.data.template_file.forecast_1_1_env",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.monitoring.aws_instance.logstash",
            "module.monitoring.data.template_file.startup",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.data-services.data.aws_ami.linux",
            "module.data-services.data.template_file.location_env",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_vpc.main",
            "module.monitoring.aws_elasticsearch_domain.es",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.data-services.data.template_file.docker_compose_forecast_1_1",
            "module.data-services.data.template_file.docker_compose_forecast_2_0",
            "module.data-services.data.template_file.forecast_2_0_env",
            "module.data-services.data.template_file.startup",
            "module.data-services.data.template_file.docker_compose_location",
            "module.monitoring.aws_iam_service_linked_role.es",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gis-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-gis-server-cache-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-gis-server-cache-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-gis-server-cache-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/134f8c0f-801e-4dd7-a1a0-97aeecde0d9b",
            "target_key_id": "134f8c0f-801e-4dd7-a1a0-97aeecde0d9b"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gis-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/134f8c0f-801e-4dd7-a1a0-97aeecde0d9b",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-gis-server-cache bucket encryption",
            "enable_key_rotation": true,
            "id": "134f8c0f-801e-4dd7-a1a0-97aeecde0d9b",
            "is_enabled": true,
            "key_id": "134f8c0f-801e-4dd7-a1a0-97aeecde0d9b",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gis-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache",
            "bucket": "hydrovis-uat-egis-us-east-1-gis-server-cache",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-gis-server-cache.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-gis-server-cache.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-gis-server-cache",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/134f8c0f-801e-4dd7-a1a0-97aeecde0d9b",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gis-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-gis-server-cache",
            "id": "hydrovis-uat-egis-us-east-1-gis-server-cache",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gp-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-gp-server-cache-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-gp-server-cache-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-gp-server-cache-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/8eed4875-ad27-48dc-8a61-a8960f57fc45",
            "target_key_id": "8eed4875-ad27-48dc-8a61-a8960f57fc45"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gp-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/8eed4875-ad27-48dc-8a61-a8960f57fc45",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-gp-server-cache bucket encryption",
            "enable_key_rotation": true,
            "id": "8eed4875-ad27-48dc-8a61-a8960f57fc45",
            "is_enabled": true,
            "key_id": "8eed4875-ad27-48dc-8a61-a8960f57fc45",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gp-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache",
            "bucket": "hydrovis-uat-egis-us-east-1-gp-server-cache",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-gp-server-cache.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-gp-server-cache.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-gp-server-cache",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/8eed4875-ad27-48dc-8a61-a8960f57fc45",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"gp-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-gp-server-cache",
            "id": "hydrovis-uat-egis-us-east-1-gp-server-cache",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"img-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-img-server-cache-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-img-server-cache-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-img-server-cache-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/dfb321dc-13cc-4646-b348-db0ce048b9bb",
            "target_key_id": "dfb321dc-13cc-4646-b348-db0ce048b9bb"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"img-server-cache\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/dfb321dc-13cc-4646-b348-db0ce048b9bb",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-img-server-cache bucket encryption",
            "enable_key_rotation": true,
            "id": "dfb321dc-13cc-4646-b348-db0ce048b9bb",
            "is_enabled": true,
            "key_id": "dfb321dc-13cc-4646-b348-db0ce048b9bb",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"img-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache",
            "bucket": "hydrovis-uat-egis-us-east-1-img-server-cache",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-img-server-cache.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-img-server-cache.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-img-server-cache",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/dfb321dc-13cc-4646-b348-db0ce048b9bb",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"img-server-cache\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-img-server-cache",
            "id": "hydrovis-uat-egis-us-east-1-img-server-cache",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"none\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/b644725c-d942-4646-9d9f-b85172525fc3",
            "target_key_id": "b644725c-d942-4646-9d9f-b85172525fc3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"none\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/b644725c-d942-4646-9d9f-b85172525fc3",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "b644725c-d942-4646-9d9f-b85172525fc3",
            "is_enabled": true,
            "key_id": "b644725c-d942-4646-9d9f-b85172525fc3",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"none\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1",
            "bucket": "hydrovis-uat-egis-us-east-1",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/b644725c-d942-4646-9d9f-b85172525fc3",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"none\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1",
            "id": "hydrovis-uat-egis-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"prv-alb-logging\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-prv-alb-logging-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-prv-alb-logging-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-prv-alb-logging-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/72fe916b-7171-4411-aeb4-878d3cb6ec02",
            "target_key_id": "72fe916b-7171-4411-aeb4-878d3cb6ec02"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"prv-alb-logging\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/72fe916b-7171-4411-aeb4-878d3cb6ec02",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-prv-alb-logging bucket encryption",
            "enable_key_rotation": true,
            "id": "72fe916b-7171-4411-aeb4-878d3cb6ec02",
            "is_enabled": true,
            "key_id": "72fe916b-7171-4411-aeb4-878d3cb6ec02",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"prv-alb-logging\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-prv-alb-logging",
            "bucket": "hydrovis-uat-egis-us-east-1-prv-alb-logging",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-prv-alb-logging.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-prv-alb-logging.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-prv-alb-logging",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/72fe916b-7171-4411-aeb4-878d3cb6ec02",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"prv-alb-logging\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-prv-alb-logging",
            "id": "hydrovis-uat-egis-us-east-1-prv-alb-logging",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-prv-alb-logging/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-prv-alb-logging/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-prv-alb-logging\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"ptl-content\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-ptl-content-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-ptl-content-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-ptl-content-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/5083c97a-99e6-471c-a78d-8b701547aef3",
            "target_key_id": "5083c97a-99e6-471c-a78d-8b701547aef3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"ptl-content\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/5083c97a-99e6-471c-a78d-8b701547aef3",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-ptl-content bucket encryption",
            "enable_key_rotation": true,
            "id": "5083c97a-99e6-471c-a78d-8b701547aef3",
            "is_enabled": true,
            "key_id": "5083c97a-99e6-471c-a78d-8b701547aef3",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"ptl-content\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content",
            "bucket": "hydrovis-uat-egis-us-east-1-ptl-content",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-ptl-content.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-ptl-content.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-ptl-content",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/5083c97a-99e6-471c-a78d-8b701547aef3",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"ptl-content\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-ptl-content",
            "id": "hydrovis-uat-egis-us-east-1-ptl-content",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"pub-alb-logging\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-pub-alb-logging-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-pub-alb-logging-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-pub-alb-logging-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/1bdb6f12-55d1-4579-bffc-178854b7c7cb",
            "target_key_id": "1bdb6f12-55d1-4579-bffc-178854b7c7cb"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"pub-alb-logging\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/1bdb6f12-55d1-4579-bffc-178854b7c7cb",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-pub-alb-logging bucket encryption",
            "enable_key_rotation": true,
            "id": "1bdb6f12-55d1-4579-bffc-178854b7c7cb",
            "is_enabled": true,
            "key_id": "1bdb6f12-55d1-4579-bffc-178854b7c7cb",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"pub-alb-logging\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-pub-alb-logging",
            "bucket": "hydrovis-uat-egis-us-east-1-pub-alb-logging",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-pub-alb-logging.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-pub-alb-logging.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-pub-alb-logging",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/1bdb6f12-55d1-4579-bffc-178854b7c7cb",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"pub-alb-logging\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-pub-alb-logging",
            "id": "hydrovis-uat-egis-us-east-1-pub-alb-logging",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-pub-alb-logging/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-pub-alb-logging/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-pub-alb-logging\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"webgisdr\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1-webgisdr-s3",
            "id": "alias/hydrovis-uat-egis-us-east-1-webgisdr-s3",
            "name": "alias/hydrovis-uat-egis-us-east-1-webgisdr-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/7c95222e-5cf3-424e-8167-684002e0c974",
            "target_key_id": "7c95222e-5cf3-424e-8167-684002e0c974"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"webgisdr\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/7c95222e-5cf3-424e-8167-684002e0c974",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-egis-us-east-1-webgisdr bucket encryption",
            "enable_key_rotation": true,
            "id": "7c95222e-5cf3-424e-8167-684002e0c974",
            "is_enabled": true,
            "key_id": "7c95222e-5cf3-424e-8167-684002e0c974",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"webgisdr\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-egis-us-east-1-webgisdr",
            "bucket": "hydrovis-uat-egis-us-east-1-webgisdr",
            "bucket_domain_name": "hydrovis-uat-egis-us-east-1-webgisdr.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-egis-us-east-1-webgisdr.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-egis-us-east-1-webgisdr",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/7c95222e-5cf3-424e-8167-684002e0c974",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis.module.bucket[\"webgisdr\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-egis-us-east-1-webgisdr",
            "id": "hydrovis-uat-egis-us-east-1-webgisdr",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-webgisdr/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-webgisdr/*\",\"arn:aws:s3:::hydrovis-uat-egis-us-east-1-webgisdr\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.egis.module.bucket.aws_kms_key.hydrovis-s3",
            "module.egis.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.egis_license_manager",
      "mode": "data",
      "type": "aws_ami",
      "name": "windows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0b266e75d54048c9f",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-04a06950e6c42a4b1",
                  "throughput": "0",
                  "volume_size": "150",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-12-06T21:39:40.000Z",
            "description": "STIG image no encryption for sharing between accounts",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-win2019-STIG*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0b266e75d54048c9f",
            "image_id": "ami-0b266e75d54048c9f",
            "image_location": "526904826677/hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-04a06950e6c42a4b1",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_license_manager",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "licensemanager",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "gzip": false,
            "id": "3264590882",
            "part": [
              {
                "content": "\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"LicenseManager\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/LMDeploy.zip' -LocalFile 'C:\\LicenseManager\\LMDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/vc_redist.x86.exe' -LocalFile 'C:\\LicenseManager\\vc_redist.x86.exe'\nNew-NetFirewallRule -DisplayName 'ArcGIS License Manager' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 27000-27010, 1066\ncd C:\\LicenseManager\nExpand-Archive -Path \"C:\\LicenseManager\\LMDeploy.zip\"  -DestinationPath \"C:\\LicenseManager\"\nInstall-Module -Name ArcGIS -Force\nStart-Sleep 180\ncd C:\\LicenseManager\n$privateIPAddress = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/local-ipv4 -UseBasicParsing).Content\n(Get-Content -path C:\\LicenseManager\\LicenseManager_config.json -Raw) -replace 'localhost', $privateIPAddress | Set-Content -Path C:\\LicenseManager\\LicenseManager_configip.json\nStart-Process -FilePath “vcredist_x86.exe” -ArgumentList “/Q” -Wait\ncd C:\\LicenseManager\nstart-process \"cmd.exe\" \"/c C:\\LicenseManager\\setupLM.bat\"\nStart-Sleep 300\nInvoke-ArcGISConfiguration -ConfigurationParametersFile C:\\LicenseManager\\LicenseManager_configip.json -Mode InstallLicense\ncd \"C:\\Program Files (x86)\\Commen Files\\ArcGIS\\LicenseManager\\bin\"\nsoftwareauthorizationls.exe -s ver 10.8 -lif \"C:\\LicenseManager\\ArcGISProAdvanced_ConcurrentUse_1055467.prvs\"\n\n##############################################################################################\n#\tTHIS SECTION CAN BE ENABLED IF AN ADDIITONAL DRIVE IS REQUIRED\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n#  Initialize-Disk -Number 1 -PartitionStyle MBR \t\t\t\t\t\t#\n#  New-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\t\t\t#\n#  Format-Volume -DriveLetter D -FileSystem NTFS\t\t\t\t\t\t#\t\n#  New-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\t\t\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n##############################################################################################\n\n\u003c/powershell\u003e\n",
                "content_type": "text/x-shellscript",
                "filename": "ArcGIS_LM_Setup.ps1",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"ArcGIS_LM_Setup.ps1\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"LicenseManager\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/LMDeploy.zip' -LocalFile 'C:\\LicenseManager\\LMDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/vc_redist.x86.exe' -LocalFile 'C:\\LicenseManager\\vc_redist.x86.exe'\nNew-NetFirewallRule -DisplayName 'ArcGIS License Manager' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 27000-27010, 1066\ncd C:\\LicenseManager\nExpand-Archive -Path \"C:\\LicenseManager\\LMDeploy.zip\"  -DestinationPath \"C:\\LicenseManager\"\nInstall-Module -Name ArcGIS -Force\nStart-Sleep 180\ncd C:\\LicenseManager\n$privateIPAddress = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/local-ipv4 -UseBasicParsing).Content\n(Get-Content -path C:\\LicenseManager\\LicenseManager_config.json -Raw) -replace 'localhost', $privateIPAddress | Set-Content -Path C:\\LicenseManager\\LicenseManager_configip.json\nStart-Process -FilePath “vcredist_x86.exe” -ArgumentList “/Q” -Wait\ncd C:\\LicenseManager\nstart-process \"cmd.exe\" \"/c C:\\LicenseManager\\setupLM.bat\"\nStart-Sleep 300\nInvoke-ArcGISConfiguration -ConfigurationParametersFile C:\\LicenseManager\\LicenseManager_configip.json -Mode InstallLicense\ncd \"C:\\Program Files (x86)\\Commen Files\\ArcGIS\\LicenseManager\\bin\"\nsoftwareauthorizationls.exe -s ver 10.8 -lif \"C:\\LicenseManager\\ArcGISProAdvanced_ConcurrentUse_1055467.prvs\"\n\n##############################################################################################\n#\tTHIS SECTION CAN BE ENABLED IF AN ADDIITONAL DRIVE IS REQUIRED\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n#  Initialize-Disk -Number 1 -PartitionStyle MBR \t\t\t\t\t\t#\n#  New-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\t\t\t#\n#  Format-Volume -DriveLetter D -FileSystem NTFS\t\t\t\t\t\t#\t\n#  New-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\t\t\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n##############################################################################################\n\n\u003c/powershell\u003e\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_license_manager",
      "mode": "data",
      "type": "template_file",
      "name": "licensemanager",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "af00ff401e24cd87159297fd482b7f71bfa239007740679b784bed5dcf0301e8",
            "rendered": "\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"LicenseManager\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/LMDeploy.zip' -LocalFile 'C:\\LicenseManager\\LMDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/LicenseManager/vc_redist.x86.exe' -LocalFile 'C:\\LicenseManager\\vc_redist.x86.exe'\nNew-NetFirewallRule -DisplayName 'ArcGIS License Manager' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 27000-27010, 1066\ncd C:\\LicenseManager\nExpand-Archive -Path \"C:\\LicenseManager\\LMDeploy.zip\"  -DestinationPath \"C:\\LicenseManager\"\nInstall-Module -Name ArcGIS -Force\nStart-Sleep 180\ncd C:\\LicenseManager\n$privateIPAddress = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/local-ipv4 -UseBasicParsing).Content\n(Get-Content -path C:\\LicenseManager\\LicenseManager_config.json -Raw) -replace 'localhost', $privateIPAddress | Set-Content -Path C:\\LicenseManager\\LicenseManager_configip.json\nStart-Process -FilePath “vcredist_x86.exe” -ArgumentList “/Q” -Wait\ncd C:\\LicenseManager\nstart-process \"cmd.exe\" \"/c C:\\LicenseManager\\setupLM.bat\"\nStart-Sleep 300\nInvoke-ArcGISConfiguration -ConfigurationParametersFile C:\\LicenseManager\\LicenseManager_configip.json -Mode InstallLicense\ncd \"C:\\Program Files (x86)\\Commen Files\\ArcGIS\\LicenseManager\\bin\"\nsoftwareauthorizationls.exe -s ver 10.8 -lif \"C:\\LicenseManager\\ArcGISProAdvanced_ConcurrentUse_1055467.prvs\"\n\n##############################################################################################\n#\tTHIS SECTION CAN BE ENABLED IF AN ADDIITONAL DRIVE IS REQUIRED\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n#  Initialize-Disk -Number 1 -PartitionStyle MBR \t\t\t\t\t\t#\n#  New-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\t\t\t#\n#  Format-Volume -DriveLetter D -FileSystem NTFS\t\t\t\t\t\t#\t\n#  New-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\t\t\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n##############################################################################################\n\n\u003c/powershell\u003e\n",
            "template": "﻿\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"LicenseManager\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -Key 'software/LicenseManager/LMDeploy.zip' -LocalFile 'C:\\LicenseManager\\LMDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -Key 'software/LicenseManager/vc_redist.x86.exe' -LocalFile 'C:\\LicenseManager\\vc_redist.x86.exe'\nNew-NetFirewallRule -DisplayName 'ArcGIS License Manager' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 27000-27010, 1066\ncd C:\\LicenseManager\nExpand-Archive -Path \"C:\\LicenseManager\\LMDeploy.zip\"  -DestinationPath \"C:\\LicenseManager\"\nInstall-Module -Name ArcGIS -Force\nStart-Sleep 180\ncd C:\\LicenseManager\n$privateIPAddress = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/local-ipv4 -UseBasicParsing).Content\n(Get-Content -path C:\\LicenseManager\\LicenseManager_config.json -Raw) -replace 'localhost', $privateIPAddress | Set-Content -Path C:\\LicenseManager\\LicenseManager_configip.json\nStart-Process -FilePath “vcredist_x86.exe” -ArgumentList “/Q” -Wait\ncd C:\\LicenseManager\nstart-process \"cmd.exe\" \"/c C:\\LicenseManager\\setupLM.bat\"\nStart-Sleep 300\nInvoke-ArcGISConfiguration -ConfigurationParametersFile C:\\LicenseManager\\LicenseManager_configip.json -Mode InstallLicense\ncd \"C:\\Program Files (x86)\\Commen Files\\ArcGIS\\LicenseManager\\bin\"\nsoftwareauthorizationls.exe -s ver 10.8 -lif \"C:\\LicenseManager\\ArcGISProAdvanced_ConcurrentUse_1055467.prvs\"\n\n##############################################################################################\n#\tTHIS SECTION CAN BE ENABLED IF AN ADDIITONAL DRIVE IS REQUIRED\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n#  Initialize-Disk -Number 1 -PartitionStyle MBR \t\t\t\t\t\t#\n#  New-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\t\t\t#\n#  Format-Volume -DriveLetter D -FileSystem NTFS\t\t\t\t\t\t#\t\n#  New-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\t\t\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n##############################################################################################\n\n\u003c/powershell\u003e\n",
            "vars": {
              "environment": "uat",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_license_manager",
      "mode": "managed",
      "type": "aws_instance",
      "name": "license_manager",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0b266e75d54048c9f",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-0432cf5da4c8d28be",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisESRISSMDeploy",
            "id": "i-0432cf5da4c8d28be",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "m5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "hv-uat-ec2-key-pair",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-03555160442721063",
            "private_dns": "ip-10-27-2-156.ec2.internal",
            "private_ip": "10.27.2.156",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 600,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-07cdb76037e556db8",
                "volume_size": 200,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0d6d51d00f4367af4",
            "tags": {
              "Name": "hv-uat-egis-ArcGIS-LicenseManager",
              "OS": "Windows",
              "Patch Group": "ESRI Server 1"
            },
            "tags_all": {
              "Name": "hv-uat-egis-ArcGIS-LicenseManager",
              "OS": "Windows",
              "Patch Group": "ESRI Server 1",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "02c849f636dd04cea7958c1ffe5c484875649d31",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-013db899dbaeea4ce",
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.vpc.aws_subnet.hydrovis-sn-prv-web1a",
            "module.egis_license_manager.data.template_file.licensemanager",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.egis_license_manager.data.template_cloudinit_config.licensemanager",
            "module.iam-roles.aws_iam_instance_profile.HydrovisESRISSMDeploy",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.security-groups.aws_security_group.egis-overlord",
            "module.egis_license_manager.data.aws_ami.windows",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.egis_monitor",
      "mode": "data",
      "type": "aws_ami",
      "name": "windows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0b266e75d54048c9f",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-04a06950e6c42a4b1",
                  "throughput": "0",
                  "volume_size": "150",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-12-06T21:39:40.000Z",
            "description": "STIG image no encryption for sharing between accounts",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-win2019-STIG*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0b266e75d54048c9f",
            "image_id": "ami-0b266e75d54048c9f",
            "image_location": "526904826677/hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-04a06950e6c42a4b1",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_monitor",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "arcgismonitor",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "gzip": false,
            "id": "3665893286",
            "part": [
              {
                "content": "\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"Monitor\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'installs/software/licenses/10_8_1/ArcGISMonitor_ArcGISServer_1028623.prvc' -LocalFile 'C:\\Monitor\\ArcGISMonitor_ArcGISServer_1028623.prvc'\ncd C:\\Monitor\nExpand-Archive -Path \"C:\\Monitor\\MonitorDeploy.zip\"  -DestinationPath \"C:\\Monitor\"\nInitialize-Disk -Number 1 -PartitionStyle MBR \nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS\nNew-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\n#Copy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\n#Read-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -KeyPrefix 'software/Monitor' -Folder \"C:\\Monitor\" \nstart-process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor.bat\"\nStart-Sleep 1200\nStart-Process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor2.bat\"\n\u003c/powershell\u003e\n",
                "content_type": "text/x-shellscript",
                "filename": "ArcGIS_LM_Setup.ps1",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"ArcGIS_LM_Setup.ps1\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"Monitor\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'installs/software/licenses/10_8_1/ArcGISMonitor_ArcGISServer_1028623.prvc' -LocalFile 'C:\\Monitor\\ArcGISMonitor_ArcGISServer_1028623.prvc'\ncd C:\\Monitor\nExpand-Archive -Path \"C:\\Monitor\\MonitorDeploy.zip\"  -DestinationPath \"C:\\Monitor\"\nInitialize-Disk -Number 1 -PartitionStyle MBR \nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS\nNew-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\n#Copy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\n#Read-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -KeyPrefix 'software/Monitor' -Folder \"C:\\Monitor\" \nstart-process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor.bat\"\nStart-Sleep 1200\nStart-Process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor2.bat\"\n\u003c/powershell\u003e\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_monitor",
      "mode": "data",
      "type": "template_file",
      "name": "arcgismonitor",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "4ce1279799d53817da2b39b90ed8f92cf4f57a79693ced4c408afcf36496d00f",
            "rendered": "\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"Monitor\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'installs/software/licenses/10_8_1/ArcGISMonitor_ArcGISServer_1028623.prvc' -LocalFile 'C:\\Monitor\\ArcGISMonitor_ArcGISServer_1028623.prvc'\ncd C:\\Monitor\nExpand-Archive -Path \"C:\\Monitor\\MonitorDeploy.zip\"  -DestinationPath \"C:\\Monitor\"\nInitialize-Disk -Number 1 -PartitionStyle MBR \nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS\nNew-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\n#Copy-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\n#Read-S3Object -Bucket 'hydrovis-uat-egis-us-east-1' -KeyPrefix 'software/Monitor' -Folder \"C:\\Monitor\" \nstart-process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor.bat\"\nStart-Sleep 1200\nStart-Process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor2.bat\"\n\u003c/powershell\u003e\n",
            "template": "﻿\u003cpowershell\u003e\nNew-Item -Path \"C:\\\" -Name \"Monitor\" -ItemType \"directory\"\nCopy-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\nCopy-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -Key 'installs/software/licenses/10_8_1/ArcGISMonitor_ArcGISServer_1028623.prvc' -LocalFile 'C:\\Monitor\\ArcGISMonitor_ArcGISServer_1028623.prvc'\ncd C:\\Monitor\nExpand-Archive -Path \"C:\\Monitor\\MonitorDeploy.zip\"  -DestinationPath \"C:\\Monitor\"\nInitialize-Disk -Number 1 -PartitionStyle MBR \nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS\nNew-Item -Path \"D:\\\" -Name \"Temp\" -ItemType \"directory\"\n#Copy-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -Key 'software/Monitor/MonitorDeploy.zip' -LocalFile 'C:\\Monitor\\MonitorDeploy.zip'\n#Read-S3Object -Bucket 'hydrovis-${environment}-egis-${region}' -KeyPrefix 'software/Monitor' -Folder \"C:\\Monitor\" \nstart-process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor.bat\"\nStart-Sleep 1200\nStart-Process \"cmd.exe\" \"/c C:\\Monitor\\setupMonitor2.bat\"\n\u003c/powershell\u003e\n",
            "vars": {
              "environment": "uat",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.egis_monitor",
      "mode": "managed",
      "type": "aws_instance",
      "name": "arcgismonitor",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0b266e75d54048c9f",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-0f6d0c17e5cae8776",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisESRISSMDeploy",
            "id": "i-0f6d0c17e5cae8776",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "m5.xlarge",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "hv-uat-ec2-key-pair",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0c2b2a020593271b4",
            "private_dns": "ip-10-27-2-151.ec2.internal",
            "private_ip": "10.27.2.151",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 600,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0647ca411501c5472",
                "volume_size": 200,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-0d6d51d00f4367af4",
            "tags": {
              "Name": "hv-uat-egis-ArcGIS-Monitor",
              "OS": "Windows"
            },
            "tags_all": {
              "Name": "hv-uat-egis-ArcGIS-Monitor",
              "OS": "Windows",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "ee2764686d6a27bc23c62c81a32d62c80e812e2e",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-013db899dbaeea4ce",
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.egis_monitor.data.aws_ami.windows",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-web1a",
            "module.vpc.aws_vpc.main",
            "module.egis_monitor.data.template_cloudinit_config.arcgismonitor",
            "module.iam-roles.aws_iam_instance_profile.HydrovisESRISSMDeploy",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.egis_monitor.data.template_file.arcgismonitor",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.security-groups.aws_security_group.egis-overlord",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "data",
      "type": "template_file",
      "name": "HydroVISSSMPolicy-template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9dc4867d91a7dd7911d52c83e4ec189da015deb563c78849fffb20ae46e67b66",
            "rendered": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "template": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-${environment}-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "vars": {
              "environment": "uat"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "data",
      "type": "template_file",
      "name": "HydrovisESRISSMDeploy-template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "aa06cb07ca0d4f78f7dd98c914d0661f5f2716f21e4ae37444d57dec36ab23b9",
            "rendered": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"ssm0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"ssm1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\":\"logging\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"tag:getResources\",\n        \"tag:getTagKeys\",\n        \"tag:getTagValues\",\n        \"resource-groups:Get*\",\n        \"resource-groups:List*\",\n        \"resource-groups:Search*\",\n        \"cloudformation:DescribeStacks\",\n        \"cloudformation:ListStackResources\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"elasticloadbalancing:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:Describe*\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\":\"EC2ReadOnlyforLogging\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"autoscaling:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\":[\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\":\"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\": [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\" : \"*\" \n    },\t\t\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"devfimnwmsKMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GetPublicKey\",\n        \"kms:Decrypt\",\n        \"kms:UntagResource\",\n        \"kms:ListKeyPolicies\",\n        \"kms:ListRetirableGrants\",\n        \"kms:GetKeyPolicy\",\n        \"kms:ListResourceTags\",\n        \"kms:ListGrants\",\n        \"kms:GetParametersForImport\",\n        \"kms:TagResource\",\n        \"kms:GetKeyRotationStatus\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"SeeAllS3KMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:*\",\n        \"kms:DescribeCustomKeyStores\",\n        \"kms:ListKeys\",\n        \"kms:ListAliases\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PortalContent\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GISServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"ImageServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GPServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"AutoScaling\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachClassicLinkVpc\",\n        \"ec2:CancelSpotInstanceRequests\",\n        \"ec2:CreateFleet\",\n        \"ec2:CreateTags\",\n        \"ec2:DeleteTags\",\n        \"ec2:Describe*\",\n        \"ec2:DetachClassicLinkVpc\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:RequestSpotInstances\",\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"elasticloadbalancing:Register*\",\n        \"elasticloadbalancing:Deregister*\",\n        \"elasticloadbalancing:Describe*\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"sns:Publish\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PackerIAMPassRole\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"iam:PassRole\",\n        \"iam:GetInstanceProfile\"\n      ],\n      \"Resource\" : [\n        \"*\"\n      ]\n    },\n    {\n      \"Sid\" : \"PackerDeploy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachVolume\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:CopyImage\",\n        \"ec2:CreateImage\",\n        \"ec2:CreateKeypair\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:CreateSnapshot\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteKeyPair\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:DeleteSnapshot\",\n        \"ec2:DeleteVolume\",\n        \"ec2:DeregisterImage\",\n        \"ec2:DescribeImageAttribute\",\n        \"ec2:DescribeImages\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeSnapshots\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ec2:DetachVolume\",\n        \"ec2:GetPasswordData\",\n        \"ec2:ModifyImageAttribute\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:ModifySnapshotAttribute\",\n        \"ec2:RegisterImage\",\n        \"ec2:RunInstances\",\n        \"ec2:StopInstances\",\n        \"ec2:TerminateInstances\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}\n",
            "template": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"ssm0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"ssm1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\":\"logging\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"tag:getResources\",\n        \"tag:getTagKeys\",\n        \"tag:getTagValues\",\n        \"resource-groups:Get*\",\n        \"resource-groups:List*\",\n        \"resource-groups:Search*\",\n        \"cloudformation:DescribeStacks\",\n        \"cloudformation:ListStackResources\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"elasticloadbalancing:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:Describe*\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\":\"EC2ReadOnlyforLogging\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"autoscaling:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\":[\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\":\"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\": [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\" : \"*\" \n    },\t\t\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"devfimnwmsKMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GetPublicKey\",\n        \"kms:Decrypt\",\n        \"kms:UntagResource\",\n        \"kms:ListKeyPolicies\",\n        \"kms:ListRetirableGrants\",\n        \"kms:GetKeyPolicy\",\n        \"kms:ListResourceTags\",\n        \"kms:ListGrants\",\n        \"kms:GetParametersForImport\",\n        \"kms:TagResource\",\n        \"kms:GetKeyRotationStatus\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:iam::${account_id}:role/*\",\n        \"arn:aws:kms:${region}:${account_id}:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"SeeAllS3KMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:*\",\n        \"kms:DescribeCustomKeyStores\",\n        \"kms:ListKeys\",\n        \"kms:ListAliases\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PortalContent\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-ptl-content/*\",\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-ptl-content\",\n        \"arn:aws:kms:${region}:${account_id}:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GISServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-gis-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-gis-server-cache\",\n        \"arn:aws:kms:${region}:${account_id}:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"ImageServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-img-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-img-server-cache\",\n        \"arn:aws:kms:${region}:${account_id}:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GPServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-gp-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-${environment}-egis-${region}-gp-server-cache\",\n        \"arn:aws:kms:${region}:${account_id}:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-${environment}-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-${environment}-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"AutoScaling\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachClassicLinkVpc\",\n        \"ec2:CancelSpotInstanceRequests\",\n        \"ec2:CreateFleet\",\n        \"ec2:CreateTags\",\n        \"ec2:DeleteTags\",\n        \"ec2:Describe*\",\n        \"ec2:DetachClassicLinkVpc\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:RequestSpotInstances\",\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"elasticloadbalancing:Register*\",\n        \"elasticloadbalancing:Deregister*\",\n        \"elasticloadbalancing:Describe*\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"sns:Publish\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PackerIAMPassRole\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"iam:PassRole\",\n        \"iam:GetInstanceProfile\"\n      ],\n      \"Resource\" : [\n        \"*\"\n      ]\n    },\n    {\n      \"Sid\" : \"PackerDeploy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachVolume\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:CopyImage\",\n        \"ec2:CreateImage\",\n        \"ec2:CreateKeypair\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:CreateSnapshot\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteKeyPair\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:DeleteSnapshot\",\n        \"ec2:DeleteVolume\",\n        \"ec2:DeregisterImage\",\n        \"ec2:DescribeImageAttribute\",\n        \"ec2:DescribeImages\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeSnapshots\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ec2:DetachVolume\",\n        \"ec2:GetPasswordData\",\n        \"ec2:ModifyImageAttribute\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:ModifySnapshotAttribute\",\n        \"ec2:RegisterImage\",\n        \"ec2:RunInstances\",\n        \"ec2:StopInstances\",\n        \"ec2:TerminateInstances\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}\n",
            "vars": {
              "account_id": "799732994462",
              "environment": "uat",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "data",
      "type": "template_file",
      "name": "hydrovis-hml-ingest-role-template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "ea0e32ff482e787212cf6e1d51c17461e8fd0b4a4b54e4850e2daae11ba03af5",
            "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:PassRole\",\n        \"secretsmanager:GetSecretValue\",\n        \"rds:DescribeDBInstances\"\n      ],\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:db:*\",\n        \"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\n        \"arn:aws:secretsmanager:us-east-1:799732994462:secret:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:CreateNetworkInterface\",\n        \"ec2:DeleteNetworkInterface\",\n        \"ec2:AttachNetworkInterface\",\n        \"ec2:DescribeNetworkInterfaces\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:DescribeDBInstances\",\n      \"Resource\": \"arn:aws:rds:us-east-1:799732994462:db:*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListAccessPointsForObjectLambda\",\n        \"s3:GetAccessPoint\",\n        \"rds:DeleteInstallationMedia\",\n        \"rds:CreateCustomAvailabilityZone\",\n        \"rds:DescribeDBEngineVersions\",\n        \"rds:CrossRegionCommunication\",\n        \"mq:ListBrokers\",\n        \"rds:DescribeExportTasks\",\n        \"rds:StartExportTask\",\n        \"s3:PutStorageLensConfiguration\",\n        \"rds:DescribeEngineDefaultParameters\",\n        \"rds:DescribeCustomAvailabilityZones\",\n        \"rds:DescribeReservedDBInstancesOfferings\",\n        \"rds:DeleteCustomAvailabilityZone\",\n        \"mq:CreateConfiguration\",\n        \"rds:ImportInstallationMedia\",\n        \"rds:DescribeEngineDefaultClusterParameters\",\n        \"rds:DescribeSourceRegions\",\n        \"rds:DescribeInstallationMedia\",\n        \"rds:CreateDBProxy\",\n        \"rds:DescribeEventCategories\",\n        \"mq:CreateBroker\",\n        \"rds:DescribeEvents\",\n        \"s3:PutAccountPublicAccessBlock\",\n        \"rds:CancelExportTask\",\n        \"s3:ListAccessPoints\",\n        \"s3:ListJobs\",\n        \"mq:DescribeBrokerEngineTypes\",\n        \"mq:DescribeBrokerInstanceOptions\",\n        \"s3:ListMultiRegionAccessPoints\",\n        \"mq:ListConfigurations\",\n        \"rds:DeleteDBInstanceAutomatedBackup\",\n        \"s3:ListStorageLensConfigurations\",\n        \"rds:ModifyCertificates\",\n        \"s3:GetAccountPublicAccessBlock\",\n        \"s3:ListAllMyBuckets\",\n        \"rds:DescribeOrderableDBInstanceOptions\",\n        \"rds:DescribeCertificates\",\n        \"s3:CreateJob\",\n        \"rds:DescribeAccountAttributes\",\n        \"secretsmanager:ListSecrets\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:*\",\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:cluster-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:db:hydrovis-uat-ingest\",\n        \"arn:aws:rds:*:799732994462:og:*\",\n        \"arn:aws:rds:*:799732994462:target-group:*\",\n        \"arn:aws:rds:*:799732994462:pg:*\",\n        \"arn:aws:rds:*:799732994462:es:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy:*\",\n        \"arn:aws:rds:*:799732994462:ri:*\",\n        \"arn:aws:rds:*:799732994462:snapshot:*\",\n        \"arn:aws:rds:*:799732994462:cluster-pg:*\",\n        \"arn:aws:rds:*:799732994462:cluster-snapshot:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:cluster:*\",\n        \"arn:aws:rds:*:799732994462:subgrp:*\",\n        \"arn:aws:rds:*:799732994462:secgrp:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor4\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3-object-lambda:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:us-west-2:799732994462:async-request/mrap/*/*\",\n        \"arn:aws:s3:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:*:799732994462:job/*\",\n        \"arn:aws:s3:*:799732994462:storage-lens/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor5\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"mq:*\",\n      \"Resource\": [\n        \"arn:aws:mq:us-east-1:799732994462:configuration:*\",\n        \"arn:aws:mq:us-east-1:799732994462:broker:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor6\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": \"arn:aws:s3::799732994462:accesspoint/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:PassRole\",\n        \"secretsmanager:GetSecretValue\",\n        \"rds:DescribeDBInstances\"\n      ],\n      \"Resource\": [\n        \"arn:aws:rds:*:${account_id}:db:*\",\n        \"arn:aws:iam::${account_id}:role/hydrovis-${environment}-hml-ingest-role\",\n        \"arn:aws:secretsmanager:${region}:${account_id}:secret:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:CreateNetworkInterface\",\n        \"ec2:DeleteNetworkInterface\",\n        \"ec2:AttachNetworkInterface\",\n        \"ec2:DescribeNetworkInterfaces\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:DescribeDBInstances\",\n      \"Resource\": \"arn:aws:rds:${region}:${account_id}:db:*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListAccessPointsForObjectLambda\",\n        \"s3:GetAccessPoint\",\n        \"rds:DeleteInstallationMedia\",\n        \"rds:CreateCustomAvailabilityZone\",\n        \"rds:DescribeDBEngineVersions\",\n        \"rds:CrossRegionCommunication\",\n        \"mq:ListBrokers\",\n        \"rds:DescribeExportTasks\",\n        \"rds:StartExportTask\",\n        \"s3:PutStorageLensConfiguration\",\n        \"rds:DescribeEngineDefaultParameters\",\n        \"rds:DescribeCustomAvailabilityZones\",\n        \"rds:DescribeReservedDBInstancesOfferings\",\n        \"rds:DeleteCustomAvailabilityZone\",\n        \"mq:CreateConfiguration\",\n        \"rds:ImportInstallationMedia\",\n        \"rds:DescribeEngineDefaultClusterParameters\",\n        \"rds:DescribeSourceRegions\",\n        \"rds:DescribeInstallationMedia\",\n        \"rds:CreateDBProxy\",\n        \"rds:DescribeEventCategories\",\n        \"mq:CreateBroker\",\n        \"rds:DescribeEvents\",\n        \"s3:PutAccountPublicAccessBlock\",\n        \"rds:CancelExportTask\",\n        \"s3:ListAccessPoints\",\n        \"s3:ListJobs\",\n        \"mq:DescribeBrokerEngineTypes\",\n        \"mq:DescribeBrokerInstanceOptions\",\n        \"s3:ListMultiRegionAccessPoints\",\n        \"mq:ListConfigurations\",\n        \"rds:DeleteDBInstanceAutomatedBackup\",\n        \"s3:ListStorageLensConfigurations\",\n        \"rds:ModifyCertificates\",\n        \"s3:GetAccountPublicAccessBlock\",\n        \"s3:ListAllMyBuckets\",\n        \"rds:DescribeOrderableDBInstanceOptions\",\n        \"rds:DescribeCertificates\",\n        \"s3:CreateJob\",\n        \"rds:DescribeAccountAttributes\",\n        \"secretsmanager:ListSecrets\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:*\",\n      \"Resource\": [\n        \"arn:aws:rds:*:${account_id}:cluster-endpoint:*\",\n        \"arn:aws:rds:${region}:${account_id}:db:hydrovis-${environment}-ingest\",\n        \"arn:aws:rds:*:${account_id}:og:*\",\n        \"arn:aws:rds:*:${account_id}:target-group:*\",\n        \"arn:aws:rds:*:${account_id}:pg:*\",\n        \"arn:aws:rds:*:${account_id}:es:*\",\n        \"arn:aws:rds:*:${account_id}:db-proxy:*\",\n        \"arn:aws:rds:*:${account_id}:ri:*\",\n        \"arn:aws:rds:*:${account_id}:snapshot:*\",\n        \"arn:aws:rds:*:${account_id}:cluster-pg:*\",\n        \"arn:aws:rds:*:${account_id}:cluster-snapshot:*\",\n        \"arn:aws:rds:*:${account_id}:db-proxy-endpoint:*\",\n        \"arn:aws:rds:${region}:${account_id}:cluster:*\",\n        \"arn:aws:rds:*:${account_id}:subgrp:*\",\n        \"arn:aws:rds:*:${account_id}:secgrp:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor4\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3-object-lambda:*:${account_id}:accesspoint/*\",\n        \"arn:aws:s3:us-west-2:${account_id}:async-request/mrap/*/*\",\n        \"arn:aws:s3:*:${account_id}:accesspoint/*\",\n        \"arn:aws:s3:*:${account_id}:job/*\",\n        \"arn:aws:s3:*:${account_id}:storage-lens/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor5\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"mq:*\",\n      \"Resource\": [\n        \"arn:aws:mq:${region}:${account_id}:configuration:*\",\n        \"arn:aws:mq:${region}:${account_id}:broker:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor6\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": \"arn:aws:s3::${account_id}:accesspoint/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "vars": {
              "account_id": "799732994462",
              "environment": "uat",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "data",
      "type": "template_file",
      "name": "hydrovis-viz-proc-pipeline-lambda-template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "c9eb85b131590ed7234b9096ee5d6a79ebce53d595f8136a8ed60a6a84eb3534",
            "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:GetPublicKey\",\n        \"cloudwatch:PutDashboard\",\n        \"kms:Decrypt\",\n        \"iam:ListRoleTags\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudtrail:GetTrailStatus\",\n        \"cloudwatch:DeleteInsightRules\",\n        \"kms:ListResourceTags\",\n        \"cloudwatch:StartMetricStreams\",\n        \"kms:GetParametersForImport\",\n        \"iam:PassRole\",\n        \"cloudwatch:DeleteDashboards\",\n        \"sns:Publish\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:UntagResource\",\n        \"cloudwatch:StopMetricStreams\",\n        \"kms:GetKeyRotationStatus\",\n        \"cloudwatch:DisableAlarmActions\",\n        \"cloudtrail:ListTags\",\n        \"cloudwatch:ListTagsForResource\",\n        \"kms:DescribeKey\",\n        \"ssm:GetParametersByPath\",\n        \"cloudwatch:DeleteMetricStream\",\n        \"cloudwatch:SetAlarmState\",\n        \"kms:ListKeyPolicies\",\n        \"cloudwatch:GetDashboard\",\n        \"kms:ListRetirableGrants\",\n        \"cloudwatch:GetInsightRuleReport\",\n        \"kms:GetKeyPolicy\",\n        \"cloudwatch:DisableInsightRules\",\n        \"cloudwatch:EnableInsightRules\",\n        \"cloudwatch:PutCompositeAlarm\",\n        \"kms:ListGrants\",\n        \"cloudwatch:PutMetricStream\",\n        \"cloudwatch:PutInsightRule\",\n        \"cloudwatch:TagResource\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"cloudwatch:EnableAlarmActions\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-1:799732994462:parameter/*\",\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:sns:us-east-1:799732994462:*\",\n        \"arn:aws:cloudtrail:us-east-1:799732994462:trail/*\",\n        \"arn:aws:cloudwatch::799732994462:dashboard/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:alarm:*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:metric-stream/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:insight-rule/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:GetLogRecord\",\n        \"cloudwatch:PutMetricData\",\n        \"ec2:DescribeInstances\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:StartQuery\",\n        \"logs:DescribeMetricFilters\",\n        \"logs:ListLogDeliveries\",\n        \"logs:CreateLogStream\",\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:ListDashboards\",\n        \"ec2:DescribeVolumes\",\n        \"logs:GetLogEvents\",\n        \"cloudwatch:PutAnomalyDetector\",\n        \"logs:FilterLogEvents\",\n        \"s3:DeleteObject\",\n        \"logs:DescribeDestinations\",\n        \"cloudwatch:DescribeInsightRules\",\n        \"cloudtrail:GetTrail\",\n        \"ec2:CreateTags\",\n        \"s3:ListJobs\",\n        \"ec2:DeleteNetworkInterface\",\n        \"logs:StopQuery\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"logs:CreateLogGroup\",\n        \"cloudtrail:DescribeTrails\",\n        \"ec2:CreateNetworkInterface\",\n        \"logs:DescribeExportTasks\",\n        \"logs:GetQueryResults\",\n        \"logs:ListTagsLogGroup\",\n        \"cloudwatch:GetMetricData\",\n        \"logs:DescribeLogStreams\",\n        \"s3:ListBucket\",\n        \"cloudwatch:DeleteAnomalyDetector\",\n        \"cloudwatch:ListMetrics\",\n        \"logs:GetLogDelivery\",\n        \"cloudwatch:DescribeAnomalyDetectors\",\n        \"s3:GetEncryptionConfiguration\",\n        \"ec2:DescribeNetworkInterfaces\",\n        \"ec2:DescribeNetworkInterfaceAttribute\",\n        \"cloudwatch:GetMetricWidgetImage\",\n        \"logs:DescribeResourcePolicies\",\n        \"logs:DescribeQueries\",\n        \"logs:DescribeLogGroups\",\n        \"logs:TestMetricFilter\",\n        \"logs:PutLogEvents\",\n        \"s3:ListStorageLensConfigurations\",\n        \"s3:ListAllMyBuckets\",\n        \"cloudwatch:ListMetricStreams\",\n        \"cloudtrail:ListPublicKeys\",\n        \"logs:GetLogGroupFields\",\n        \"logs:PutSubscriptionFilter\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:GetEncryptionConfiguration\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\",\n        \"s3:RestoreObject\",\n        \"s3:ListBucket\",\n        \"s3:DeleteObject\",\n        \"s3:GetBucketAcl\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::hydrovis-*-hml-*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*\",\n        \"arn:aws:s3:::hydrovis-*-hml-*/*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*/*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:*\",\n      \"Resource\": [\n        \"arn:aws:lambda:us-east-1:799732994462:event-source-mapping:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:codesigningconfig:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:function:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:GetPublicKey\",\n        \"cloudwatch:PutDashboard\",\n        \"kms:Decrypt\",\n        \"iam:ListRoleTags\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudtrail:GetTrailStatus\",\n        \"cloudwatch:DeleteInsightRules\",\n        \"kms:ListResourceTags\",\n        \"cloudwatch:StartMetricStreams\",\n        \"kms:GetParametersForImport\",\n        \"iam:PassRole\",\n        \"cloudwatch:DeleteDashboards\",\n        \"sns:Publish\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:UntagResource\",\n        \"cloudwatch:StopMetricStreams\",\n        \"kms:GetKeyRotationStatus\",\n        \"cloudwatch:DisableAlarmActions\",\n        \"cloudtrail:ListTags\",\n        \"cloudwatch:ListTagsForResource\",\n        \"kms:DescribeKey\",\n        \"ssm:GetParametersByPath\",\n        \"cloudwatch:DeleteMetricStream\",\n        \"cloudwatch:SetAlarmState\",\n        \"kms:ListKeyPolicies\",\n        \"cloudwatch:GetDashboard\",\n        \"kms:ListRetirableGrants\",\n        \"cloudwatch:GetInsightRuleReport\",\n        \"kms:GetKeyPolicy\",\n        \"cloudwatch:DisableInsightRules\",\n        \"cloudwatch:EnableInsightRules\",\n        \"cloudwatch:PutCompositeAlarm\",\n        \"kms:ListGrants\",\n        \"cloudwatch:PutMetricStream\",\n        \"cloudwatch:PutInsightRule\",\n        \"cloudwatch:TagResource\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"cloudwatch:EnableAlarmActions\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ssm:${region}:${account_id}:parameter/*\",\n        \"arn:aws:iam::${account_id}:role/*\",\n        \"arn:aws:sns:${region}:${account_id}:*\",\n        \"arn:aws:cloudtrail:${region}:${account_id}:trail/*\",\n        \"arn:aws:cloudwatch::${account_id}:dashboard/*\",\n        \"arn:aws:cloudwatch:${region}:${account_id}:alarm:*\",\n        \"arn:aws:cloudwatch:${region}:${account_id}:metric-stream/*\",\n        \"arn:aws:cloudwatch:${region}:${account_id}:insight-rule/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:GetLogRecord\",\n        \"cloudwatch:PutMetricData\",\n        \"ec2:DescribeInstances\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:StartQuery\",\n        \"logs:DescribeMetricFilters\",\n        \"logs:ListLogDeliveries\",\n        \"logs:CreateLogStream\",\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:ListDashboards\",\n        \"ec2:DescribeVolumes\",\n        \"logs:GetLogEvents\",\n        \"cloudwatch:PutAnomalyDetector\",\n        \"logs:FilterLogEvents\",\n        \"s3:DeleteObject\",\n        \"logs:DescribeDestinations\",\n        \"cloudwatch:DescribeInsightRules\",\n        \"cloudtrail:GetTrail\",\n        \"ec2:CreateTags\",\n        \"s3:ListJobs\",\n        \"ec2:DeleteNetworkInterface\",\n        \"logs:StopQuery\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"logs:CreateLogGroup\",\n        \"cloudtrail:DescribeTrails\",\n        \"ec2:CreateNetworkInterface\",\n        \"logs:DescribeExportTasks\",\n        \"logs:GetQueryResults\",\n        \"logs:ListTagsLogGroup\",\n        \"cloudwatch:GetMetricData\",\n        \"logs:DescribeLogStreams\",\n        \"s3:ListBucket\",\n        \"cloudwatch:DeleteAnomalyDetector\",\n        \"cloudwatch:ListMetrics\",\n        \"logs:GetLogDelivery\",\n        \"cloudwatch:DescribeAnomalyDetectors\",\n        \"s3:GetEncryptionConfiguration\",\n        \"ec2:DescribeNetworkInterfaces\",\n        \"ec2:DescribeNetworkInterfaceAttribute\",\n        \"cloudwatch:GetMetricWidgetImage\",\n        \"logs:DescribeResourcePolicies\",\n        \"logs:DescribeQueries\",\n        \"logs:DescribeLogGroups\",\n        \"logs:TestMetricFilter\",\n        \"logs:PutLogEvents\",\n        \"s3:ListStorageLensConfigurations\",\n        \"s3:ListAllMyBuckets\",\n        \"cloudwatch:ListMetricStreams\",\n        \"cloudtrail:ListPublicKeys\",\n        \"logs:GetLogGroupFields\",\n        \"logs:PutSubscriptionFilter\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:GetEncryptionConfiguration\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\",\n        \"s3:RestoreObject\",\n        \"s3:ListBucket\",\n        \"s3:DeleteObject\",\n        \"s3:GetBucketAcl\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::hydrovis-*-hml-*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*\",\n        \"arn:aws:s3:::hydrovis-*-hml-*/*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*/*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:*\",\n      \"Resource\": [\n        \"arn:aws:lambda:${region}:${account_id}:event-source-mapping:*\",\n        \"arn:aws:lambda:${region}:${account_id}:codesigningconfig:*\",\n        \"arn:aws:lambda:${region}:${account_id}:function:*\",\n        \"arn:aws:lambda:${region}:${account_id}:layer:*\",\n        \"arn:aws:lambda:${region}:${account_id}:layer:*:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "vars": {
              "account_id": "799732994462",
              "environment": "uat",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "HydrovisESRISSMDeploy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:instance-profile/HydrovisESRISSMDeploy",
            "create_date": "2021-10-12T21:32:34Z",
            "id": "HydrovisESRISSMDeploy",
            "name": "HydrovisESRISSMDeploy",
            "name_prefix": null,
            "path": "/",
            "role": "HydrovisESRISSMDeploy",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AIPA3UM6NCGPPAFC6L4ZL"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "HydrovisSSMInstanceProfileRole",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:instance-profile/HydrovisSSMInstanceProfileRole",
            "create_date": "2021-09-15T17:13:05Z",
            "id": "HydrovisSSMInstanceProfileRole",
            "name": "HydrovisSSMInstanceProfileRole",
            "name_prefix": null,
            "path": "/",
            "role": "HydrovisSSMInstanceProfileRole",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AIPA3UM6NCGPPMBRJ7IXF"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "Hydroviz-RnR-EC2-Profile",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:instance-profile/Hydroviz-RnR-EC2-Profile",
            "create_date": "2021-10-08T17:02:10Z",
            "id": "Hydroviz-RnR-EC2-Profile",
            "name": "Hydroviz-RnR-EC2-Profile",
            "name_prefix": null,
            "path": "/",
            "role": "Hydroviz-RnR-EC2-Profile",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AIPA3UM6NCGPKN35UEUBI"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "hydrovis-hml-ingest-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:instance-profile/hydrovis-uat-hml-ingest-role",
            "create_date": "2021-10-07T21:13:31Z",
            "id": "hydrovis-uat-hml-ingest-role",
            "name": "hydrovis-uat-hml-ingest-role",
            "name_prefix": null,
            "path": "/",
            "role": "hydrovis-uat-hml-ingest-role",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AIPA3UM6NCGPIK55BCAV3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "HydrovisESRISSMDeploy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-09-15T17:13:03Z",
            "description": "",
            "force_detach_policies": false,
            "id": "HydrovisESRISSMDeploy",
            "inline_policy": [
              {
                "name": "HydrovisESRISSMDeploy",
                "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"ssm0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"ssm1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\":\"logging\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"tag:getResources\",\n        \"tag:getTagKeys\",\n        \"tag:getTagValues\",\n        \"resource-groups:Get*\",\n        \"resource-groups:List*\",\n        \"resource-groups:Search*\",\n        \"cloudformation:DescribeStacks\",\n        \"cloudformation:ListStackResources\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"elasticloadbalancing:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:Describe*\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\":\"EC2ReadOnlyforLogging\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"autoscaling:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\":[\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\":\"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\": [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\" : \"*\" \n    },\t\t\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"devfimnwmsKMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GetPublicKey\",\n        \"kms:Decrypt\",\n        \"kms:UntagResource\",\n        \"kms:ListKeyPolicies\",\n        \"kms:ListRetirableGrants\",\n        \"kms:GetKeyPolicy\",\n        \"kms:ListResourceTags\",\n        \"kms:ListGrants\",\n        \"kms:GetParametersForImport\",\n        \"kms:TagResource\",\n        \"kms:GetKeyRotationStatus\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"SeeAllS3KMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:*\",\n        \"kms:DescribeCustomKeyStores\",\n        \"kms:ListKeys\",\n        \"kms:ListAliases\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PortalContent\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GISServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"ImageServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GPServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"AutoScaling\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachClassicLinkVpc\",\n        \"ec2:CancelSpotInstanceRequests\",\n        \"ec2:CreateFleet\",\n        \"ec2:CreateTags\",\n        \"ec2:DeleteTags\",\n        \"ec2:Describe*\",\n        \"ec2:DetachClassicLinkVpc\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:RequestSpotInstances\",\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"elasticloadbalancing:Register*\",\n        \"elasticloadbalancing:Deregister*\",\n        \"elasticloadbalancing:Describe*\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"sns:Publish\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PackerIAMPassRole\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"iam:PassRole\",\n        \"iam:GetInstanceProfile\"\n      ],\n      \"Resource\" : [\n        \"*\"\n      ]\n    },\n    {\n      \"Sid\" : \"PackerDeploy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachVolume\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:CopyImage\",\n        \"ec2:CreateImage\",\n        \"ec2:CreateKeypair\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:CreateSnapshot\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteKeyPair\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:DeleteSnapshot\",\n        \"ec2:DeleteVolume\",\n        \"ec2:DeregisterImage\",\n        \"ec2:DescribeImageAttribute\",\n        \"ec2:DescribeImages\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeSnapshots\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ec2:DetachVolume\",\n        \"ec2:GetPasswordData\",\n        \"ec2:ModifyImageAttribute\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:ModifySnapshotAttribute\",\n        \"ec2:RegisterImage\",\n        \"ec2:RunInstances\",\n        \"ec2:StopInstances\",\n        \"ec2:TerminateInstances\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}\n"
              }
            ],
            "managed_policy_arns": [
              "arn:aws:iam::799732994462:policy/HydrovisESRISSMDeploy",
              "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
              "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
            ],
            "max_session_duration": 3600,
            "name": "HydrovisESRISSMDeploy",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPLAMN26WJY"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "HydrovisSSMInstanceProfileRole",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/HydrovisSSMInstanceProfileRole",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-09-15T17:13:03Z",
            "description": "",
            "force_detach_policies": false,
            "id": "HydrovisSSMInstanceProfileRole",
            "inline_policy": [
              {
                "name": "HydroVISSSMPolicy",
                "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "HydrovisSSMInstanceProfileRole",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPPHAZ6QUPD"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "Hydroviz-RnR-EC2-Profile",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-10-08T17:02:09Z",
            "description": "",
            "force_detach_policies": false,
            "id": "Hydroviz-RnR-EC2-Profile",
            "inline_policy": [
              {
                "name": "HydroVISSSMPolicy",
                "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "Hydroviz-RnR-EC2-Profile",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPBTVN53C7H"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "hydrovis-hml-ingest-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"ec2.amazonaws.com\",\"lambda.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-10-07T21:13:30Z",
            "description": "",
            "force_detach_policies": false,
            "id": "hydrovis-uat-hml-ingest-role",
            "inline_policy": [
              {
                "name": "HydroVISSSMPolicy",
                "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}"
              },
              {
                "name": "hydrovis-hml-ingest-role",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:PassRole\",\n        \"secretsmanager:GetSecretValue\",\n        \"rds:DescribeDBInstances\"\n      ],\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:db:*\",\n        \"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\n        \"arn:aws:secretsmanager:us-east-1:799732994462:secret:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:CreateNetworkInterface\",\n        \"ec2:DeleteNetworkInterface\",\n        \"ec2:AttachNetworkInterface\",\n        \"ec2:DescribeNetworkInterfaces\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:DescribeDBInstances\",\n      \"Resource\": \"arn:aws:rds:us-east-1:799732994462:db:*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListAccessPointsForObjectLambda\",\n        \"s3:GetAccessPoint\",\n        \"rds:DeleteInstallationMedia\",\n        \"rds:CreateCustomAvailabilityZone\",\n        \"rds:DescribeDBEngineVersions\",\n        \"rds:CrossRegionCommunication\",\n        \"mq:ListBrokers\",\n        \"rds:DescribeExportTasks\",\n        \"rds:StartExportTask\",\n        \"s3:PutStorageLensConfiguration\",\n        \"rds:DescribeEngineDefaultParameters\",\n        \"rds:DescribeCustomAvailabilityZones\",\n        \"rds:DescribeReservedDBInstancesOfferings\",\n        \"rds:DeleteCustomAvailabilityZone\",\n        \"mq:CreateConfiguration\",\n        \"rds:ImportInstallationMedia\",\n        \"rds:DescribeEngineDefaultClusterParameters\",\n        \"rds:DescribeSourceRegions\",\n        \"rds:DescribeInstallationMedia\",\n        \"rds:CreateDBProxy\",\n        \"rds:DescribeEventCategories\",\n        \"mq:CreateBroker\",\n        \"rds:DescribeEvents\",\n        \"s3:PutAccountPublicAccessBlock\",\n        \"rds:CancelExportTask\",\n        \"s3:ListAccessPoints\",\n        \"s3:ListJobs\",\n        \"mq:DescribeBrokerEngineTypes\",\n        \"mq:DescribeBrokerInstanceOptions\",\n        \"s3:ListMultiRegionAccessPoints\",\n        \"mq:ListConfigurations\",\n        \"rds:DeleteDBInstanceAutomatedBackup\",\n        \"s3:ListStorageLensConfigurations\",\n        \"rds:ModifyCertificates\",\n        \"s3:GetAccountPublicAccessBlock\",\n        \"s3:ListAllMyBuckets\",\n        \"rds:DescribeOrderableDBInstanceOptions\",\n        \"rds:DescribeCertificates\",\n        \"s3:CreateJob\",\n        \"rds:DescribeAccountAttributes\",\n        \"secretsmanager:ListSecrets\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:*\",\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:cluster-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:db:hydrovis-uat-ingest\",\n        \"arn:aws:rds:*:799732994462:og:*\",\n        \"arn:aws:rds:*:799732994462:target-group:*\",\n        \"arn:aws:rds:*:799732994462:pg:*\",\n        \"arn:aws:rds:*:799732994462:es:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy:*\",\n        \"arn:aws:rds:*:799732994462:ri:*\",\n        \"arn:aws:rds:*:799732994462:snapshot:*\",\n        \"arn:aws:rds:*:799732994462:cluster-pg:*\",\n        \"arn:aws:rds:*:799732994462:cluster-snapshot:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:cluster:*\",\n        \"arn:aws:rds:*:799732994462:subgrp:*\",\n        \"arn:aws:rds:*:799732994462:secgrp:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor4\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3-object-lambda:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:us-west-2:799732994462:async-request/mrap/*/*\",\n        \"arn:aws:s3:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:*:799732994462:job/*\",\n        \"arn:aws:s3:*:799732994462:storage-lens/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor5\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"mq:*\",\n      \"Resource\": [\n        \"arn:aws:mq:us-east-1:799732994462:configuration:*\",\n        \"arn:aws:mq:us-east-1:799732994462:broker:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor6\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": \"arn:aws:s3::799732994462:accesspoint/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "max_session_duration": 3600,
            "name": "hydrovis-uat-hml-ingest-role",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPJPBHEIW7D"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "hydrovis-viz-proc-pipeline-lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-09-24T15:04:09Z",
            "description": "",
            "force_detach_policies": false,
            "id": "hydrovis-viz-proc-pipeline-lambda",
            "inline_policy": [
              {
                "name": "hydrovis-viz-proc-pipeline-lambda",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:GetPublicKey\",\n        \"cloudwatch:PutDashboard\",\n        \"kms:Decrypt\",\n        \"iam:ListRoleTags\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudtrail:GetTrailStatus\",\n        \"cloudwatch:DeleteInsightRules\",\n        \"kms:ListResourceTags\",\n        \"cloudwatch:StartMetricStreams\",\n        \"kms:GetParametersForImport\",\n        \"iam:PassRole\",\n        \"cloudwatch:DeleteDashboards\",\n        \"sns:Publish\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:UntagResource\",\n        \"cloudwatch:StopMetricStreams\",\n        \"kms:GetKeyRotationStatus\",\n        \"cloudwatch:DisableAlarmActions\",\n        \"cloudtrail:ListTags\",\n        \"cloudwatch:ListTagsForResource\",\n        \"kms:DescribeKey\",\n        \"ssm:GetParametersByPath\",\n        \"cloudwatch:DeleteMetricStream\",\n        \"cloudwatch:SetAlarmState\",\n        \"kms:ListKeyPolicies\",\n        \"cloudwatch:GetDashboard\",\n        \"kms:ListRetirableGrants\",\n        \"cloudwatch:GetInsightRuleReport\",\n        \"kms:GetKeyPolicy\",\n        \"cloudwatch:DisableInsightRules\",\n        \"cloudwatch:EnableInsightRules\",\n        \"cloudwatch:PutCompositeAlarm\",\n        \"kms:ListGrants\",\n        \"cloudwatch:PutMetricStream\",\n        \"cloudwatch:PutInsightRule\",\n        \"cloudwatch:TagResource\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"cloudwatch:EnableAlarmActions\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-1:799732994462:parameter/*\",\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:sns:us-east-1:799732994462:*\",\n        \"arn:aws:cloudtrail:us-east-1:799732994462:trail/*\",\n        \"arn:aws:cloudwatch::799732994462:dashboard/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:alarm:*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:metric-stream/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:insight-rule/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:GetLogRecord\",\n        \"cloudwatch:PutMetricData\",\n        \"ec2:DescribeInstances\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:StartQuery\",\n        \"logs:DescribeMetricFilters\",\n        \"logs:ListLogDeliveries\",\n        \"logs:CreateLogStream\",\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:ListDashboards\",\n        \"ec2:DescribeVolumes\",\n        \"logs:GetLogEvents\",\n        \"cloudwatch:PutAnomalyDetector\",\n        \"logs:FilterLogEvents\",\n        \"s3:DeleteObject\",\n        \"logs:DescribeDestinations\",\n        \"cloudwatch:DescribeInsightRules\",\n        \"cloudtrail:GetTrail\",\n        \"ec2:CreateTags\",\n        \"s3:ListJobs\",\n        \"ec2:DeleteNetworkInterface\",\n        \"logs:StopQuery\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"logs:CreateLogGroup\",\n        \"cloudtrail:DescribeTrails\",\n        \"ec2:CreateNetworkInterface\",\n        \"logs:DescribeExportTasks\",\n        \"logs:GetQueryResults\",\n        \"logs:ListTagsLogGroup\",\n        \"cloudwatch:GetMetricData\",\n        \"logs:DescribeLogStreams\",\n        \"s3:ListBucket\",\n        \"cloudwatch:DeleteAnomalyDetector\",\n        \"cloudwatch:ListMetrics\",\n        \"logs:GetLogDelivery\",\n        \"cloudwatch:DescribeAnomalyDetectors\",\n        \"s3:GetEncryptionConfiguration\",\n        \"ec2:DescribeNetworkInterfaces\",\n        \"ec2:DescribeNetworkInterfaceAttribute\",\n        \"cloudwatch:GetMetricWidgetImage\",\n        \"logs:DescribeResourcePolicies\",\n        \"logs:DescribeQueries\",\n        \"logs:DescribeLogGroups\",\n        \"logs:TestMetricFilter\",\n        \"logs:PutLogEvents\",\n        \"s3:ListStorageLensConfigurations\",\n        \"s3:ListAllMyBuckets\",\n        \"cloudwatch:ListMetricStreams\",\n        \"cloudtrail:ListPublicKeys\",\n        \"logs:GetLogGroupFields\",\n        \"logs:PutSubscriptionFilter\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:GetEncryptionConfiguration\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\",\n        \"s3:RestoreObject\",\n        \"s3:ListBucket\",\n        \"s3:DeleteObject\",\n        \"s3:GetBucketAcl\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::hydrovis-*-hml-*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*\",\n        \"arn:aws:s3:::hydrovis-*-hml-*/*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*/*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:*\",\n      \"Resource\": [\n        \"arn:aws:lambda:us-east-1:799732994462:event-source-mapping:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:codesigningconfig:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:function:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "hydrovis-viz-proc-pipeline-lambda",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPJ47VRRRGQ"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "HydroVISSSMPolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "HydrovisSSMInstanceProfileRole:HydroVISSSMPolicy",
            "name": "HydroVISSSMPolicy",
            "name_prefix": null,
            "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "HydrovisSSMInstanceProfileRole"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.data.template_file.HydroVISSSMPolicy-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "HydrovisESRISSMDeploy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "HydrovisESRISSMDeploy:HydrovisESRISSMDeploy",
            "name": "HydrovisESRISSMDeploy",
            "name_prefix": null,
            "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"ssm0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"ssm1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\":\"logging\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"tag:getResources\",\n        \"tag:getTagKeys\",\n        \"tag:getTagValues\",\n        \"resource-groups:Get*\",\n        \"resource-groups:List*\",\n        \"resource-groups:Search*\",\n        \"cloudformation:DescribeStacks\",\n        \"cloudformation:ListStackResources\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"elasticloadbalancing:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"cloudwatch:Describe*\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\":\"EC2ReadOnlyforLogging\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"autoscaling:Describe*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\":[\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\":\"*\"\n    },\n    {\n      \"Effect\":\"Allow\",\n      \"Action\": [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\" : \"*\" \n    },\t\t\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"devfimnwmsKMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GetPublicKey\",\n        \"kms:Decrypt\",\n        \"kms:UntagResource\",\n        \"kms:ListKeyPolicies\",\n        \"kms:ListRetirableGrants\",\n        \"kms:GetKeyPolicy\",\n        \"kms:ListResourceTags\",\n        \"kms:ListGrants\",\n        \"kms:GetParametersForImport\",\n        \"kms:TagResource\",\n        \"kms:GetKeyRotationStatus\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"SeeAllS3KMS\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:*\",\n        \"kms:DescribeCustomKeyStores\",\n        \"kms:ListKeys\",\n        \"kms:ListAliases\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PortalContent\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:Get*\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteObject\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-ptl-content\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GISServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gis-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"ImageServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-img-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"GPServerCache\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketAcl\",\n        \"s3:GetObjectVersion\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache/*\",\n        \"arn:aws:s3:::hydrovis-uat-egis-us-east-1-gp-server-cache\",\n        \"arn:aws:kms:us-east-1:799732994462:key/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"sessionManagerLogging1\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Sid\" : \"AutoScaling\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachClassicLinkVpc\",\n        \"ec2:CancelSpotInstanceRequests\",\n        \"ec2:CreateFleet\",\n        \"ec2:CreateTags\",\n        \"ec2:DeleteTags\",\n        \"ec2:Describe*\",\n        \"ec2:DetachClassicLinkVpc\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:RequestSpotInstances\",\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"elasticloadbalancing:Register*\",\n        \"elasticloadbalancing:Deregister*\",\n        \"elasticloadbalancing:Describe*\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"sns:Publish\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"PackerIAMPassRole\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"iam:PassRole\",\n        \"iam:GetInstanceProfile\"\n      ],\n      \"Resource\" : [\n        \"*\"\n      ]\n    },\n    {\n      \"Sid\" : \"PackerDeploy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2:AttachVolume\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:CopyImage\",\n        \"ec2:CreateImage\",\n        \"ec2:CreateKeypair\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:CreateSnapshot\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteKeyPair\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:DeleteSnapshot\",\n        \"ec2:DeleteVolume\",\n        \"ec2:DeregisterImage\",\n        \"ec2:DescribeImageAttribute\",\n        \"ec2:DescribeImages\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:DescribeRegions\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeSnapshots\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeTags\",\n        \"ec2:DescribeVolumes\",\n        \"ec2:DetachVolume\",\n        \"ec2:GetPasswordData\",\n        \"ec2:ModifyImageAttribute\",\n        \"ec2:ModifyInstanceAttribute\",\n        \"ec2:ModifySnapshotAttribute\",\n        \"ec2:RegisterImage\",\n        \"ec2:RunInstances\",\n        \"ec2:StopInstances\",\n        \"ec2:TerminateInstances\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}\n",
            "role": "HydrovisESRISSMDeploy"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.data.template_file.HydrovisESRISSMDeploy-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "Hydroviz-RnR-EC2-Profile-SSM-policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "Hydroviz-RnR-EC2-Profile:HydroVISSSMPolicy",
            "name": "HydroVISSSMPolicy",
            "name_prefix": null,
            "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "Hydroviz-RnR-EC2-Profile"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.data.template_file.HydroVISSSMPolicy-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "hydrovis-hml-ingest-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hydrovis-uat-hml-ingest-role:hydrovis-hml-ingest-role",
            "name": "hydrovis-hml-ingest-role",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:PassRole\",\n        \"secretsmanager:GetSecretValue\",\n        \"rds:DescribeDBInstances\"\n      ],\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:db:*\",\n        \"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\n        \"arn:aws:secretsmanager:us-east-1:799732994462:secret:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:CreateNetworkInterface\",\n        \"ec2:DeleteNetworkInterface\",\n        \"ec2:AttachNetworkInterface\",\n        \"ec2:DescribeNetworkInterfaces\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:DescribeDBInstances\",\n      \"Resource\": \"arn:aws:rds:us-east-1:799732994462:db:*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListAccessPointsForObjectLambda\",\n        \"s3:GetAccessPoint\",\n        \"rds:DeleteInstallationMedia\",\n        \"rds:CreateCustomAvailabilityZone\",\n        \"rds:DescribeDBEngineVersions\",\n        \"rds:CrossRegionCommunication\",\n        \"mq:ListBrokers\",\n        \"rds:DescribeExportTasks\",\n        \"rds:StartExportTask\",\n        \"s3:PutStorageLensConfiguration\",\n        \"rds:DescribeEngineDefaultParameters\",\n        \"rds:DescribeCustomAvailabilityZones\",\n        \"rds:DescribeReservedDBInstancesOfferings\",\n        \"rds:DeleteCustomAvailabilityZone\",\n        \"mq:CreateConfiguration\",\n        \"rds:ImportInstallationMedia\",\n        \"rds:DescribeEngineDefaultClusterParameters\",\n        \"rds:DescribeSourceRegions\",\n        \"rds:DescribeInstallationMedia\",\n        \"rds:CreateDBProxy\",\n        \"rds:DescribeEventCategories\",\n        \"mq:CreateBroker\",\n        \"rds:DescribeEvents\",\n        \"s3:PutAccountPublicAccessBlock\",\n        \"rds:CancelExportTask\",\n        \"s3:ListAccessPoints\",\n        \"s3:ListJobs\",\n        \"mq:DescribeBrokerEngineTypes\",\n        \"mq:DescribeBrokerInstanceOptions\",\n        \"s3:ListMultiRegionAccessPoints\",\n        \"mq:ListConfigurations\",\n        \"rds:DeleteDBInstanceAutomatedBackup\",\n        \"s3:ListStorageLensConfigurations\",\n        \"rds:ModifyCertificates\",\n        \"s3:GetAccountPublicAccessBlock\",\n        \"s3:ListAllMyBuckets\",\n        \"rds:DescribeOrderableDBInstanceOptions\",\n        \"rds:DescribeCertificates\",\n        \"s3:CreateJob\",\n        \"rds:DescribeAccountAttributes\",\n        \"secretsmanager:ListSecrets\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"rds:*\",\n      \"Resource\": [\n        \"arn:aws:rds:*:799732994462:cluster-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:db:hydrovis-uat-ingest\",\n        \"arn:aws:rds:*:799732994462:og:*\",\n        \"arn:aws:rds:*:799732994462:target-group:*\",\n        \"arn:aws:rds:*:799732994462:pg:*\",\n        \"arn:aws:rds:*:799732994462:es:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy:*\",\n        \"arn:aws:rds:*:799732994462:ri:*\",\n        \"arn:aws:rds:*:799732994462:snapshot:*\",\n        \"arn:aws:rds:*:799732994462:cluster-pg:*\",\n        \"arn:aws:rds:*:799732994462:cluster-snapshot:*\",\n        \"arn:aws:rds:*:799732994462:db-proxy-endpoint:*\",\n        \"arn:aws:rds:us-east-1:799732994462:cluster:*\",\n        \"arn:aws:rds:*:799732994462:subgrp:*\",\n        \"arn:aws:rds:*:799732994462:secgrp:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor4\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3-object-lambda:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:us-west-2:799732994462:async-request/mrap/*/*\",\n        \"arn:aws:s3:*:799732994462:accesspoint/*\",\n        \"arn:aws:s3:*:799732994462:job/*\",\n        \"arn:aws:s3:*:799732994462:storage-lens/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor5\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"mq:*\",\n      \"Resource\": [\n        \"arn:aws:mq:us-east-1:799732994462:configuration:*\",\n        \"arn:aws:mq:us-east-1:799732994462:broker:*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor6\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": \"arn:aws:s3::799732994462:accesspoint/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "hydrovis-uat-hml-ingest-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.data.template_file.hydrovis-hml-ingest-role-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "hydrovis-hml-ingest-role-SSM-policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hydrovis-uat-hml-ingest-role:HydroVISSSMPolicy",
            "name": "HydroVISSSMPolicy",
            "name_prefix": null,
            "policy": "{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"AmazonSSMManagedInstanceCore\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssm:DescribeAssociation\",\n        \"ssm:GetDeployablePatchSnapshotForInstance\",\n        \"ssm:GetDocument\",\n        \"ssm:DescribeDocument\",\n        \"ssm:GetManifest\",\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:ListAssociations\",\n        \"ssm:ListInstanceAssociations\",\n        \"ssm:PutInventory\",\n        \"ssm:PutComplianceItems\",\n        \"ssm:PutConfigurePackageResult\",\n        \"ssm:UpdateAssociationStatus\",\n        \"ssm:UpdateInstanceAssociationStatus\",\n        \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ec2messages:AcknowledgeMessage\",\n        \"ec2messages:DeleteMessage\",\n        \"ec2messages:FailMessage\",\n        \"ec2messages:GetEndpoint\",\n        \"ec2messages:GetMessages\",\n        \"ec2messages:SendReply\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Sid\" : \"HydroVISSSMPolicy\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"ssmmessages:CreateControlChannel\",\n        \"ssmmessages:CreateDataChannel\",\n        \"ssmmessages:OpenControlChannel\",\n        \"ssmmessages:OpenDataChannel\",\n        \"ssm:DescribeSessions\",\n        \"ssm:UpdateInstanceInformation\",\n        \"ec2:describeInstances\",\n        \"ssm:DescribeInstanceProperties\",\n        \"ssm:TerminateSession\",\n        \"ssm:GetConnectionStatus\",\n        \"ssm:StartSession\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:GenerateDataKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\" : \"*\"\n    },\n    {\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetEncryptionConfiguration\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging\",\n        \"arn:aws:s3:::hydrovis-uat-session-manager-logging/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "hydrovis-uat-hml-ingest-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.data.template_file.HydroVISSSMPolicy-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "hydrovis-viz-proc-pipeline-lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hydrovis-viz-proc-pipeline-lambda:hydrovis-viz-proc-pipeline-lambda",
            "name": "hydrovis-viz-proc-pipeline-lambda",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:GetPublicKey\",\n        \"cloudwatch:PutDashboard\",\n        \"kms:Decrypt\",\n        \"iam:ListRoleTags\",\n        \"cloudwatch:DeleteAlarms\",\n        \"cloudtrail:GetTrailStatus\",\n        \"cloudwatch:DeleteInsightRules\",\n        \"kms:ListResourceTags\",\n        \"cloudwatch:StartMetricStreams\",\n        \"kms:GetParametersForImport\",\n        \"iam:PassRole\",\n        \"cloudwatch:DeleteDashboards\",\n        \"sns:Publish\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:UntagResource\",\n        \"cloudwatch:StopMetricStreams\",\n        \"kms:GetKeyRotationStatus\",\n        \"cloudwatch:DisableAlarmActions\",\n        \"cloudtrail:ListTags\",\n        \"cloudwatch:ListTagsForResource\",\n        \"kms:DescribeKey\",\n        \"ssm:GetParametersByPath\",\n        \"cloudwatch:DeleteMetricStream\",\n        \"cloudwatch:SetAlarmState\",\n        \"kms:ListKeyPolicies\",\n        \"cloudwatch:GetDashboard\",\n        \"kms:ListRetirableGrants\",\n        \"cloudwatch:GetInsightRuleReport\",\n        \"kms:GetKeyPolicy\",\n        \"cloudwatch:DisableInsightRules\",\n        \"cloudwatch:EnableInsightRules\",\n        \"cloudwatch:PutCompositeAlarm\",\n        \"kms:ListGrants\",\n        \"cloudwatch:PutMetricStream\",\n        \"cloudwatch:PutInsightRule\",\n        \"cloudwatch:TagResource\",\n        \"cloudwatch:PutMetricAlarm\",\n        \"cloudwatch:EnableAlarmActions\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:GetMetricStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-1:799732994462:parameter/*\",\n        \"arn:aws:iam::799732994462:role/*\",\n        \"arn:aws:sns:us-east-1:799732994462:*\",\n        \"arn:aws:cloudtrail:us-east-1:799732994462:trail/*\",\n        \"arn:aws:cloudwatch::799732994462:dashboard/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:alarm:*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:metric-stream/*\",\n        \"arn:aws:cloudwatch:us-east-1:799732994462:insight-rule/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:GetLogRecord\",\n        \"cloudwatch:PutMetricData\",\n        \"ec2:DescribeInstances\",\n        \"logs:DescribeSubscriptionFilters\",\n        \"logs:StartQuery\",\n        \"logs:DescribeMetricFilters\",\n        \"logs:ListLogDeliveries\",\n        \"logs:CreateLogStream\",\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:ListDashboards\",\n        \"ec2:DescribeVolumes\",\n        \"logs:GetLogEvents\",\n        \"cloudwatch:PutAnomalyDetector\",\n        \"logs:FilterLogEvents\",\n        \"s3:DeleteObject\",\n        \"logs:DescribeDestinations\",\n        \"cloudwatch:DescribeInsightRules\",\n        \"cloudtrail:GetTrail\",\n        \"ec2:CreateTags\",\n        \"s3:ListJobs\",\n        \"ec2:DeleteNetworkInterface\",\n        \"logs:StopQuery\",\n        \"cloudwatch:GetMetricStatistics\",\n        \"logs:CreateLogGroup\",\n        \"cloudtrail:DescribeTrails\",\n        \"ec2:CreateNetworkInterface\",\n        \"logs:DescribeExportTasks\",\n        \"logs:GetQueryResults\",\n        \"logs:ListTagsLogGroup\",\n        \"cloudwatch:GetMetricData\",\n        \"logs:DescribeLogStreams\",\n        \"s3:ListBucket\",\n        \"cloudwatch:DeleteAnomalyDetector\",\n        \"cloudwatch:ListMetrics\",\n        \"logs:GetLogDelivery\",\n        \"cloudwatch:DescribeAnomalyDetectors\",\n        \"s3:GetEncryptionConfiguration\",\n        \"ec2:DescribeNetworkInterfaces\",\n        \"ec2:DescribeNetworkInterfaceAttribute\",\n        \"cloudwatch:GetMetricWidgetImage\",\n        \"logs:DescribeResourcePolicies\",\n        \"logs:DescribeQueries\",\n        \"logs:DescribeLogGroups\",\n        \"logs:TestMetricFilter\",\n        \"logs:PutLogEvents\",\n        \"s3:ListStorageLensConfigurations\",\n        \"s3:ListAllMyBuckets\",\n        \"cloudwatch:ListMetricStreams\",\n        \"cloudtrail:ListPublicKeys\",\n        \"logs:GetLogGroupFields\",\n        \"logs:PutSubscriptionFilter\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:GetEncryptionConfiguration\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\",\n        \"s3:RestoreObject\",\n        \"s3:ListBucket\",\n        \"s3:DeleteObject\",\n        \"s3:GetBucketAcl\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::hydrovis-*-hml-*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*\",\n        \"arn:aws:s3:::hydrovis-*-hml-*/*\",\n        \"arn:aws:s3:::hydrovis-*-fim-*/*\",\n        \"arn:aws:s3:::hydrovis-*-nwm-*/*\"\n      ]\n    },\n    {\n      \"Sid\": \"VisualEditor3\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"lambda:*\",\n      \"Resource\": [\n        \"arn:aws:lambda:us-east-1:799732994462:event-source-mapping:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:codesigningconfig:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:function:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*\",\n        \"arn:aws:lambda:us-east-1:799732994462:layer:*:*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\",\n          \"ssm:UpdateInstanceInformation\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"s3:GetEncryptionConfiguration\"\n        ],\n        \"Resource\": \"*\"\n    },\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": \"kms:GenerateDataKey\",\n        \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "hydrovis-viz-proc-pipeline-lambda"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.data.template_file.hydrovis-viz-proc-pipeline-lambda-template"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "hydrovis-hml-ingest-role-lambda-execute-policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hydrovis-uat-hml-ingest-role-20211020172325841400000001",
            "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            "role": "hydrovis-uat-hml-ingest-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.iam-roles",
      "mode": "managed",
      "type": "aws_iam_service_linked_role",
      "name": "autoscaling",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis",
            "aws_service_name": "autoscaling.amazonaws.com",
            "create_date": "2021-09-15T17:13:03Z",
            "custom_suffix": "hvegis",
            "description": "",
            "id": "arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis",
            "name": "AWSServiceRoleForAutoScaling_hvegis",
            "path": "/aws-service-role/autoscaling.amazonaws.com/",
            "unique_id": "AROA3UM6NCGPIVJ6LNHEU"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.ingest_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "hml_reciever",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:HML_Receiver__uat",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "HML receiver function that updates PostgreSQL and RabbitMQ about incoming file",
            "environment": [
              {
                "variables": {
                  "DB": "rfcfcst",
                  "DBHOST": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
                  "DBPASSWORD": "J9SabmtesQFUF5O50t2o8O3Cb",
                  "DBPORT": "5432",
                  "DBUSER": "rfc_fcst_user",
                  "FDIRECTORY": "",
                  "FHOST": "",
                  "LOG_FORMAT": "[ELASTICSEARCH %%(levelname)s]:  %%(asctime)s - %%(message)s",
                  "OACCESSKEY": "",
                  "OBUCKET": "",
                  "OHOST": "",
                  "OPORT": "",
                  "OSECRETKEY": "",
                  "RHOST": "b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com",
                  "RPASSWORD": "J9SabmtesQFUF5O50t2o8O3Cb",
                  "RPORT": "5671",
                  "RSCHEME": "amqps",
                  "RUSERNAME": "rfc_fcst_user",
                  "RVIRTUALHOST": "user_acceptance_testing"
                }
              }
            ],
            "file_system_config": [],
            "filename": null,
            "function_name": "HML_Receiver__uat",
            "handler": "hml_receiver.lambda_function",
            "id": "HML_Receiver__uat",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:HML_Receiver__uat/invocations",
            "kms_key_arn": "",
            "last_modified": "2021-12-22T15:59:02.950+0000",
            "layers": [
              "arn:aws:lambda:us-east-1:799732994462:layer:psycopg2_uat:3",
              "arn:aws:lambda:us-east-1:799732994462:layer:pika_uat:2",
              "arn:aws:lambda:us-east-1:799732994462:layer:sqlalchemy_uat:2"
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:HML_Receiver__uat:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role",
            "runtime": "python3.8",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "ingest/lambda/HML_receiver_lambda.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "lKzAf9+yZJUODPVvvIaiKC1VOU8oDrIR5QUxfCRiOfo=",
            "source_code_size": 20261,
            "tags": {
              "Name": "HML_Receiver__uat"
            },
            "tags_all": {
              "Name": "HML_Receiver__uat",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": [
              {
                "security_group_ids": [
                  "sg-05068fed65f00bff2"
                ],
                "subnet_ids": [
                  "subnet-002c2ed1565d4579d",
                  "subnet-04914abb2085ae5dd"
                ],
                "vpc_id": "vpc-0a52d5a43a8da3c6c"
              }
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "DBPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "DBUSER",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "RHOST",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "RPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "RPORT",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "RUSERNAME",
                  "type": "string"
                }
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.secrets-manager.module.secret.random_password.password",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a"
          ]
        }
      ]
    },
    {
      "module": "module.ingest_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "backup_bucket_permissions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "HML_Receiver__uat",
            "id": "terraform-20211222155902378200000001",
            "principal": "s3.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::hydrovis-uat-hml-backup-us-east-1",
            "statement_id": "terraform-20211222155902378200000001",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_vpc.main",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.ingest_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "primary_bucket_permissions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "HML_Receiver__uat",
            "id": "terraform-2021102919014693220000001b",
            "principal": "s3.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::hydrovis-uat-hml-us-east-1",
            "statement_id": "terraform-2021102919014693220000001b",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.ingest_lambda_functions",
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "backup_bucket_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-hml-backup-us-east-1",
            "id": "hydrovis-uat-hml-backup-us-east-1",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "",
                "filter_suffix": "",
                "id": "tf-s3-lambda-20211222155902948100000002",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:799732994462:function:HML_Receiver__uat"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.ingest_lambda_functions.aws_lambda_permission.backup_bucket_permissions",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.ingest_lambda_functions",
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "primary_bucket_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-hml-us-east-1",
            "id": "hydrovis-uat-hml-us-east-1",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "",
                "filter_suffix": "",
                "id": "tf-s3-lambda-20211029190148320800000022",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:799732994462:function:HML_Receiver__uat"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.ingest_lambda_functions.aws_lambda_permission.primary_bucket_permissions",
            "module.security-groups.aws_security_group.hydrovis-RDS"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"egis\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-egis-us-east-1",
            "id": "alias/hydrovis-uat-egis-us-east-1",
            "name": "alias/hydrovis-uat-egis-us-east-1",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
            "target_key_id": "aa5b0ac1-8373-4333-a1a3-5956a9a80f2d"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_key.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"egis\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for egis",
            "enable_key_rotation": true,
            "id": "aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
            "is_enabled": true,
            "key_id": "aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"encrypt-ec2\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-encrypt-ec2-us-east-1",
            "id": "alias/hydrovis-uat-encrypt-ec2-us-east-1",
            "name": "alias/hydrovis-uat-encrypt-ec2-us-east-1",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
            "target_key_id": "5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_key.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"encrypt-ec2\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for encrypt-ec2",
            "enable_key_rotation": true,
            "id": "5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
            "is_enabled": true,
            "key_id": "5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"rds-ingest\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-rds-ingest-us-east-1",
            "id": "alias/hydrovis-uat-rds-ingest-us-east-1",
            "name": "alias/hydrovis-uat-rds-ingest-us-east-1",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/ccba4716-88b0-4d63-9d17-2e8a8512baa6",
            "target_key_id": "ccba4716-88b0-4d63-9d17-2e8a8512baa6"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.kms.module.key[\"rds-ingest\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/ccba4716-88b0-4d63-9d17-2e8a8512baa6",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for rds-ingest",
            "enable_key_rotation": true,
            "id": "ccba4716-88b0-4d63-9d17-2e8a8512baa6",
            "is_enabled": true,
            "key_id": "ccba4716-88b0-4d63-9d17-2e8a8512baa6",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"},{\"Action\":\"kms:CreateGrant\",\"Condition\":{\"Bool\":{\"kms:GrantIsForAWSResource\":\"true\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling_hvegis\"},\"Resource\":\"*\",\"Sid\":\"Allow attachment of persistent resources\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "arcgis_python_api",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:arcgis_python_api_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:43.815+0000",
            "description": "ArcGIS Python API module",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:arcgis_python_api_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:arcgis_python_api_uat",
            "layer_name": "arcgis_python_api_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/arcgis_python_api.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "B4ITKWGLkfk8w5BAc3XkLC9jfIsdzeReaa96Eh0awgI=",
            "source_code_size": 9805697,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "es_logging",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:31:30.908+0000",
            "description": "Custom logger that formats logs for AWS elasticsearch ingest",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat",
            "layer_name": "es_logging_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/es_logging.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "MwjRKGH9pNI7X0u6COI8fSW7axNwZxj8khb98lOmoA0=",
            "source_code_size": 499,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "mrf_rasterio",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:mrf_rasterio_uat:4",
            "compatible_runtimes": [
              "python3.6"
            ],
            "created_date": "2021-10-29T18:31:03.827+0000",
            "description": "Rasterio python package with MRF enabled",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:mrf_rasterio_uat:4",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:mrf_rasterio_uat",
            "layer_name": "mrf_rasterio_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/mrf_rasterio.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "FJSy4fgq1fgRnW5nebzsa7LlepX++HZRCFZOu17MTYk=",
            "source_code_size": 36470314,
            "version": "4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "multiprocessing",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:multiprocessing_uat:4",
            "compatible_runtimes": [
              "python3.6",
              "python3.7"
            ],
            "created_date": "2021-10-29T18:30:51.266+0000",
            "description": "Multiprocessing python package",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:multiprocessing_uat:4",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:multiprocessing_uat",
            "layer_name": "multiprocessing_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/multiprocessing.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "JT0NXhOuGteKYIgi+CCyvn6wDPLERMDEKY14zQKNUQM=",
            "source_code_size": 63190,
            "version": "4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "pandas",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:pandas_uat:4",
            "compatible_runtimes": [
              "python3.6",
              "python3.7"
            ],
            "created_date": "2021-10-29T18:30:54.433+0000",
            "description": "pandas python package",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:pandas_uat:4",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:pandas_uat",
            "layer_name": "pandas_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/pandas.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "Jcx5ZJv5Dp/O1AyAKSsJErhbz7+vFLhCNoddkyIXxFM=",
            "source_code_size": 10395124,
            "version": "4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "pika",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:pika_uat:2",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:38.745+0000",
            "description": "Python pika module",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:pika_uat:2",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:pika_uat",
            "layer_name": "pika_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "ingest/lambda/layers/pika.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "EWTd9H4z+NtFaX2ySEr18tiv9Ux+zD1hEjFOZME2Pl4=",
            "source_code_size": 149446,
            "version": "2"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "psycopg2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:psycopg2_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:34.899+0000",
            "description": "psycopg2 python package",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:psycopg2_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:psycopg2_uat",
            "layer_name": "psycopg2_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/psycopg2.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "r5DjlmugeRlJsPiNJ42+H7wcJf/SDy4JAKrIOIYhs+w=",
            "source_code_size": 19106547,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "rasterio",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:rasterio_uat:7",
            "compatible_runtimes": [
              "python3.6"
            ],
            "created_date": "2021-10-29T18:30:58.237+0000",
            "description": "rasterio python package",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:rasterio_uat:7",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:rasterio_uat",
            "layer_name": "rasterio_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/rasterio.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "JMQAxwvbgAyARxwEmArDYex/J0SSEfDYIil2l0PaSWw=",
            "source_code_size": 35568007,
            "version": "7"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "sqlalchemy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:sqlalchemy_uat:2",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:34.749+0000",
            "description": "Python sqlalchemy module",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:sqlalchemy_uat:2",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:sqlalchemy_uat",
            "layer_name": "sqlalchemy_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "ingest/lambda/layers/sqlalchemy.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "N+ZU8WW6UCSTF8GUAQFDjnhHA5EnhFJx3Bi9iBJ02kQ=",
            "source_code_size": 1513888,
            "version": "2"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "viz_db_shared_funcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_db_shared_funcs_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:30.222+0000",
            "description": "Helper functions for accessing the viz DB",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:viz_db_shared_funcs_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_db_shared_funcs_uat",
            "layer_name": "viz_db_shared_funcs_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/viz_db_shared_funcs.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "MdzkHqcWGFiEZjausvLNn966iMxPku/Q8EbS+Vp0IZ0=",
            "source_code_size": 4112,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "viz_egis_shared_funcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_egis_shared_funcs_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:38.502+0000",
            "description": "Helper functions for accessing the viz EGIS",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:viz_egis_shared_funcs_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_egis_shared_funcs_uat",
            "layer_name": "viz_egis_shared_funcs_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/viz_egis_shared_funcs.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "sNvmEXNphjHIU85wcjxuwHC68ad31hNPg3DgUhUasvg=",
            "source_code_size": 1203,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "viz_lambda_shared_funcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-12-15T18:37:35.616+0000",
            "description": "Helper functions for general viz lambda functionality",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat",
            "layer_name": "viz_lambda_shared_funcs_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/viz_lambda_shared_funcs.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "9l+csOoPrnrM4b2zXbB1460RlGPd/kVHEmaVsalu9tc=",
            "source_code_size": 4661,
            "version": "5"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "viz_postprocess_shared_funcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_postprocess_shared_funcs_uat:3",
            "compatible_runtimes": [
              "python3.6",
              "python3.7",
              "python3.8"
            ],
            "created_date": "2021-10-29T18:30:42.761+0000",
            "description": "Helper functions for general viz postprocessing",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:viz_postprocess_shared_funcs_uat:3",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:viz_postprocess_shared_funcs_uat",
            "layer_name": "viz_postprocess_shared_funcs_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/viz_postprocess_shared_funcs.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "wOU2/Zb78g8HmSmmzcrnpVFLMK8Q3IRZTeLYNcKStgc=",
            "source_code_size": 1872,
            "version": "3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.lambda_layers",
      "mode": "managed",
      "type": "aws_lambda_layer_version",
      "name": "xarray",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:layer:xarray_uat:4",
            "compatible_runtimes": [
              "python3.7"
            ],
            "created_date": "2021-10-29T18:31:38.228+0000",
            "description": "xarray python package",
            "filename": null,
            "id": "arn:aws:lambda:us-east-1:799732994462:layer:xarray_uat:4",
            "layer_arn": "arn:aws:lambda:us-east-1:799732994462:layer:xarray_uat",
            "layer_name": "xarray_uat",
            "license_info": "",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "lambda_layers/xarray.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "4HR/Me7HFLWDF0nqmOL+gdzx81QJ5dX/5FCBVtB9jW8=",
            "source_code_size": 41044431,
            "version": "4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_code",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "e370bafdc55e1f4f6187ac62cd2518789f146f93",
            "output_base64sha256": "c5lnSYXew0tWdsx8s0qXLvRIEKWn4sG0LjmaSzjnBOQ=",
            "output_file_mode": null,
            "output_md5": "1878c94628a27f7efacd52f33c9160bc",
            "output_path": "ELASTICSEARCH/lambda_code.zip",
            "output_sha": "e370bafdc55e1f4f6187ac62cd2518789f146f93",
            "output_size": 6573,
            "source": [],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": "ELASTICSEARCH/lambda_code",
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "aws_ami",
      "name": "linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-025b76b777024295e",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0a876d9af57e76134",
                  "throughput": "0",
                  "volume_size": "12",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-11-19T21:49:21.000Z",
            "description": "add docker for stig",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-amznlinux2-STIGD*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-025b76b777024295e",
            "image_id": "ami-025b76b777024295e",
            "image_location": "526904826677/hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0a876d9af57e76134",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "cloudinit_config",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "boundary": "MIMEBOUNDARY",
            "gzip": true,
            "id": "523176609",
            "part": [
              {
                "content": "#cloud-config\n{\"write_files\":[{\"content\":\"filter {\\n    if [hydrovis_application] == \\\"data_ingest\\\" {\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"logger: %{WORD:logger}, .*, level: %{WORD:logger_level} - %{GREEDYDATA:message}\\\"}\\n            overwrite =\\u003e [\\\"message\\\"]\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"%{WORD:logger}\\\\.py.*: %{WORD:logger_level}: %{GREEDYDATA:message}\\\"}\\n            overwrite =\\u003e [\\\"message\\\"]\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"%{WORD:logger}\\\\.sh.*: %{WORD:logger_level}: %{GREEDYDATA:message}\\\"}\\n            overwrite =\\u003e [\\\"message\\\"]\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Waiting for %{WORD:ingest_event} events from RabbitMQ\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Received an %{WORD:ingest_event} event message with id: %{NUMBER:ingest_event_id:int} and url: '%{GREEDYDATA:ingest_file}'\\\"}\\n            add_field =\\u003e { \\\"hml_ingest_process_status_code\\\" =\\u003e 1 }\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Processed file: '%{GREEDYDATA:ingest_file}' - forecasts extracted: %{NUMBER:hml_forecasts:int}\\\"}\\n            add_field =\\u003e { \\\"hml_ingest_process_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        if [ingest_file] {\\n            grok {\\n                match =\\u003e {\\\"ingest_file\\\" =\\u003e \\\"_HML%{GREEDYDATA:wfo}\\\\.\\\"}\\n            }\\n        }\\n            \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Parsing %{WORD:ingest_event} from wfo: %{WORD:wfo}, gage: %{WORD:gage}\\\"}\\n            add_field =\\u003e { \\\"xml_ingest_process_status_code\\\" =\\u003e 1 }\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"\\u003cForecastTimeSeries\\\\( generation_time: %{TIMESTAMP_ISO8601:forecast_generation_time}, issued_time: %{TIMESTAMP_ISO8601:forecast_issued_time}wfo:%{WORD:wfo}, gage: %{WORD:gage}, category: %{WORD:forecast_category}, name: %{WORD:forecast_type} \\\\)\\u003e\\\"}\\n            add_field =\\u003e { \\\"xml_ingest_process_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Inserting %{WORD:forecast_category} forecasts for gage: %{WORD:gage}\\\"}\\n            add_field =\\u003e { \\\"xml_ingest_process_status_code\\\" =\\u003e 3 }\\n        }\\n                    \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Removing records older than %{TIMESTAMP_ISO8601:ingest_cleaner_threshold} from table %{WORD:ingest_cleaner_table}\\\"}\\n            add_field =\\u003e { \\\"ingest_cleaner_process_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Removed %{WORD:ingest_records_cleaned:int} records from table %{WORD:ingest_cleaner_table}\\\"}\\n            add_field =\\u003e { \\\"ingest_cleaner_process_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Getting list of hours from %{GREEDYDATA:hml_s3_bucket}\\\"}\\n            add_field =\\u003e { \\\"ingest_backfill_process_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Latest time in %{GREEDYDATA:hml_s3_bucket} is %{GREEDYDATA:hml_s3_bucket_latest_date} %{NUMBER:hml_s3_bucket_latest_hour:int} UTC\\\"}\\n            add_field =\\u003e {\\\"hml_s3_bucket_latest_datetime\\\" =\\u003e \\\"%{hml_s3_bucket_latest_date}T%{hml_s3_bucket_latest_hour}\\\"}\\n            add_field =\\u003e { \\\"ingest_backfill_process_status_code\\\" =\\u003e 2 }\\n        }\\n                                        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Found %{NUMBER:hml_records_found:int} for (?\\u003chml_data_year\\u003e[\\\\d.]{4})(?\\u003chml_data_month\\u003e[\\\\d.]{2})(?\\u003chml_data_day\\u003e[\\\\d.]{2})(?\\u003chml_data_hour\\u003e[\\\\d.]{2}) in %{GREEDYDATA:hmml_s3_bucket}\\\"}\\n            add_field =\\u003e {\\\"hml_data_datetime\\\" =\\u003e \\\"%{hml_data_year}-%{hml_data_month}-%{hml_data_day}T%{hml_data_hour}\\\"}\\n            add_field =\\u003e { \\\"ingest_backfill_process_status_code\\\" =\\u003e 3 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Found %{NUMBER:hml_backfill_records_found:int} backfill entries\\\"}\\n            add_field =\\u003e { \\\"ingest_backfill_process_status_code\\\" =\\u003e 4 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Done processing\\\"}\\n            add_field =\\u003e { \\\"ingest_backfill_process_status_code\\\" =\\u003e 5 }\\n        }\\n\\n        mutate {\\n            convert =\\u003e {\\n                \\\"hml_ingest_process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"xml_ingest_process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"ingest_cleaner_process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"ingest_backfill_process_status_code\\\" =\\u003e \\\"integer\\\"\\n            }\\n        }\\n    }\\n}\\n\\n#############\\n## Spin Up ##\\n#############\\n\\nfilter {\\n    if [hydrovis_application] == \\\"data_ingest\\\" and [programname] == \\\"cloud-init\\\" {\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up Rsyslog Configuration\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 1 }\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing System Dependencies\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 2 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing HML Ingester\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 3 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating HML Ingester Configs\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 4 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Building HML Ingester Dockers\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 5 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Spinning up HML Ingester Dockers\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 6 }\\n        }  \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Finished Setup\\\"}\\n            add_field =\\u003e { \\\"ingest_spinup_status_code\\\" =\\u003e 7 }\\n        }\\n    }\\n\\n    mutate {\\n        convert =\\u003e {\\n            \\\"ingest_spinup_status_code\\\" =\\u003e \\\"integer\\\"\\n        }\\n    }\\n}\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/parsers/data_ingest_logstash.conf\",\"permissions\":\"0777\"},{\"content\":\"filter {\\n    if [hydrovis_application] == \\\"data_services\\\" { \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e '\\\"GET /api/%{WORD:wrds_api}/(?\\u003cwrds_api_version\\u003e[^/]*)/%{WORD:wrds_api_scheme}/%{GREEDYDATA}\\\\\\\" %{NUMBER:wrds_api_response}'}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"\\\\[%{WORD:logger_level}\\\\] GET /api/\\\"}\\n        }\\n\\n        if [wrds_api_response] =~ /^2/ {\\n            mutate {\\n                add_field =\\u003e { \\\"logger_level\\\" =\\u003e \\\"INFO\\\" }\\n                add_field =\\u003e { \\\"wrds_api_success\\\" =\\u003e \\\"true\\\" }\\n            }\\n        } else if [wrds_api_response] =~ /^3/ {\\n            mutate {\\n                add_field =\\u003e { \\\"logger_level\\\" =\\u003e \\\"WARNING\\\" }\\n                add_field =\\u003e { \\\"wrds_api_success\\\" =\\u003e \\\"redirect\\\" }\\n            }\\n        } else if [wrds_api_response] =~ /^4/ or [wrds_api_response] =~ /^5/ {\\n            mutate {\\n                add_field =\\u003e { \\\"logger_level\\\" =\\u003e \\\"ERROR\\\" }\\n                add_field =\\u003e { \\\"wrds_api_success\\\" =\\u003e \\\"false\\\" }\\n            }\\n        }\\n\\n        mutate {\\n            convert =\\u003e {\\n                \\\"wrds_api_response\\\" =\\u003e \\\"integer\\\"\\n            }\\n        }\\n    }\\n}\\n\\n#############\\n## Spin Up ##\\n#############\\n\\nfilter {\\n    if [hydrovis_application] == \\\"data_services\\\" and [programname] == \\\"cloud-init\\\" {\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up Rsyslog Configuration\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 1 }\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Disabling Vlab Hostkey Requirement\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 2 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing System Dependencies\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 3 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up WRDS File Structure\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 4 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Cloning WRDS Infrastructure\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 5 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Building NGINX Docker\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 6 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Cloning Location API\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 7 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Building Location API Docker\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 8 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Cloning Forecast API V2.0\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 9 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Building Forecast API V2.0 Docker\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 10 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Cloning Forecast API V1.1\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 11 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Building Forecast API V1.1 Docker\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 12 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Restarting NGINX Docker\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 13 }\\n        }  \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Finished Setup\\\"}\\n            add_field =\\u003e { \\\"data_services_spinup_status_code\\\" =\\u003e 14 }\\n        }\\n    }\\n\\n    mutate {\\n        convert =\\u003e {\\n            \\\"data_services_spinup_status_code\\\" =\\u003e \\\"integer\\\"\\n        }\\n    }\\n}\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/parsers/data_services_logstash.conf\",\"permissions\":\"0777\"},{\"content\":\"input {\\n    udp {\\n        port =\\u003e 5001\\n        codec =\\u003e \\\"json\\\"\\n        type =\\u003e \\\"linux_ec2\\\"\\n    }\\n}\\n\\nfilter {\\n    if [hydrovis_application] == \\\"data_ingest\\\" {\\n        mutate {\\n            add_field =\\u003e { \\\"index_name\\\" =\\u003e \\\"hml\\\" }\\n        }\\n    } else if [hydrovis_application] == \\\"data_services\\\" {\\n        mutate {\\n            add_field =\\u003e { \\\"index_name\\\" =\\u003e \\\"data_services\\\" }\\n        }\\n    } else if [hydrovis_application] == \\\"replace_route\\\" {\\n        mutate {\\n            add_field =\\u003e { \\\"index_name\\\" =\\u003e \\\"rnr\\\" }\\n        }\\n    } else {\\n        mutate {\\n            add_field =\\u003e { \\\"index_name\\\" =\\u003e \\\"linux_ec2\\\" }\\n        }\\n    }\\n\\n    if [programname] in [\\\"dhclient\\\", \\\"run-parts(\\\", \\\"systemd\\\", \\\"systemd-logind\\\", \\\"anacron\\\", \\\"CROND\\\", \\\"chronyd\\\", \\\"ec2net\\\", \\\"ec2\\\", \\\"postfix\\\", \\\"sudo\\\", \\\"sshd\\\", \\\"useradd\\\", \\\"crontab\\\", \\\"kernel\\\"] {\\n        drop {}\\n    }\\n\\n    if [logger_level] == \\\"DEBUG\\\" {\\n        drop {}\\n    }\\n}\\n\\noutput {\\n    stdout {}\\n    if [type] == \\\"linux_ec2\\\" {\\n        amazon_es {\\n            hosts =\\u003e [\\\"vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com\\\"]\\n            region =\\u003e \\\"us-east-1\\\"\\n            aws_access_key_id =\\u003e ''\\n            aws_secret_access_key =\\u003e ''\\n            index =\\u003e \\\"%{index_name}-%{+YYYY.MM}\\\"\\n        }\\n    }\\n}\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/parsers/linux_ec2_logstash.conf\",\"permissions\":\"0777\"},{\"content\":\"filter {\\n    if [hydrovis_application] == \\\"replace_route\\\" {\\n        grok {\\n            match =\\u003e {\\\"message\\\" =\\u003e \\\"%{WORD:logger_level}    %{WORD}.py %{SPACE} %{NUMBER}  : %{GREEDYDATA:message}\\\"}\\n            overwrite =\\u003e [\\\"message\\\"]\\n        }\\n\\n        grok {\\n            match =\\u003e {\\\"message\\\" =\\u003e \\\"%{WORD:logger_level} %{WORD}.py %{SPACE} %{NUMBER}  : %{GREEDYDATA:message}\\\"}\\n            overwrite =\\u003e [\\\"message\\\"]\\n        }\\n\\n        mutate {\\n            gsub =\\u003e [ \\\"message\\\", \\\"#01\\\\d\\\", \\\" \\\" ]\\n        }\\n\\n        if [logger_level] in [\\\"FATAL\\\", \\\"ERROR\\\"] {\\n            mutate {\\n                add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 999 }\\n            }\\n        }\\n\\n\\n        ######################\\n        ## Main RnR Process ##\\n        ######################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"BEGINNING run_wrf_hydro\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Archiving old run instance directories at: '%{GREEDYDATA:run_instance_dir}' to: '%{GREEDYDATA:archive_dir}'\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Downloaded files for timestamp: %{TIMESTAMP_ISO8601:latest_data_time}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 3 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_action_forecasts\\\\(\\\\):   response = \\u003cResponse \\\\[%{NUMBER:forecast_api_response:int}\\\\]\\u003e\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 4 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecasts\\\\(\\\\):  conus_route_link_fpath = %{GREEDYDATA:conus_routelink_path}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 5 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_create_forecast_point_dict\\\\(\\\\):  Original list of lids length = %{NUMBER:total_forecast_points:int}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 6 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Succesfully generated route link file: %{GREEDYDATA:route_link_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 7 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"SUCCESSFULLY generated nudging params file: %{GREEDYDATA:nudging_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 8 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"LAKEPARM file successfully generated the subset file.  %{GREEDYDATA:lakeparm_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 9 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"GWBUCKPARM file successfully generated. %{GREEDYDATA:gwbuckparm_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 10 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"HYDRO_RST file successfully generated.  %{GREEDYDATA:hydro_rst_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 11 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Successfully generated FORCING file: %{GREEDYDATA:forcing_file}\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 12 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Finished creating %{NUMBER:forcing_file_count:int} FORCING files\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 13 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Beginning WRF-Hydro execution with command: %{GREEDYDATA:wfr_hydro_cmd} in directory: .*/(?\\u003clatest_data_year\\u003e[\\\\d.]{4})(?\\u003clatest_data_month\\u003e[\\\\d.]{2})(?\\u003clatest_data_day\\u003e[\\\\d.]{2})(?\\u003clatest_data_hour\\u003e[\\\\d.]{2})\\\"}\\n            add_field =\\u003e {\\\"latest_data_time\\\" =\\u003e \\\"%{latest_data_year}-%{latest_data_month}-%{latest_data_day} %{latest_data_hour}:00:00\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 14 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Beginning nwm output processing\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 15 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Finished processing nwm output\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 16 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"FINISHED run_wrf_hydro\\\"}\\n            add_field =\\u003e { \\\"rnr_process_status_code\\\" =\\u003e 17 }\\n        }\\n\\n        ####################################\\n        ## NWS LID Data Retrieval Process ##\\n        ####################################\\n\\n        grok {\\n            match =\\u003e {\\\"message\\\" =\\u003e \\\"_get_forecast_map_from_json_forecast\\\\(\\\\):  lid = %{WORD:nws_lid}\\\"}\\n            add_field =\\u003e { \\\"nws_lid_process_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e {\\\"message\\\" =\\u003e \\\"No rating curve found for %{WORD:nws_lid}. Attempting to get official flow forecast...\\\"}\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_getStreamFlowInTimeWindowByLidURL\\\\(\\\\)  url = %{GREEDYDATA:streamflow_forecast_api_call}\\\"}\\n            add_field =\\u003e { \\\"nws_lid_process_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        if [streamflow_forecast_api_call] {\\n            grok {\\n                match =\\u003e { \\\"streamflow_forecast_api_call\\\" =\\u003e \\\"/nws_lid/%{WORD:nws_lid}/\\\"}\\n            }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"The latest flow forecast at %{WORD:nws_lid} has no values above 0. Skipping...\\\"}\\n            add_field =\\u003e { \\\"nws_lid_process_status_code\\\" =\\u003e 998 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"There is no flow forecast available at %{WORD:nws_lid} . Skipping...\\\"}\\n            add_field =\\u003e { \\\"nws_lid_process_status_code\\\" =\\u003e 998 }\\n        }\\n\\n        #######################\\n        ## General API Calls ##\\n        #######################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_getAllStageActionDataInWindowURL\\\\(\\\\) endTime =  %{TIMESTAMP_ISO8601:latest_data_time} windowInHours = %{NUMBER:forecast_api_window:int}  original url = %{GREEDYDATA:original_forecast_api_call}  newUrl = %{GREEDYDATA:forecast_api_call}\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Returned lid count = %{NUMBER:rating_curves_found:int} rating curves\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\" _get_rating_curves_map_inner\\\\(\\\\):  request = %{GREEDYDATA:rating_curve_api_call}  response = \\u003cResponse \\\\[%{NUMBER:rating_curve_api_response:int}\\\\]\\u003e\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_create_forecast_point_dict_inner\\\\(\\\\):   request = %{GREEDYDATA:location_metadata_api_call}  response = \\u003cResponse \\\\[%{NUMBER:location_metadata_api_response:int}\\\\]\\u003e\\\"}\\n        }\\n\\n        ##########################\\n        ## Non-action Forecasts ##\\n        ##########################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecasts\\\\(\\\\):  adding downstream_lid = %{WORD:nonaction_nws_lid}\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecasts\\\\(\\\\):   downstream_lid = %{WORD:nonaction_nws_lid} is already in the action_forecast_lids list, so it will not be added\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecast_chunks\\\\(\\\\):  This is a current hour run. URL = %{GREEDYDATA:nonaction_forecast_api_call}\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecast_chunks\\\\(\\\\):  response = \\u003cResponse \\\\[%{NUMBER:forecast_api_response:int}\\\\]\\u003e\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_get_nonaction_forecast_chunks\\\\(\\\\):  %{NUMBER:nonaction_forecasts_found:int} forecasts returned from  %{NUMBER:nonaction_forecasts_searched:int} nws location ids\\\"}\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"\\\\*\\\\*\\\\*\\\\* _get_nonaction_forecasts\\\\(\\\\):  After comparing with action forecast list, ended up with new %{NUMBER:nonaction_nws_lids:int} NWS lids\\\"}\\n        }\\n\\n        #########################\\n        ## Forecast Point Dict ##\\n        #########################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_create_forecast_point_dict_inner\\\\(\\\\):  lid = %{WORD:nws_lid}, is_rfc_defined_fcst_point = %{WORD:defined_fcst_point}\\\"}\\n            add_field =\\u003e { \\\"forecast_point_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"NWS LID \\\\\\\"%{WORD:nws_lid}\\\\\\\" is not found in %{GREEDYDATA:gages_map_csv}\\\"}\\n            add_field =\\u003e { \\\"lid_in_gages_map\\\" =\\u003e \\\"False\\\" }\\n        }\\n\\n        ###########\\n        ## Other ##\\n        ###########\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"_create_forecast_point_dict\\\\(\\\\):  Total processed lids = %{NUMBER:total_lids_processed:int}\\\"}\\n        }\\n\\n        #####################\\n        ## Field Mutations ##\\n        #####################\\n\\n        mutate {\\n            convert =\\u003e {\\n                \\\"rnr_process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"nws_lid_process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"forecast_point_status_code\\\" =\\u003e \\\"integer\\\"\\n            }\\n        }\\n\\n        date {\\n            match =\\u003e [ \\\"latest_data_time\\\", \\\"YYYY-MM-dd HH:mm:ss\\\" ]\\n            target =\\u003e \\\"latest_data_time\\\"\\n        }\\n\\n        if ![nws_lid] {\\n            mutate {\\n                remove_field =\\u003e [\\\"forecast_category\\\"]\\n            }\\n        }\\n    }\\n}\\n\\n#############\\n## Spin Up ##\\n#############\\n\\nfilter {\\n    if [hydrovis_application] == \\\"replace_route\\\" and [programname] == \\\"cloud-init\\\" {\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up Rsyslog Configuration\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 1 }\\n        }\\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up RNR Mount\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 2 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing System Dependencies\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 3 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing Python Dependencies\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 4 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating Permissions\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 5 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing WRF-Hydro Files\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 6 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing Replace and Route\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 7 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Installing RNR Dependencies\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 8 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Copying Static Resources\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 9 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating Libnetcdf Link\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 10 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up RNR File Structure\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 11 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Copying Rendered Template File to Replace and Route\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 12 }\\n        } \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Setting up RNR Crontab\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 13 }\\n        }  \\n        \\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Finished Setup\\\"}\\n            add_field =\\u003e { \\\"rnr_spinup_status_code\\\" =\\u003e 14 }\\n        } \\n    }\\n\\n    mutate {\\n        convert =\\u003e {\\n            \\\"rnr_spinup_status_code\\\" =\\u003e \\\"integer\\\"\\n        }\\n    }\\n}\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/parsers/rnr_logstash.conf\",\"permissions\":\"0777\"},{\"content\":\"input {\\n    tcp {\\n        port =\\u003e 5000\\n        type =\\u003e \\\"viz\\\"\\n    }\\n}\\n\\nfilter {\\n    ###################\\n    # Message parsers #\\n    ###################\\n    if [type] == \\\"viz\\\" {\\n        json {\\n            source =\\u003e \\\"message\\\"\\n            target =\\u003e \\\"logger_json\\\"\\n            remove_field =\\u003e \\\"message\\\"\\n        }\\n        mutate {\\n            rename =\\u003e { \\\"[logger_json][message]\\\" =\\u003e \\\"message\\\" }\\n        }\\n    }\\n}\\n\\nfilter {\\n\\n    ####################################\\n    # Process/Watcher/Pipeline Parsers #\\n    ####################################\\n\\n    if [type] == \\\"viz\\\" {\\n        grok {\\n            match =\\u003e {\\n                \\\"[logger_json][extra][logger_name]\\\" =\\u003e [\\n                    \\\"processing_pipeline\\\\.utils\\\\.process\\\\.%{GREEDYDATA:process}\\\",\\n                    \\\"processing_pipeline\\\\.watcher\\\\.%{GREEDYDATA:watcher}\\\",\\n                    \\\"processing_pipeline\\\\.manager\\\\.%{GREEDYDATA:pipeline}\\\",\\n                    \\\"processing_pipeline\\\\.launcher\\\\.%{GREEDYDATA:process}\\\",\\n                    \\\"process\\\\.%{GREEDYDATA:process}\\\",\\n                    \\\"watcher\\\\.%{GREEDYDATA:watcher}\\\",\\n                    \\\"manager\\\\.%{GREEDYDATA:pipeline}\\\",\\n                    \\\"launcher\\\\.%{GREEDYDATA:process}\\\"\\n                ]\\n            }\\n        }\\n\\n        grok {\\n            match =\\u003e {\\n                \\\"[logger_json][extra][logger_name]\\\" =\\u003e [\\n                    \\\"processing_pipeline\\\\.watcher\\\\.%{GREEDYDATA:process}\\\",\\n                    \\\"watcher\\\\.%{GREEDYDATA:process}\\\"\\n                ]\\n            }\\n        }\\n\\n        if [host] =~ /ip-10-27-4-...ec2.internal/ {\\n            mutate { add_field =\\u003e { \\\"viz_environment\\\" =\\u003e \\\"Development\\\" } }\\n        }\\n\\n        if [host] =~ /ip-10-26-150-...ec2.internal/ {\\n            mutate { add_field =\\u003e { \\\"viz_environment\\\" =\\u003e \\\"Staging\\\" } }\\n        }\\n\\n        ######################\\n        # Pipeline heartbeat #\\n        ######################\\n\\n        if [process] {\\n            grok {\\n                match =\\u003e { \\\"message\\\" =\\u003e \\\"Heartbeat\\\" }\\n                add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_heartbeat\\\" }\\n            }\\n        }\\n\\n        ##########################\\n        # Process/Watcher parser #\\n        ##########################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} by the %{GREEDYDATA:watcher} Watcher: %{GREEDYDATA:command}\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 0 }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 7 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 4 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e [\\\"process_status\\\", \\\"watcher_status\\\"] }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} by the %{GREEDYDATA:watcher} Watcher has exited\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 8 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 10 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        #######################\\n        # Process log parsers #\\n        #######################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Execute function called for %{TIMESTAMP_ISO8601:latest_data_time}[.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 1 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_tag =\\u003e [ \\\"processStarted\\\" ]\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Validating workspace for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 2 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 5 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Executing processing for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 3 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 6 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating data for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 4 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 7 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating portal item for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\"}\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 5 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 8 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Updating service properties for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 6 }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 9 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Successfully executed processing for %{TIMESTAMP_ISO8601:latest_data_time}[.]\\\" }\\n            add_field =\\u003e { \\\"process_status_code\\\" =\\u003e 7 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"latest_process_time\\\" }\\n            add_tag =\\u003e [ \\\"processFinished\\\" ]\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Processing for %{TIMESTAMP_ISO8601:latest_data_time} failed\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"EGIS Log[:] type=%{GREEDYDATA:egis_type}[,] time=%{GREEDYDATA:egis_time}[,] message=%{GREEDYDATA:egis_message}[,] machine=%{GREEDYDATA:egis_machine}\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"egis_log\\\" }\\n        }\\n\\n        elapsed {\\n            start_tag =\\u003e \\\"processStarted\\\"\\n            end_tag =\\u003e \\\"processFinished\\\"\\n            unique_id_field =\\u003e \\\"process\\\"\\n            timeout =\\u003e 6000\\n        }\\n\\n        #######################\\n        # Watcher log parsers #\\n        #######################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"A Watch for data corresponding to date %{TIMESTAMP_ISO8601:latest_data_time} will now begin.\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 0 }\\n        }\\n\\n         grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Sleeping for %{NUMBER} seconds until data is expected\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 0 }\\n        }\\n\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Attempting to locate/fetch a batch of %{NUMBER} resources for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 1 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"%{NUMBER:resources_fetched} of %{NUMBER:total_resources} resources for %{TIMESTAMP_ISO8601:latest_data_time} now available.\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"download_progress\\\" }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 2 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"All resources for %{TIMESTAMP_ISO8601:latest_data_time} now available.\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"process_status\\\" }\\n            add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 3 }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Polling files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 1 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"One or more files available for %{TIMESTAMP_ISO8601:latest_data_time}[.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 2 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Pulling one or more files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 3 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"All files available for %{TIMESTAMP_ISO8601:latest_data_time}[.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 4 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"latest_available_time\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Pulling all files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 5 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Successfully pulled all files for %{TIMESTAMP_ISO8601:latest_data_time}[.]\\\" }\\n            add_field =\\u003e { \\\"watcher_status_code\\\" =\\u003e 6 }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"watcher_status\\\" }\\n        }\\n\\n        grok {\\n          match =\\u003e { \\\"message\\\" =\\u003e \\\"The Watch for %{TIMESTAMP_ISO8601:latest_data_time} expired\\\" }\\n        }\\n\\n        grok {\\n          match =\\u003e { \\\"message\\\" =\\u003e \\\"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} exited with return code 1.\\\" }\\n        }\\n\\n        ##########################################\\n        # ArcGIS Server service recovery parsers #\\n        ##########################################\\n\\n        if [logger_json][extra][logger_name] == 'restart-arcgis-server-monitor' {\\n            mutate { add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"recover_monitor\\\" } }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"Triggering \\\" }\\n              add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"recover_monitor\\\" }\\n        }\\n\\n        #########################\\n        # Configuration parsers #\\n        #########################\\n\\n        grok {\\n            break_on_match =\\u003e false\\n            match =\\u003e {\\n                \\\"process\\\" =\\u003e \\\"(?\\u003cconfiguration\\u003e\\\\b\\\\w{3})_\\\"\\n                \\\"watcher\\\" =\\u003e \\\"(?\\u003cconfiguration\\u003e\\\\b\\\\w{3})_\\\"\\n                \\\"pipeline\\\" =\\u003e \\\"(?\\u003cconfiguration\\u003e\\\\b\\\\w{3})_\\\"\\n            }\\n        }\\n\\n        if ![configuration] {\\n            mutate { add_field =\\u003e { \\\"configuration\\\" =\\u003e \\\"xxx\\\" } }\\n        }\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"%{NUMBER:total_processes} processes are expected to be running.\\\" }\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"total_processes\\\" }\\n        }\\n\\n        if [logger_json][level] == 'ERROR' {\\n            mutate {\\n                add_field =\\u003e { \\\"service_status_code\\\" =\\u003e 999 }\\n                add_tag =\\u003e [\\\"shouldmail\\\"]\\n            }\\n        }\\n\\n        #################\\n        # Email parsers #\\n        #################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"email_group:%{GREEDYDATA:email_group}--email_title:%{GREEDYDATA:email_title}--email_body:%{GREEDYDATA:email_body}\\\" }\\n            add_tag =\\u003e [\\\"shouldmail\\\"]\\n        }\\n\\n        ##########################\\n        # Resource Usage parsers #\\n        ##########################\\n\\n        grok {\\n            match =\\u003e { \\\"message\\\" =\\u003e \\\"%{GREEDYDATA:resource_process} Viz Service %{GREEDYDATA:resource_type} Usage - %{NUMBER:resource_usage} %{GREEDYDATA:resource_unit}\\\"}\\n            add_field =\\u003e { \\\"metric_type\\\" =\\u003e \\\"viz_resource_usage\\\" }\\n        }\\n    }\\n}\\n\\nfilter {\\n    ###############################\\n    # Drop all unnecessary fields #\\n    ###############################\\n    if [type] == \\\"viz\\\" {\\n        mutate {\\n            rename =\\u003e { \\\"[logger_json][@timestamp]\\\" =\\u003e \\\"temp_timestamp\\\" }\\n            rename =\\u003e { \\\"[logger_json][level]\\\" =\\u003e \\\"temp_level\\\" }\\n            remove_field =\\u003e [\\\"logger_json\\\"]\\n        }\\n\\n        mutate {\\n            rename =\\u003e { \\\"temp_timestamp\\\" =\\u003e \\\"[logger_json][@timestamp]\\\" }\\n            rename =\\u003e { \\\"temp_level\\\" =\\u003e \\\"[logger_json][level]\\\" }\\n        }\\n\\n        #########################\\n        # Data type conversions #\\n        #########################\\n\\n        mutate {\\n            convert =\\u003e {\\n                \\\"process_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"watcher_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"total_resources\\\" =\\u003e \\\"integer\\\"\\n                \\\"resources_fetched\\\" =\\u003e \\\"integer\\\"\\n                \\\"service_status_code\\\" =\\u003e \\\"integer\\\"\\n                \\\"total_processes\\\" =\\u003e \\\"integer\\\"\\n            }\\n        }\\n    }\\n}\\n\\nfilter {\\n    #############################\\n    # Drop all unnecessary logs #\\n    #############################\\n    if [type] == \\\"viz\\\" {\\n        if ![metric_type] and [logger_json][level] == 'INFO' {\\n            drop { }\\n        }\\n    }\\n}\\n\\noutput {\\n    stdout {}\\n    if [type] == \\\"viz\\\" {\\n        amazon_es {\\n            hosts =\\u003e [\\\"vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com\\\"]\\n            region =\\u003e \\\"us-east-1\\\"\\n            aws_access_key_id =\\u003e ''\\n            aws_secret_access_key =\\u003e ''\\n            index =\\u003e \\\"nwmviz-%{+YYYY.MM}\\\"\\n        }\\n    }\\n}\\n\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/parsers/viz_logstash.conf\",\"permissions\":\"0777\"}]}\n",
                "content_type": "text/cloud-config",
                "filename": "cloud-config.yaml",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\n\nrpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\ncd /etc/yum.repos.d/\n\ncat \u003e logstash.repo \u003c\u003c EOF\n[logstash-7.x]\nname=Elastic repository for 7.x packages\nbaseurl=https://artifacts.elastic.co/packages/7.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md\nEOF\n\nyum -y install logstash-7.16.1\n\nusermod -a -G logstash ec2-user\n\nexport LS_JAVA_OPTS=\"-Xms1g -Xmx1g -XX:ParallelGCThreads=1\"\n\ncd /etc/logstash/conf.d\n\ncp /parsers/* .\n\n/usr/share/logstash/bin/logstash-plugin install logstash-filter-elapsed\n/usr/share/logstash/bin/logstash-plugin install --version 7.0.1 logstash-output-amazon_es\n\nmkdir ~/kibana_objects\ncd ~/kibana_objects\naws s3 cp --recursive s3://hydrovis-uat-deployment-us-east-1/monitoring/ .\nfor FILE in *; do curl -X POST \"https://vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com/_plugin/kibana/api/saved_objects/_import?overwrite=true\" -H \"kbn-xsrf: true\" --form file=@$FILE; done\n\nservice logstash start\n",
                "content_type": "text/x-shellscript",
                "filename": "startup.sh",
                "merge_type": ""
              }
            ],
            "rendered": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "template_file",
      "name": "LambdaforElasticsearch-template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "c4a52adf8a85ad2b9a90c53d80e8bb33449c70fac66db142b7be73b4c6be54bd",
            "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"es:DescribeReservedElasticsearchInstanceOfferings\",\n        \"es:DeletePackage\",\n        \"es:ListElasticsearchInstanceTypeDetails\",\n        \"es:ListDomainsForPackage\",\n        \"es:CreateElasticsearchServiceRole\",\n        \"es:UpdatePackage\",\n        \"es:RejectInboundCrossClusterSearchConnection\",\n        \"es:GetPackageVersionHistory\",\n        \"es:PurchaseReservedElasticsearchInstanceOffering\",\n        \"es:DeleteElasticsearchServiceRole\",\n        \"es:AcceptInboundCrossClusterSearchConnection\",\n        \"es:DescribeInboundCrossClusterSearchConnections\",\n        \"es:DescribeReservedElasticsearchInstances\",\n        \"es:ListDomainNames\",\n        \"es:CreatePackage\",\n        \"es:DescribePackages\",\n        \"es:DeleteInboundCrossClusterSearchConnection\",\n        \"es:ListElasticsearchInstanceTypes\",\n        \"es:DescribeOutboundCrossClusterSearchConnections\",\n        \"es:ListElasticsearchVersions\",\n        \"es:DescribeElasticsearchInstanceTypeLimits\",\n        \"es:DeleteOutboundCrossClusterSearchConnection\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"es:*\",\n      \"Resource\": \"arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis\"\n    }\n  ]\n}",
            "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"es:DescribeReservedElasticsearchInstanceOfferings\",\n        \"es:DeletePackage\",\n        \"es:ListElasticsearchInstanceTypeDetails\",\n        \"es:ListDomainsForPackage\",\n        \"es:CreateElasticsearchServiceRole\",\n        \"es:UpdatePackage\",\n        \"es:RejectInboundCrossClusterSearchConnection\",\n        \"es:GetPackageVersionHistory\",\n        \"es:PurchaseReservedElasticsearchInstanceOffering\",\n        \"es:DeleteElasticsearchServiceRole\",\n        \"es:AcceptInboundCrossClusterSearchConnection\",\n        \"es:DescribeInboundCrossClusterSearchConnections\",\n        \"es:DescribeReservedElasticsearchInstances\",\n        \"es:ListDomainNames\",\n        \"es:CreatePackage\",\n        \"es:DescribePackages\",\n        \"es:DeleteInboundCrossClusterSearchConnection\",\n        \"es:ListElasticsearchInstanceTypes\",\n        \"es:DescribeOutboundCrossClusterSearchConnections\",\n        \"es:ListElasticsearchVersions\",\n        \"es:DescribeElasticsearchInstanceTypeLimits\",\n        \"es:DeleteOutboundCrossClusterSearchConnection\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"es:*\",\n      \"Resource\": \"arn:aws:es:${region}:${account_id}:domain/monitoring-hydrovis\"\n    }\n  ]\n}",
            "vars": {
              "account_id": "799732994462",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "template_file",
      "name": "lambda_code_index_template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "5097b0e2c4681b9790295a57bf61d6ee92b46823b4f1b4410158ae49c3513f61",
            "rendered": "const viz_js = require(\"viz_js\");\n\n// v1.1.2\nvar https = require('https');\nvar zlib = require('zlib');\nvar crypto = require('crypto');\n\nvar endpoint = 'vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com';\n\n// Set this to true if you want to debug why data isn't making it to\n// your Elasticsearch cluster. This will enable logging of failed items\n// to CloudWatch Logs.\nvar logFailedResponses = true;\n\nexports.handler = function(input, context) {\n    // decode input from base64\n    var zippedInput = new Buffer.from(input.awslogs.data, 'base64');\n\n    // decompress the input\n    zlib.gunzip(zippedInput, function(error, buffer) {\n        if (error) { context.fail(error); return; }\n\n        // parse the input from JSON\n        var awslogsData = JSON.parse(buffer.toString('utf8'));\n\n        // transform the input to Elasticsearch documents\n        var elasticsearchBulkData = transform(awslogsData);\n\n        // skip control messages\n        if (!elasticsearchBulkData) {\n            console.log('Received a control message');\n            context.succeed('Control message handled successfully');\n            return;\n        }\n\n        // post documents to the Amazon Elasticsearch Service\n        post(elasticsearchBulkData, function(error, success, statusCode, failedItems) {\n            console.log('Response: ' + JSON.stringify({\n                \"statusCode\": statusCode\n            }));\n\n            if (error) {\n                logFailure(error, failedItems);\n                context.fail(JSON.stringify(error));\n            } else {\n                console.log('Success: ' + JSON.stringify(success));\n                context.succeed('Success');\n            }\n        });\n    });\n};\n\nfunction transform(payload) {\n    if (payload.messageType === 'CONTROL_MESSAGE') {\n        return null;\n    }\n\n    var bulkRequestBody = '';\n\n    payload.logEvents.forEach(function(logEvent) {\n        var timestamp = new Date(1 * logEvent.timestamp);\n\n        // index name format: cwl-YYYY.MM\n        var indexName = [\n            'cwl' + payload.logGroup.toLowerCase().split('/').join('-') + '-' + timestamp.getUTCFullYear(),              // year\n            ('0' + (timestamp.getUTCMonth() + 1)).slice(-2)  // month\n        ].join('.');\n\n        var source = buildSource(logEvent.message, logEvent.extractedFields);\n        source['@id'] = logEvent.id;\n        source['@timestamp'] = new Date(1 * logEvent.timestamp).toISOString();\n        source['@message'] = logEvent.message;\n        source['@owner'] = payload.owner;\n        source['@log_group'] = payload.logGroup;\n        source['@log_stream'] = payload.logStream;\n\n        source = viz_js.parse_viz_logs(source, payload.logGroup, logEvent.message)\n\n        var action = { \"index\": {} };\n        action.index._index = indexName;\n        action.index._type = payload.logGroup;\n        action.index._id = logEvent.id;\n\n        bulkRequestBody += [\n            JSON.stringify(action),\n            JSON.stringify(source),\n        ].join('\\n') + '\\n';\n    });\n    return bulkRequestBody;\n}\n\nfunction buildSource(message, extractedFields) {\n    if (extractedFields) {\n        var source = {};\n\n        for (var key in extractedFields) {\n            if (extractedFields.hasOwnProperty(key) \u0026\u0026 extractedFields[key]) {\n                var value = extractedFields[key];\n\n                if (isNumeric(value)) {\n                    source[key] = 1 * value;\n                    continue;\n                }\n\n                var jsonSubString = extractJson(value);\n                if (jsonSubString !== null) {\n                    source['$' + key] = JSON.parse(jsonSubString);\n                }\n\n                source[key] = value;\n            }\n        }\n        return source;\n    }\n\n    var jsonSubString = extractJson(message);\n    if (jsonSubString !== null) {\n        return JSON.parse(jsonSubString);\n    }\n\n    return {};\n}\n\nfunction extractJson(message) {\n    var jsonStart = message.indexOf('{');\n    if (jsonStart \u003c 0) return null;\n    var jsonSubString = message.substring(jsonStart);\n    return isValidJson(jsonSubString) ? jsonSubString : null;\n}\n\nfunction isValidJson(message) {\n    try {\n        JSON.parse(message);\n    } catch (e) { return false; }\n    return true;\n}\n\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) \u0026\u0026 isFinite(n);\n}\n\nfunction post(body, callback) {\n    var requestParams = buildRequest(endpoint, body);\n\n    var request = https.request(requestParams, function(response) {\n        var responseBody = '';\n        response.on('data', function(chunk) {\n            responseBody += chunk;\n        });\n\n        response.on('end', function() {\n            var info = JSON.parse(responseBody);\n            var failedItems;\n            var success;\n            var error;\n\n            if (response.statusCode \u003e= 200 \u0026\u0026 response.statusCode \u003c 299) {\n                failedItems = info.items.filter(function(x) {\n                    return x.index.status \u003e= 300;\n                });\n\n                success = {\n                    \"attemptedItems\": info.items.length,\n                    \"successfulItems\": info.items.length - failedItems.length,\n                    \"failedItems\": failedItems.length\n                };\n            }\n\n            if (response.statusCode !== 200 || info.errors === true) {\n                // prevents logging of failed entries, but allows logging\n                // of other errors such as access restrictions\n                delete info.items;\n                error = {\n                    statusCode: response.statusCode,\n                    responseBody: info\n                };\n            }\n\n            callback(error, success, response.statusCode, failedItems);\n        });\n    }).on('error', function(e) {\n        callback(e);\n    });\n    request.end(requestParams.body);\n}\n\nfunction buildRequest(endpoint, body) {\n    var endpointParts = endpoint.match(/^([^\\.]+)\\.?([^\\.]*)\\.?([^\\.]*)\\.amazonaws\\.com$/);\n    var region = endpointParts[2];\n    var service = endpointParts[3];\n    var datetime = (new Date()).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var date = datetime.substr(0, 8);\n    var kDate = hmac('AWS4' + process.env.AWS_SECRET_ACCESS_KEY, date);\n    var kRegion = hmac(kDate, region);\n    var kService = hmac(kRegion, service);\n    var kSigning = hmac(kService, 'aws4_request');\n\n    var request = {\n        host: endpoint,\n        method: 'POST',\n        path: '/_bulk',\n        body: body,\n        headers: {\n            'Content-Type': 'application/json',\n            'Host': endpoint,\n            'Content-Length': Buffer.byteLength(body),\n            'X-Amz-Security-Token': process.env.AWS_SESSION_TOKEN,\n            'X-Amz-Date': datetime\n        }\n    };\n\n    var canonicalHeaders = Object.keys(request.headers)\n        .sort(function(a, b) { return a.toLowerCase() \u003c b.toLowerCase() ? -1 : 1; })\n        .map(function(k) { return k.toLowerCase() + ':' + request.headers[k]; })\n        .join('\\n');\n\n    var signedHeaders = Object.keys(request.headers)\n        .map(function(k) { return k.toLowerCase(); })\n        .sort()\n        .join(';');\n\n    var canonicalString = [\n        request.method,\n        request.path, '',\n        canonicalHeaders, '',\n        signedHeaders,\n        hash(request.body, 'hex'),\n    ].join('\\n');\n\n    var credentialString = [ date, region, service, 'aws4_request' ].join('/');\n\n    var stringToSign = [\n        'AWS4-HMAC-SHA256',\n        datetime,\n        credentialString,\n        hash(canonicalString, 'hex')\n    ] .join('\\n');\n\n    request.headers.Authorization = [\n        'AWS4-HMAC-SHA256 Credential=' + process.env.AWS_ACCESS_KEY_ID + '/' + credentialString,\n        'SignedHeaders=' + signedHeaders,\n        'Signature=' + hmac(kSigning, stringToSign, 'hex')\n    ].join(', ');\n\n    return request;\n}\n\nfunction hmac(key, str, encoding) {\n    return crypto.createHmac('sha256', key).update(str, 'utf8').digest(encoding);\n}\n\nfunction hash(str, encoding) {\n    return crypto.createHash('sha256').update(str, 'utf8').digest(encoding);\n}\n\nfunction logFailure(error, failedItems) {\n    if (logFailedResponses) {\n        console.log('Error: ' + JSON.stringify(error, null, 2));\n\n        if (failedItems \u0026\u0026 failedItems.length \u003e 0) {\n            console.log(\"Failed Items: \" +\n                JSON.stringify(failedItems, null, 2));\n        }\n    }\n}\n",
            "template": "const viz_js = require(\"viz_js\");\n\n// v1.1.2\nvar https = require('https');\nvar zlib = require('zlib');\nvar crypto = require('crypto');\n\nvar endpoint = '${es_endpoint}';\n\n// Set this to true if you want to debug why data isn't making it to\n// your Elasticsearch cluster. This will enable logging of failed items\n// to CloudWatch Logs.\nvar logFailedResponses = true;\n\nexports.handler = function(input, context) {\n    // decode input from base64\n    var zippedInput = new Buffer.from(input.awslogs.data, 'base64');\n\n    // decompress the input\n    zlib.gunzip(zippedInput, function(error, buffer) {\n        if (error) { context.fail(error); return; }\n\n        // parse the input from JSON\n        var awslogsData = JSON.parse(buffer.toString('utf8'));\n\n        // transform the input to Elasticsearch documents\n        var elasticsearchBulkData = transform(awslogsData);\n\n        // skip control messages\n        if (!elasticsearchBulkData) {\n            console.log('Received a control message');\n            context.succeed('Control message handled successfully');\n            return;\n        }\n\n        // post documents to the Amazon Elasticsearch Service\n        post(elasticsearchBulkData, function(error, success, statusCode, failedItems) {\n            console.log('Response: ' + JSON.stringify({\n                \"statusCode\": statusCode\n            }));\n\n            if (error) {\n                logFailure(error, failedItems);\n                context.fail(JSON.stringify(error));\n            } else {\n                console.log('Success: ' + JSON.stringify(success));\n                context.succeed('Success');\n            }\n        });\n    });\n};\n\nfunction transform(payload) {\n    if (payload.messageType === 'CONTROL_MESSAGE') {\n        return null;\n    }\n\n    var bulkRequestBody = '';\n\n    payload.logEvents.forEach(function(logEvent) {\n        var timestamp = new Date(1 * logEvent.timestamp);\n\n        // index name format: cwl-YYYY.MM\n        var indexName = [\n            'cwl' + payload.logGroup.toLowerCase().split('/').join('-') + '-' + timestamp.getUTCFullYear(),              // year\n            ('0' + (timestamp.getUTCMonth() + 1)).slice(-2)  // month\n        ].join('.');\n\n        var source = buildSource(logEvent.message, logEvent.extractedFields);\n        source['@id'] = logEvent.id;\n        source['@timestamp'] = new Date(1 * logEvent.timestamp).toISOString();\n        source['@message'] = logEvent.message;\n        source['@owner'] = payload.owner;\n        source['@log_group'] = payload.logGroup;\n        source['@log_stream'] = payload.logStream;\n\n        source = viz_js.parse_viz_logs(source, payload.logGroup, logEvent.message)\n\n        var action = { \"index\": {} };\n        action.index._index = indexName;\n        action.index._type = payload.logGroup;\n        action.index._id = logEvent.id;\n\n        bulkRequestBody += [\n            JSON.stringify(action),\n            JSON.stringify(source),\n        ].join('\\n') + '\\n';\n    });\n    return bulkRequestBody;\n}\n\nfunction buildSource(message, extractedFields) {\n    if (extractedFields) {\n        var source = {};\n\n        for (var key in extractedFields) {\n            if (extractedFields.hasOwnProperty(key) \u0026\u0026 extractedFields[key]) {\n                var value = extractedFields[key];\n\n                if (isNumeric(value)) {\n                    source[key] = 1 * value;\n                    continue;\n                }\n\n                var jsonSubString = extractJson(value);\n                if (jsonSubString !== null) {\n                    source['$' + key] = JSON.parse(jsonSubString);\n                }\n\n                source[key] = value;\n            }\n        }\n        return source;\n    }\n\n    var jsonSubString = extractJson(message);\n    if (jsonSubString !== null) {\n        return JSON.parse(jsonSubString);\n    }\n\n    return {};\n}\n\nfunction extractJson(message) {\n    var jsonStart = message.indexOf('{');\n    if (jsonStart \u003c 0) return null;\n    var jsonSubString = message.substring(jsonStart);\n    return isValidJson(jsonSubString) ? jsonSubString : null;\n}\n\nfunction isValidJson(message) {\n    try {\n        JSON.parse(message);\n    } catch (e) { return false; }\n    return true;\n}\n\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) \u0026\u0026 isFinite(n);\n}\n\nfunction post(body, callback) {\n    var requestParams = buildRequest(endpoint, body);\n\n    var request = https.request(requestParams, function(response) {\n        var responseBody = '';\n        response.on('data', function(chunk) {\n            responseBody += chunk;\n        });\n\n        response.on('end', function() {\n            var info = JSON.parse(responseBody);\n            var failedItems;\n            var success;\n            var error;\n\n            if (response.statusCode \u003e= 200 \u0026\u0026 response.statusCode \u003c 299) {\n                failedItems = info.items.filter(function(x) {\n                    return x.index.status \u003e= 300;\n                });\n\n                success = {\n                    \"attemptedItems\": info.items.length,\n                    \"successfulItems\": info.items.length - failedItems.length,\n                    \"failedItems\": failedItems.length\n                };\n            }\n\n            if (response.statusCode !== 200 || info.errors === true) {\n                // prevents logging of failed entries, but allows logging\n                // of other errors such as access restrictions\n                delete info.items;\n                error = {\n                    statusCode: response.statusCode,\n                    responseBody: info\n                };\n            }\n\n            callback(error, success, response.statusCode, failedItems);\n        });\n    }).on('error', function(e) {\n        callback(e);\n    });\n    request.end(requestParams.body);\n}\n\nfunction buildRequest(endpoint, body) {\n    var endpointParts = endpoint.match(/^([^\\.]+)\\.?([^\\.]*)\\.?([^\\.]*)\\.amazonaws\\.com$/);\n    var region = endpointParts[2];\n    var service = endpointParts[3];\n    var datetime = (new Date()).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var date = datetime.substr(0, 8);\n    var kDate = hmac('AWS4' + process.env.AWS_SECRET_ACCESS_KEY, date);\n    var kRegion = hmac(kDate, region);\n    var kService = hmac(kRegion, service);\n    var kSigning = hmac(kService, 'aws4_request');\n\n    var request = {\n        host: endpoint,\n        method: 'POST',\n        path: '/_bulk',\n        body: body,\n        headers: {\n            'Content-Type': 'application/json',\n            'Host': endpoint,\n            'Content-Length': Buffer.byteLength(body),\n            'X-Amz-Security-Token': process.env.AWS_SESSION_TOKEN,\n            'X-Amz-Date': datetime\n        }\n    };\n\n    var canonicalHeaders = Object.keys(request.headers)\n        .sort(function(a, b) { return a.toLowerCase() \u003c b.toLowerCase() ? -1 : 1; })\n        .map(function(k) { return k.toLowerCase() + ':' + request.headers[k]; })\n        .join('\\n');\n\n    var signedHeaders = Object.keys(request.headers)\n        .map(function(k) { return k.toLowerCase(); })\n        .sort()\n        .join(';');\n\n    var canonicalString = [\n        request.method,\n        request.path, '',\n        canonicalHeaders, '',\n        signedHeaders,\n        hash(request.body, 'hex'),\n    ].join('\\n');\n\n    var credentialString = [ date, region, service, 'aws4_request' ].join('/');\n\n    var stringToSign = [\n        'AWS4-HMAC-SHA256',\n        datetime,\n        credentialString,\n        hash(canonicalString, 'hex')\n    ] .join('\\n');\n\n    request.headers.Authorization = [\n        'AWS4-HMAC-SHA256 Credential=' + process.env.AWS_ACCESS_KEY_ID + '/' + credentialString,\n        'SignedHeaders=' + signedHeaders,\n        'Signature=' + hmac(kSigning, stringToSign, 'hex')\n    ].join(', ');\n\n    return request;\n}\n\nfunction hmac(key, str, encoding) {\n    return crypto.createHmac('sha256', key).update(str, 'utf8').digest(encoding);\n}\n\nfunction hash(str, encoding) {\n    return crypto.createHash('sha256').update(str, 'utf8').digest(encoding);\n}\n\nfunction logFailure(error, failedItems) {\n    if (logFailedResponses) {\n        console.log('Error: ' + JSON.stringify(error, null, 2));\n\n        if (failedItems \u0026\u0026 failedItems.length \u003e 0) {\n            console.log(\"Failed Items: \" +\n                JSON.stringify(failedItems, null, 2));\n        }\n    }\n}\n",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "template_file",
      "name": "parser_templates",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": "data_ingest_logstash.conf.template",
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "60892eec0e4b48ae036d211632a596f40f39fa00cf2cff7d18e75d56dec4f912",
            "rendered": "filter {\n    if [hydrovis_application] == \"data_ingest\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"logger: %{WORD:logger}, .*, level: %{WORD:logger_level} - %{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%{WORD:logger}\\.py.*: %{WORD:logger_level}: %{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%{WORD:logger}\\.sh.*: %{WORD:logger_level}: %{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Waiting for %{WORD:ingest_event} events from RabbitMQ\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Received an %{WORD:ingest_event} event message with id: %{NUMBER:ingest_event_id:int} and url: '%{GREEDYDATA:ingest_file}'\"}\n            add_field =\u003e { \"hml_ingest_process_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Processed file: '%{GREEDYDATA:ingest_file}' - forecasts extracted: %{NUMBER:hml_forecasts:int}\"}\n            add_field =\u003e { \"hml_ingest_process_status_code\" =\u003e 2 }\n        }\n\n        if [ingest_file] {\n            grok {\n                match =\u003e {\"ingest_file\" =\u003e \"_HML%{GREEDYDATA:wfo}\\.\"}\n            }\n        }\n            \n        grok {\n            match =\u003e { \"message\" =\u003e \"Parsing %{WORD:ingest_event} from wfo: %{WORD:wfo}, gage: %{WORD:gage}\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"\u003cForecastTimeSeries\\( generation_time: %{TIMESTAMP_ISO8601:forecast_generation_time}, issued_time: %{TIMESTAMP_ISO8601:forecast_issued_time}wfo:%{WORD:wfo}, gage: %{WORD:gage}, category: %{WORD:forecast_category}, name: %{WORD:forecast_type} \\)\u003e\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Inserting %{WORD:forecast_category} forecasts for gage: %{WORD:gage}\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 3 }\n        }\n                    \n        grok {\n            match =\u003e { \"message\" =\u003e \"Removing records older than %{TIMESTAMP_ISO8601:ingest_cleaner_threshold} from table %{WORD:ingest_cleaner_table}\"}\n            add_field =\u003e { \"ingest_cleaner_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Removed %{WORD:ingest_records_cleaned:int} records from table %{WORD:ingest_cleaner_table}\"}\n            add_field =\u003e { \"ingest_cleaner_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Getting list of hours from %{GREEDYDATA:hml_s3_bucket}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Latest time in %{GREEDYDATA:hml_s3_bucket} is %{GREEDYDATA:hml_s3_bucket_latest_date} %{NUMBER:hml_s3_bucket_latest_hour:int} UTC\"}\n            add_field =\u003e {\"hml_s3_bucket_latest_datetime\" =\u003e \"%{hml_s3_bucket_latest_date}T%{hml_s3_bucket_latest_hour}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 2 }\n        }\n                                        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Found %{NUMBER:hml_records_found:int} for (?\u003chml_data_year\u003e[\\d.]{4})(?\u003chml_data_month\u003e[\\d.]{2})(?\u003chml_data_day\u003e[\\d.]{2})(?\u003chml_data_hour\u003e[\\d.]{2}) in %{GREEDYDATA:hmml_s3_bucket}\"}\n            add_field =\u003e {\"hml_data_datetime\" =\u003e \"%{hml_data_year}-%{hml_data_month}-%{hml_data_day}T%{hml_data_hour}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Found %{NUMBER:hml_backfill_records_found:int} backfill entries\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 4 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Done processing\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 5 }\n        }\n\n        mutate {\n            convert =\u003e {\n                \"hml_ingest_process_status_code\" =\u003e \"integer\"\n                \"xml_ingest_process_status_code\" =\u003e \"integer\"\n                \"ingest_cleaner_process_status_code\" =\u003e \"integer\"\n                \"ingest_backfill_process_status_code\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"data_ingest\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing HML Ingester\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating HML Ingester Configs\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building HML Ingester Dockers\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Spinning up HML Ingester Dockers\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 6 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 7 }\n        }\n    }\n\n    mutate {\n        convert =\u003e {\n            \"ingest_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "template": "filter {\n    if [hydrovis_application] == \"data_ingest\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"logger: %%{WORD:logger}, .*, level: %%{WORD:logger_level} - %%{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%%{WORD:logger}\\.py.*: %%{WORD:logger_level}: %%{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%%{WORD:logger}\\.sh.*: %%{WORD:logger_level}: %%{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Waiting for %%{WORD:ingest_event} events from RabbitMQ\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Received an %%{WORD:ingest_event} event message with id: %%{NUMBER:ingest_event_id:int} and url: '%%{GREEDYDATA:ingest_file}'\"}\n            add_field =\u003e { \"hml_ingest_process_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Processed file: '%%{GREEDYDATA:ingest_file}' - forecasts extracted: %%{NUMBER:hml_forecasts:int}\"}\n            add_field =\u003e { \"hml_ingest_process_status_code\" =\u003e 2 }\n        }\n\n        if [ingest_file] {\n            grok {\n                match =\u003e {\"ingest_file\" =\u003e \"_HML%%{GREEDYDATA:wfo}\\.\"}\n            }\n        }\n            \n        grok {\n            match =\u003e { \"message\" =\u003e \"Parsing %%{WORD:ingest_event} from wfo: %%{WORD:wfo}, gage: %%{WORD:gage}\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"\u003cForecastTimeSeries\\( generation_time: %%{TIMESTAMP_ISO8601:forecast_generation_time}, issued_time: %%{TIMESTAMP_ISO8601:forecast_issued_time}wfo:%%{WORD:wfo}, gage: %%{WORD:gage}, category: %%{WORD:forecast_category}, name: %%{WORD:forecast_type} \\)\u003e\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Inserting %%{WORD:forecast_category} forecasts for gage: %%{WORD:gage}\"}\n            add_field =\u003e { \"xml_ingest_process_status_code\" =\u003e 3 }\n        }\n                    \n        grok {\n            match =\u003e { \"message\" =\u003e \"Removing records older than %%{TIMESTAMP_ISO8601:ingest_cleaner_threshold} from table %%{WORD:ingest_cleaner_table}\"}\n            add_field =\u003e { \"ingest_cleaner_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Removed %%{WORD:ingest_records_cleaned:int} records from table %%{WORD:ingest_cleaner_table}\"}\n            add_field =\u003e { \"ingest_cleaner_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Getting list of hours from %%{GREEDYDATA:hml_s3_bucket}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Latest time in %%{GREEDYDATA:hml_s3_bucket} is %%{GREEDYDATA:hml_s3_bucket_latest_date} %%{NUMBER:hml_s3_bucket_latest_hour:int} UTC\"}\n            add_field =\u003e {\"hml_s3_bucket_latest_datetime\" =\u003e \"%%{hml_s3_bucket_latest_date}T%%{hml_s3_bucket_latest_hour}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 2 }\n        }\n                                        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Found %%{NUMBER:hml_records_found:int} for (?\u003chml_data_year\u003e[\\d.]{4})(?\u003chml_data_month\u003e[\\d.]{2})(?\u003chml_data_day\u003e[\\d.]{2})(?\u003chml_data_hour\u003e[\\d.]{2}) in %%{GREEDYDATA:hmml_s3_bucket}\"}\n            add_field =\u003e {\"hml_data_datetime\" =\u003e \"%%{hml_data_year}-%%{hml_data_month}-%%{hml_data_day}T%%{hml_data_hour}\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Found %%{NUMBER:hml_backfill_records_found:int} backfill entries\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 4 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Done processing\"}\n            add_field =\u003e { \"ingest_backfill_process_status_code\" =\u003e 5 }\n        }\n\n        mutate {\n            convert =\u003e {\n                \"hml_ingest_process_status_code\" =\u003e \"integer\"\n                \"xml_ingest_process_status_code\" =\u003e \"integer\"\n                \"ingest_cleaner_process_status_code\" =\u003e \"integer\"\n                \"ingest_backfill_process_status_code\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"data_ingest\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing HML Ingester\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating HML Ingester Configs\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building HML Ingester Dockers\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Spinning up HML Ingester Dockers\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 6 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"ingest_spinup_status_code\" =\u003e 7 }\n        }\n    }\n\n    mutate {\n        convert =\u003e {\n            \"ingest_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
              "parser_name": "data_ingest_logstash.conf",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "data_services_logstash.conf.template",
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "cc1852c7f41767f8718e0bb2117d8272c588451c1816dce66ee421027299dd9f",
            "rendered": "filter {\n    if [hydrovis_application] == \"data_services\" { \n        grok {\n            match =\u003e { \"message\" =\u003e '\"GET /api/%{WORD:wrds_api}/(?\u003cwrds_api_version\u003e[^/]*)/%{WORD:wrds_api_scheme}/%{GREEDYDATA}\\\" %{NUMBER:wrds_api_response}'}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"\\[%{WORD:logger_level}\\] GET /api/\"}\n        }\n\n        if [wrds_api_response] =~ /^2/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"INFO\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"true\" }\n            }\n        } else if [wrds_api_response] =~ /^3/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"WARNING\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"redirect\" }\n            }\n        } else if [wrds_api_response] =~ /^4/ or [wrds_api_response] =~ /^5/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"ERROR\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"false\" }\n            }\n        }\n\n        mutate {\n            convert =\u003e {\n                \"wrds_api_response\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"data_services\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Disabling Vlab Hostkey Requirement\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up WRDS File Structure\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning WRDS Infrastructure\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building NGINX Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 6 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Location API\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 7 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Location API Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 8 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Forecast API V2.0\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 9 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Forecast API V2.0 Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 10 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Forecast API V1.1\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 11 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Forecast API V1.1 Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 12 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Restarting NGINX Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 13 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 14 }\n        }\n    }\n\n    mutate {\n        convert =\u003e {\n            \"data_services_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "template": "filter {\n    if [hydrovis_application] == \"data_services\" { \n        grok {\n            match =\u003e { \"message\" =\u003e '\"GET /api/%%{WORD:wrds_api}/(?\u003cwrds_api_version\u003e[^/]*)/%%{WORD:wrds_api_scheme}/%%{GREEDYDATA}\\\" %%{NUMBER:wrds_api_response}'}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"\\[%%{WORD:logger_level}\\] GET /api/\"}\n        }\n\n        if [wrds_api_response] =~ /^2/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"INFO\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"true\" }\n            }\n        } else if [wrds_api_response] =~ /^3/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"WARNING\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"redirect\" }\n            }\n        } else if [wrds_api_response] =~ /^4/ or [wrds_api_response] =~ /^5/ {\n            mutate {\n                add_field =\u003e { \"logger_level\" =\u003e \"ERROR\" }\n                add_field =\u003e { \"wrds_api_success\" =\u003e \"false\" }\n            }\n        }\n\n        mutate {\n            convert =\u003e {\n                \"wrds_api_response\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"data_services\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Disabling Vlab Hostkey Requirement\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up WRDS File Structure\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning WRDS Infrastructure\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building NGINX Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 6 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Location API\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 7 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Location API Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 8 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Forecast API V2.0\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 9 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Forecast API V2.0 Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 10 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Cloning Forecast API V1.1\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 11 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Building Forecast API V1.1 Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 12 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Restarting NGINX Docker\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 13 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"data_services_spinup_status_code\" =\u003e 14 }\n        }\n    }\n\n    mutate {\n        convert =\u003e {\n            \"data_services_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
              "parser_name": "data_services_logstash.conf",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "linux_ec2_logstash.conf.template",
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "140656dd2298180a560555911113a57bae19a53ed8709d9799ef84ebd825d8e6",
            "rendered": "input {\n    udp {\n        port =\u003e 5001\n        codec =\u003e \"json\"\n        type =\u003e \"linux_ec2\"\n    }\n}\n\nfilter {\n    if [hydrovis_application] == \"data_ingest\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"hml\" }\n        }\n    } else if [hydrovis_application] == \"data_services\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"data_services\" }\n        }\n    } else if [hydrovis_application] == \"replace_route\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"rnr\" }\n        }\n    } else {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"linux_ec2\" }\n        }\n    }\n\n    if [programname] in [\"dhclient\", \"run-parts(\", \"systemd\", \"systemd-logind\", \"anacron\", \"CROND\", \"chronyd\", \"ec2net\", \"ec2\", \"postfix\", \"sudo\", \"sshd\", \"useradd\", \"crontab\", \"kernel\"] {\n        drop {}\n    }\n\n    if [logger_level] == \"DEBUG\" {\n        drop {}\n    }\n}\n\noutput {\n    stdout {}\n    if [type] == \"linux_ec2\" {\n        amazon_es {\n            hosts =\u003e [\"vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com\"]\n            region =\u003e \"us-east-1\"\n            aws_access_key_id =\u003e ''\n            aws_secret_access_key =\u003e ''\n            index =\u003e \"%{index_name}-%{+YYYY.MM}\"\n        }\n    }\n}",
            "template": "input {\n    udp {\n        port =\u003e 5001\n        codec =\u003e \"json\"\n        type =\u003e \"linux_ec2\"\n    }\n}\n\nfilter {\n    if [hydrovis_application] == \"data_ingest\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"hml\" }\n        }\n    } else if [hydrovis_application] == \"data_services\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"data_services\" }\n        }\n    } else if [hydrovis_application] == \"replace_route\" {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"rnr\" }\n        }\n    } else {\n        mutate {\n            add_field =\u003e { \"index_name\" =\u003e \"linux_ec2\" }\n        }\n    }\n\n    if [programname] in [\"dhclient\", \"run-parts(\", \"systemd\", \"systemd-logind\", \"anacron\", \"CROND\", \"chronyd\", \"ec2net\", \"ec2\", \"postfix\", \"sudo\", \"sshd\", \"useradd\", \"crontab\", \"kernel\"] {\n        drop {}\n    }\n\n    if [logger_level] == \"DEBUG\" {\n        drop {}\n    }\n}\n\noutput {\n    stdout {}\n    if [type] == \"linux_ec2\" {\n        amazon_es {\n            hosts =\u003e [\"${es_endpoint}\"]\n            region =\u003e \"${region}\"\n            aws_access_key_id =\u003e ''\n            aws_secret_access_key =\u003e ''\n            index =\u003e \"%%{index_name}-%%{+YYYY.MM}\"\n        }\n    }\n}",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
              "parser_name": "linux_ec2_logstash.conf",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "rnr_logstash.conf.template",
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "66396ba65513f2675d37b883b9194d007a0ba3437bac678f61f04d7201241b4b",
            "rendered": "filter {\n    if [hydrovis_application] == \"replace_route\" {\n        grok {\n            match =\u003e {\"message\" =\u003e \"%{WORD:logger_level}    %{WORD}.py %{SPACE} %{NUMBER}  : %{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"%{WORD:logger_level} %{WORD}.py %{SPACE} %{NUMBER}  : %{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        mutate {\n            gsub =\u003e [ \"message\", \"#01\\d\", \" \" ]\n        }\n\n        if [logger_level] in [\"FATAL\", \"ERROR\"] {\n            mutate {\n                add_field =\u003e { \"rnr_process_status_code\" =\u003e 999 }\n            }\n        }\n\n\n        ######################\n        ## Main RnR Process ##\n        ######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"BEGINNING run_wrf_hydro\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Archiving old run instance directories at: '%{GREEDYDATA:run_instance_dir}' to: '%{GREEDYDATA:archive_dir}'\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Downloaded files for timestamp: %{TIMESTAMP_ISO8601:latest_data_time}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_action_forecasts\\(\\):   response = \u003cResponse \\[%{NUMBER:forecast_api_response:int}\\]\u003e\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 4 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):  conus_route_link_fpath = %{GREEDYDATA:conus_routelink_path}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 5 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict\\(\\):  Original list of lids length = %{NUMBER:total_forecast_points:int}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 6 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Succesfully generated route link file: %{GREEDYDATA:route_link_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 7 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"SUCCESSFULLY generated nudging params file: %{GREEDYDATA:nudging_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 8 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"LAKEPARM file successfully generated the subset file.  %{GREEDYDATA:lakeparm_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 9 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"GWBUCKPARM file successfully generated. %{GREEDYDATA:gwbuckparm_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 10 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"HYDRO_RST file successfully generated.  %{GREEDYDATA:hydro_rst_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 11 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully generated FORCING file: %{GREEDYDATA:forcing_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 12 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished creating %{NUMBER:forcing_file_count:int} FORCING files\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 13 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Beginning WRF-Hydro execution with command: %{GREEDYDATA:wfr_hydro_cmd} in directory: .*/(?\u003clatest_data_year\u003e[\\d.]{4})(?\u003clatest_data_month\u003e[\\d.]{2})(?\u003clatest_data_day\u003e[\\d.]{2})(?\u003clatest_data_hour\u003e[\\d.]{2})\"}\n            add_field =\u003e {\"latest_data_time\" =\u003e \"%{latest_data_year}-%{latest_data_month}-%{latest_data_day} %{latest_data_hour}:00:00\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 14 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Beginning nwm output processing\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 15 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished processing nwm output\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 16 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"FINISHED run_wrf_hydro\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 17 }\n        }\n\n        ####################################\n        ## NWS LID Data Retrieval Process ##\n        ####################################\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"_get_forecast_map_from_json_forecast\\(\\):  lid = %{WORD:nws_lid}\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"No rating curve found for %{WORD:nws_lid}. Attempting to get official flow forecast...\"}\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"_getStreamFlowInTimeWindowByLidURL\\(\\)  url = %{GREEDYDATA:streamflow_forecast_api_call}\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 2 }\n        }\n\n        if [streamflow_forecast_api_call] {\n            grok {\n                match =\u003e { \"streamflow_forecast_api_call\" =\u003e \"/nws_lid/%{WORD:nws_lid}/\"}\n            }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"The latest flow forecast at %{WORD:nws_lid} has no values above 0. Skipping...\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 998 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"There is no flow forecast available at %{WORD:nws_lid} . Skipping...\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 998 }\n        }\n\n        #######################\n        ## General API Calls ##\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_getAllStageActionDataInWindowURL\\(\\) endTime =  %{TIMESTAMP_ISO8601:latest_data_time} windowInHours = %{NUMBER:forecast_api_window:int}  original url = %{GREEDYDATA:original_forecast_api_call}  newUrl = %{GREEDYDATA:forecast_api_call}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Returned lid count = %{NUMBER:rating_curves_found:int} rating curves\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \" _get_rating_curves_map_inner\\(\\):  request = %{GREEDYDATA:rating_curve_api_call}  response = \u003cResponse \\[%{NUMBER:rating_curve_api_response:int}\\]\u003e\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict_inner\\(\\):   request = %{GREEDYDATA:location_metadata_api_call}  response = \u003cResponse \\[%{NUMBER:location_metadata_api_response:int}\\]\u003e\"}\n        }\n\n        ##########################\n        ## Non-action Forecasts ##\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):  adding downstream_lid = %{WORD:nonaction_nws_lid}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):   downstream_lid = %{WORD:nonaction_nws_lid} is already in the action_forecast_lids list, so it will not be added\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  This is a current hour run. URL = %{GREEDYDATA:nonaction_forecast_api_call}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  response = \u003cResponse \\[%{NUMBER:forecast_api_response:int}\\]\u003e\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  %{NUMBER:nonaction_forecasts_found:int} forecasts returned from  %{NUMBER:nonaction_forecasts_searched:int} nws location ids\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"\\*\\*\\*\\* _get_nonaction_forecasts\\(\\):  After comparing with action forecast list, ended up with new %{NUMBER:nonaction_nws_lids:int} NWS lids\"}\n        }\n\n        #########################\n        ## Forecast Point Dict ##\n        #########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict_inner\\(\\):  lid = %{WORD:nws_lid}, is_rfc_defined_fcst_point = %{WORD:defined_fcst_point}\"}\n            add_field =\u003e { \"forecast_point_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"NWS LID \\\"%{WORD:nws_lid}\\\" is not found in %{GREEDYDATA:gages_map_csv}\"}\n            add_field =\u003e { \"lid_in_gages_map\" =\u003e \"False\" }\n        }\n\n        ###########\n        ## Other ##\n        ###########\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict\\(\\):  Total processed lids = %{NUMBER:total_lids_processed:int}\"}\n        }\n\n        #####################\n        ## Field Mutations ##\n        #####################\n\n        mutate {\n            convert =\u003e {\n                \"rnr_process_status_code\" =\u003e \"integer\"\n                \"nws_lid_process_status_code\" =\u003e \"integer\"\n                \"forecast_point_status_code\" =\u003e \"integer\"\n            }\n        }\n\n        date {\n            match =\u003e [ \"latest_data_time\", \"YYYY-MM-dd HH:mm:ss\" ]\n            target =\u003e \"latest_data_time\"\n        }\n\n        if ![nws_lid] {\n            mutate {\n                remove_field =\u003e [\"forecast_category\"]\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"replace_route\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR Mount\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing Python Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating Permissions\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing WRF-Hydro Files\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 6 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing Replace and Route\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 7 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing RNR Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 8 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Copying Static Resources\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 9 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating Libnetcdf Link\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 10 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR File Structure\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 11 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Copying Rendered Template File to Replace and Route\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 12 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR Crontab\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 13 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 14 }\n        } \n    }\n\n    mutate {\n        convert =\u003e {\n            \"rnr_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "template": "filter {\n    if [hydrovis_application] == \"replace_route\" {\n        grok {\n            match =\u003e {\"message\" =\u003e \"%%{WORD:logger_level}    %%{WORD}.py %%{SPACE} %%{NUMBER}  : %%{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"%%{WORD:logger_level} %%{WORD}.py %%{SPACE} %%{NUMBER}  : %%{GREEDYDATA:message}\"}\n            overwrite =\u003e [\"message\"]\n        }\n\n        mutate {\n            gsub =\u003e [ \"message\", \"#01\\d\", \" \" ]\n        }\n\n        if [logger_level] in [\"FATAL\", \"ERROR\"] {\n            mutate {\n                add_field =\u003e { \"rnr_process_status_code\" =\u003e 999 }\n            }\n        }\n\n\n        ######################\n        ## Main RnR Process ##\n        ######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"BEGINNING run_wrf_hydro\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Archiving old run instance directories at: '%%{GREEDYDATA:run_instance_dir}' to: '%%{GREEDYDATA:archive_dir}'\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Downloaded files for timestamp: %%{TIMESTAMP_ISO8601:latest_data_time}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_action_forecasts\\(\\):   response = \u003cResponse \\[%%{NUMBER:forecast_api_response:int}\\]\u003e\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 4 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):  conus_route_link_fpath = %%{GREEDYDATA:conus_routelink_path}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 5 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict\\(\\):  Original list of lids length = %%{NUMBER:total_forecast_points:int}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 6 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Succesfully generated route link file: %%{GREEDYDATA:route_link_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 7 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"SUCCESSFULLY generated nudging params file: %%{GREEDYDATA:nudging_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 8 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"LAKEPARM file successfully generated the subset file.  %%{GREEDYDATA:lakeparm_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 9 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"GWBUCKPARM file successfully generated. %%{GREEDYDATA:gwbuckparm_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 10 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"HYDRO_RST file successfully generated.  %%{GREEDYDATA:hydro_rst_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 11 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully generated FORCING file: %%{GREEDYDATA:forcing_file}\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 12 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished creating %%{NUMBER:forcing_file_count:int} FORCING files\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 13 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Beginning WRF-Hydro execution with command: %%{GREEDYDATA:wfr_hydro_cmd} in directory: .*/(?\u003clatest_data_year\u003e[\\d.]{4})(?\u003clatest_data_month\u003e[\\d.]{2})(?\u003clatest_data_day\u003e[\\d.]{2})(?\u003clatest_data_hour\u003e[\\d.]{2})\"}\n            add_field =\u003e {\"latest_data_time\" =\u003e \"%%{latest_data_year}-%%{latest_data_month}-%%{latest_data_day} %%{latest_data_hour}:00:00\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 14 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Beginning nwm output processing\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 15 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished processing nwm output\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 16 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"FINISHED run_wrf_hydro\"}\n            add_field =\u003e { \"rnr_process_status_code\" =\u003e 17 }\n        }\n\n        ####################################\n        ## NWS LID Data Retrieval Process ##\n        ####################################\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"_get_forecast_map_from_json_forecast\\(\\):  lid = %%{WORD:nws_lid}\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e {\"message\" =\u003e \"No rating curve found for %%{WORD:nws_lid}. Attempting to get official flow forecast...\"}\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"_getStreamFlowInTimeWindowByLidURL\\(\\)  url = %%{GREEDYDATA:streamflow_forecast_api_call}\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 2 }\n        }\n\n        if [streamflow_forecast_api_call] {\n            grok {\n                match =\u003e { \"streamflow_forecast_api_call\" =\u003e \"/nws_lid/%%{WORD:nws_lid}/\"}\n            }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"The latest flow forecast at %%{WORD:nws_lid} has no values above 0. Skipping...\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 998 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"There is no flow forecast available at %%{WORD:nws_lid} . Skipping...\"}\n            add_field =\u003e { \"nws_lid_process_status_code\" =\u003e 998 }\n        }\n\n        #######################\n        ## General API Calls ##\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_getAllStageActionDataInWindowURL\\(\\) endTime =  %%{TIMESTAMP_ISO8601:latest_data_time} windowInHours = %%{NUMBER:forecast_api_window:int}  original url = %%{GREEDYDATA:original_forecast_api_call}  newUrl = %%{GREEDYDATA:forecast_api_call}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Returned lid count = %%{NUMBER:rating_curves_found:int} rating curves\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \" _get_rating_curves_map_inner\\(\\):  request = %%{GREEDYDATA:rating_curve_api_call}  response = \u003cResponse \\[%%{NUMBER:rating_curve_api_response:int}\\]\u003e\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict_inner\\(\\):   request = %%{GREEDYDATA:location_metadata_api_call}  response = \u003cResponse \\[%%{NUMBER:location_metadata_api_response:int}\\]\u003e\"}\n        }\n\n        ##########################\n        ## Non-action Forecasts ##\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):  adding downstream_lid = %%{WORD:nonaction_nws_lid}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecasts\\(\\):   downstream_lid = %%{WORD:nonaction_nws_lid} is already in the action_forecast_lids list, so it will not be added\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  This is a current hour run. URL = %%{GREEDYDATA:nonaction_forecast_api_call}\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  response = \u003cResponse \\[%%{NUMBER:forecast_api_response:int}\\]\u003e\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_get_nonaction_forecast_chunks\\(\\):  %%{NUMBER:nonaction_forecasts_found:int} forecasts returned from  %%{NUMBER:nonaction_forecasts_searched:int} nws location ids\"}\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"\\*\\*\\*\\* _get_nonaction_forecasts\\(\\):  After comparing with action forecast list, ended up with new %%{NUMBER:nonaction_nws_lids:int} NWS lids\"}\n        }\n\n        #########################\n        ## Forecast Point Dict ##\n        #########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict_inner\\(\\):  lid = %%{WORD:nws_lid}, is_rfc_defined_fcst_point = %%{WORD:defined_fcst_point}\"}\n            add_field =\u003e { \"forecast_point_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"NWS LID \\\"%%{WORD:nws_lid}\\\" is not found in %%{GREEDYDATA:gages_map_csv}\"}\n            add_field =\u003e { \"lid_in_gages_map\" =\u003e \"False\" }\n        }\n\n        ###########\n        ## Other ##\n        ###########\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"_create_forecast_point_dict\\(\\):  Total processed lids = %%{NUMBER:total_lids_processed:int}\"}\n        }\n\n        #####################\n        ## Field Mutations ##\n        #####################\n\n        mutate {\n            convert =\u003e {\n                \"rnr_process_status_code\" =\u003e \"integer\"\n                \"nws_lid_process_status_code\" =\u003e \"integer\"\n                \"forecast_point_status_code\" =\u003e \"integer\"\n            }\n        }\n\n        date {\n            match =\u003e [ \"latest_data_time\", \"YYYY-MM-dd HH:mm:ss\" ]\n            target =\u003e \"latest_data_time\"\n        }\n\n        if ![nws_lid] {\n            mutate {\n                remove_field =\u003e [\"forecast_category\"]\n            }\n        }\n    }\n}\n\n#############\n## Spin Up ##\n#############\n\nfilter {\n    if [hydrovis_application] == \"replace_route\" and [programname] == \"cloud-init\" {\n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up Rsyslog Configuration\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 1 }\n        }\n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR Mount\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 2 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing System Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 3 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing Python Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 4 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating Permissions\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 5 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing WRF-Hydro Files\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 6 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing Replace and Route\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 7 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Installing RNR Dependencies\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 8 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Copying Static Resources\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 9 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating Libnetcdf Link\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 10 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR File Structure\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 11 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Copying Rendered Template File to Replace and Route\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 12 }\n        } \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Setting up RNR Crontab\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 13 }\n        }  \n        \n        grok {\n            match =\u003e { \"message\" =\u003e \"Finished Setup\"}\n            add_field =\u003e { \"rnr_spinup_status_code\" =\u003e 14 }\n        } \n    }\n\n    mutate {\n        convert =\u003e {\n            \"rnr_spinup_status_code\" =\u003e \"integer\"\n        }\n    }\n}",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
              "parser_name": "rnr_logstash.conf",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "viz_logstash.conf.template",
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "f43731860ba7fa499561c1c009d390a71b492d804b8ceda819de203fc608c1db",
            "rendered": "input {\n    tcp {\n        port =\u003e 5000\n        type =\u003e \"viz\"\n    }\n}\n\nfilter {\n    ###################\n    # Message parsers #\n    ###################\n    if [type] == \"viz\" {\n        json {\n            source =\u003e \"message\"\n            target =\u003e \"logger_json\"\n            remove_field =\u003e \"message\"\n        }\n        mutate {\n            rename =\u003e { \"[logger_json][message]\" =\u003e \"message\" }\n        }\n    }\n}\n\nfilter {\n\n    ####################################\n    # Process/Watcher/Pipeline Parsers #\n    ####################################\n\n    if [type] == \"viz\" {\n        grok {\n            match =\u003e {\n                \"[logger_json][extra][logger_name]\" =\u003e [\n                    \"processing_pipeline\\.utils\\.process\\.%{GREEDYDATA:process}\",\n                    \"processing_pipeline\\.watcher\\.%{GREEDYDATA:watcher}\",\n                    \"processing_pipeline\\.manager\\.%{GREEDYDATA:pipeline}\",\n                    \"processing_pipeline\\.launcher\\.%{GREEDYDATA:process}\",\n                    \"process\\.%{GREEDYDATA:process}\",\n                    \"watcher\\.%{GREEDYDATA:watcher}\",\n                    \"manager\\.%{GREEDYDATA:pipeline}\",\n                    \"launcher\\.%{GREEDYDATA:process}\"\n                ]\n            }\n        }\n\n        grok {\n            match =\u003e {\n                \"[logger_json][extra][logger_name]\" =\u003e [\n                    \"processing_pipeline\\.watcher\\.%{GREEDYDATA:process}\",\n                    \"watcher\\.%{GREEDYDATA:process}\"\n                ]\n            }\n        }\n\n        if [host] =~ /ip-10-27-4-...ec2.internal/ {\n            mutate { add_field =\u003e { \"viz_environment\" =\u003e \"Development\" } }\n        }\n\n        if [host] =~ /ip-10-26-150-...ec2.internal/ {\n            mutate { add_field =\u003e { \"viz_environment\" =\u003e \"Staging\" } }\n        }\n\n        ######################\n        # Pipeline heartbeat #\n        ######################\n\n        if [process] {\n            grok {\n                match =\u003e { \"message\" =\u003e \"Heartbeat\" }\n                add_field =\u003e { \"metric_type\" =\u003e \"process_heartbeat\" }\n            }\n        }\n\n        ##########################\n        # Process/Watcher parser #\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} by the %{GREEDYDATA:watcher} Watcher: %{GREEDYDATA:command}\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 0 }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 7 }\n            add_field =\u003e { \"service_status_code\" =\u003e 4 }\n            add_field =\u003e { \"metric_type\" =\u003e [\"process_status\", \"watcher_status\"] }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} by the %{GREEDYDATA:watcher} Watcher has exited\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 8 }\n            add_field =\u003e { \"service_status_code\" =\u003e 10 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        #######################\n        # Process log parsers #\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Execute function called for %{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 1 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_tag =\u003e [ \"processStarted\" ]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Validating workspace for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 2 }\n            add_field =\u003e { \"service_status_code\" =\u003e 5 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Executing processing for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 3 }\n            add_field =\u003e { \"service_status_code\" =\u003e 6 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating data for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 4 }\n            add_field =\u003e { \"service_status_code\" =\u003e 7 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating portal item for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\"}\n            add_field =\u003e { \"process_status_code\" =\u003e 5 }\n            add_field =\u003e { \"service_status_code\" =\u003e 8 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating service properties for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 6 }\n            add_field =\u003e { \"service_status_code\" =\u003e 9 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully executed processing for %{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 7 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"latest_process_time\" }\n            add_tag =\u003e [ \"processFinished\" ]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Processing for %{TIMESTAMP_ISO8601:latest_data_time} failed\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"EGIS Log[:] type=%{GREEDYDATA:egis_type}[,] time=%{GREEDYDATA:egis_time}[,] message=%{GREEDYDATA:egis_message}[,] machine=%{GREEDYDATA:egis_machine}\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"egis_log\" }\n        }\n\n        elapsed {\n            start_tag =\u003e \"processStarted\"\n            end_tag =\u003e \"processFinished\"\n            unique_id_field =\u003e \"process\"\n            timeout =\u003e 6000\n        }\n\n        #######################\n        # Watcher log parsers #\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"A Watch for data corresponding to date %{TIMESTAMP_ISO8601:latest_data_time} will now begin.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 0 }\n        }\n\n         grok {\n            match =\u003e { \"message\" =\u003e \"Sleeping for %{NUMBER} seconds until data is expected\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 0 }\n        }\n\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Attempting to locate/fetch a batch of %{NUMBER} resources for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%{NUMBER:resources_fetched} of %{NUMBER:total_resources} resources for %{TIMESTAMP_ISO8601:latest_data_time} now available.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"download_progress\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"All resources for %{TIMESTAMP_ISO8601:latest_data_time} now available.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Polling files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 1 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"One or more files available for %{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 2 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Pulling one or more files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 3 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"All files available for %{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 4 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"latest_available_time\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Pulling all files for %{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 5 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully pulled all files for %{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 6 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n          match =\u003e { \"message\" =\u003e \"The Watch for %{TIMESTAMP_ISO8601:latest_data_time} expired\" }\n        }\n\n        grok {\n          match =\u003e { \"message\" =\u003e \"Process launched for %{TIMESTAMP_ISO8601:latest_data_time} exited with return code 1.\" }\n        }\n\n        ##########################################\n        # ArcGIS Server service recovery parsers #\n        ##########################################\n\n        if [logger_json][extra][logger_name] == 'restart-arcgis-server-monitor' {\n            mutate { add_field =\u003e { \"metric_type\" =\u003e \"recover_monitor\" } }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Triggering \" }\n              add_field =\u003e { \"metric_type\" =\u003e \"recover_monitor\" }\n        }\n\n        #########################\n        # Configuration parsers #\n        #########################\n\n        grok {\n            break_on_match =\u003e false\n            match =\u003e {\n                \"process\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n                \"watcher\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n                \"pipeline\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n            }\n        }\n\n        if ![configuration] {\n            mutate { add_field =\u003e { \"configuration\" =\u003e \"xxx\" } }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%{NUMBER:total_processes} processes are expected to be running.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"total_processes\" }\n        }\n\n        if [logger_json][level] == 'ERROR' {\n            mutate {\n                add_field =\u003e { \"service_status_code\" =\u003e 999 }\n                add_tag =\u003e [\"shouldmail\"]\n            }\n        }\n\n        #################\n        # Email parsers #\n        #################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"email_group:%{GREEDYDATA:email_group}--email_title:%{GREEDYDATA:email_title}--email_body:%{GREEDYDATA:email_body}\" }\n            add_tag =\u003e [\"shouldmail\"]\n        }\n\n        ##########################\n        # Resource Usage parsers #\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%{GREEDYDATA:resource_process} Viz Service %{GREEDYDATA:resource_type} Usage - %{NUMBER:resource_usage} %{GREEDYDATA:resource_unit}\"}\n            add_field =\u003e { \"metric_type\" =\u003e \"viz_resource_usage\" }\n        }\n    }\n}\n\nfilter {\n    ###############################\n    # Drop all unnecessary fields #\n    ###############################\n    if [type] == \"viz\" {\n        mutate {\n            rename =\u003e { \"[logger_json][@timestamp]\" =\u003e \"temp_timestamp\" }\n            rename =\u003e { \"[logger_json][level]\" =\u003e \"temp_level\" }\n            remove_field =\u003e [\"logger_json\"]\n        }\n\n        mutate {\n            rename =\u003e { \"temp_timestamp\" =\u003e \"[logger_json][@timestamp]\" }\n            rename =\u003e { \"temp_level\" =\u003e \"[logger_json][level]\" }\n        }\n\n        #########################\n        # Data type conversions #\n        #########################\n\n        mutate {\n            convert =\u003e {\n                \"process_status_code\" =\u003e \"integer\"\n                \"watcher_status_code\" =\u003e \"integer\"\n                \"total_resources\" =\u003e \"integer\"\n                \"resources_fetched\" =\u003e \"integer\"\n                \"service_status_code\" =\u003e \"integer\"\n                \"total_processes\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\nfilter {\n    #############################\n    # Drop all unnecessary logs #\n    #############################\n    if [type] == \"viz\" {\n        if ![metric_type] and [logger_json][level] == 'INFO' {\n            drop { }\n        }\n    }\n}\n\noutput {\n    stdout {}\n    if [type] == \"viz\" {\n        amazon_es {\n            hosts =\u003e [\"vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com\"]\n            region =\u003e \"us-east-1\"\n            aws_access_key_id =\u003e ''\n            aws_secret_access_key =\u003e ''\n            index =\u003e \"nwmviz-%{+YYYY.MM}\"\n        }\n    }\n}\n\n",
            "template": "input {\n    tcp {\n        port =\u003e 5000\n        type =\u003e \"viz\"\n    }\n}\n\nfilter {\n    ###################\n    # Message parsers #\n    ###################\n    if [type] == \"viz\" {\n        json {\n            source =\u003e \"message\"\n            target =\u003e \"logger_json\"\n            remove_field =\u003e \"message\"\n        }\n        mutate {\n            rename =\u003e { \"[logger_json][message]\" =\u003e \"message\" }\n        }\n    }\n}\n\nfilter {\n\n    ####################################\n    # Process/Watcher/Pipeline Parsers #\n    ####################################\n\n    if [type] == \"viz\" {\n        grok {\n            match =\u003e {\n                \"[logger_json][extra][logger_name]\" =\u003e [\n                    \"processing_pipeline\\.utils\\.process\\.%%{GREEDYDATA:process}\",\n                    \"processing_pipeline\\.watcher\\.%%{GREEDYDATA:watcher}\",\n                    \"processing_pipeline\\.manager\\.%%{GREEDYDATA:pipeline}\",\n                    \"processing_pipeline\\.launcher\\.%%{GREEDYDATA:process}\",\n                    \"process\\.%%{GREEDYDATA:process}\",\n                    \"watcher\\.%%{GREEDYDATA:watcher}\",\n                    \"manager\\.%%{GREEDYDATA:pipeline}\",\n                    \"launcher\\.%%{GREEDYDATA:process}\"\n                ]\n            }\n        }\n\n        grok {\n            match =\u003e {\n                \"[logger_json][extra][logger_name]\" =\u003e [\n                    \"processing_pipeline\\.watcher\\.%%{GREEDYDATA:process}\",\n                    \"watcher\\.%%{GREEDYDATA:process}\"\n                ]\n            }\n        }\n\n        if [host] =~ /ip-10-27-4-...ec2.internal/ {\n            mutate { add_field =\u003e { \"viz_environment\" =\u003e \"Development\" } }\n        }\n\n        if [host] =~ /ip-10-26-150-...ec2.internal/ {\n            mutate { add_field =\u003e { \"viz_environment\" =\u003e \"Staging\" } }\n        }\n\n        ######################\n        # Pipeline heartbeat #\n        ######################\n\n        if [process] {\n            grok {\n                match =\u003e { \"message\" =\u003e \"Heartbeat\" }\n                add_field =\u003e { \"metric_type\" =\u003e \"process_heartbeat\" }\n            }\n        }\n\n        ##########################\n        # Process/Watcher parser #\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} by the %%{GREEDYDATA:watcher} Watcher: %%{GREEDYDATA:command}\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 0 }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 7 }\n            add_field =\u003e { \"service_status_code\" =\u003e 4 }\n            add_field =\u003e { \"metric_type\" =\u003e [\"process_status\", \"watcher_status\"] }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} by the %%{GREEDYDATA:watcher} Watcher has exited\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 8 }\n            add_field =\u003e { \"service_status_code\" =\u003e 10 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        #######################\n        # Process log parsers #\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Execute function called for %%{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 1 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_tag =\u003e [ \"processStarted\" ]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Validating workspace for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 2 }\n            add_field =\u003e { \"service_status_code\" =\u003e 5 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Executing processing for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 3 }\n            add_field =\u003e { \"service_status_code\" =\u003e 6 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating data for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 4 }\n            add_field =\u003e { \"service_status_code\" =\u003e 7 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating portal item for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\"}\n            add_field =\u003e { \"process_status_code\" =\u003e 5 }\n            add_field =\u003e { \"service_status_code\" =\u003e 8 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Updating service properties for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 6 }\n            add_field =\u003e { \"service_status_code\" =\u003e 9 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully executed processing for %%{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"process_status_code\" =\u003e 7 }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"latest_process_time\" }\n            add_tag =\u003e [ \"processFinished\" ]\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Processing for %%{TIMESTAMP_ISO8601:latest_data_time} failed\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"EGIS Log[:] type=%%{GREEDYDATA:egis_type}[,] time=%%{GREEDYDATA:egis_time}[,] message=%%{GREEDYDATA:egis_message}[,] machine=%%{GREEDYDATA:egis_machine}\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"egis_log\" }\n        }\n\n        elapsed {\n            start_tag =\u003e \"processStarted\"\n            end_tag =\u003e \"processFinished\"\n            unique_id_field =\u003e \"process\"\n            timeout =\u003e 6000\n        }\n\n        #######################\n        # Watcher log parsers #\n        #######################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"A Watch for data corresponding to date %%{TIMESTAMP_ISO8601:latest_data_time} will now begin.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 0 }\n        }\n\n         grok {\n            match =\u003e { \"message\" =\u003e \"Sleeping for %%{NUMBER} seconds until data is expected\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 0 }\n        }\n\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Attempting to locate/fetch a batch of %%{NUMBER} resources for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 1 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%%{NUMBER:resources_fetched} of %%{NUMBER:total_resources} resources for %%{TIMESTAMP_ISO8601:latest_data_time} now available.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"download_progress\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 2 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"All resources for %%{TIMESTAMP_ISO8601:latest_data_time} now available.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"process_status\" }\n            add_field =\u003e { \"service_status_code\" =\u003e 3 }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Polling files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 1 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"One or more files available for %%{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 2 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Pulling one or more files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 3 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"All files available for %%{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 4 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"latest_available_time\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Pulling all files for %%{TIMESTAMP_ISO8601:latest_data_time}[.][.][.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 5 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Successfully pulled all files for %%{TIMESTAMP_ISO8601:latest_data_time}[.]\" }\n            add_field =\u003e { \"watcher_status_code\" =\u003e 6 }\n            add_field =\u003e { \"metric_type\" =\u003e \"watcher_status\" }\n        }\n\n        grok {\n          match =\u003e { \"message\" =\u003e \"The Watch for %%{TIMESTAMP_ISO8601:latest_data_time} expired\" }\n        }\n\n        grok {\n          match =\u003e { \"message\" =\u003e \"Process launched for %%{TIMESTAMP_ISO8601:latest_data_time} exited with return code 1.\" }\n        }\n\n        ##########################################\n        # ArcGIS Server service recovery parsers #\n        ##########################################\n\n        if [logger_json][extra][logger_name] == 'restart-arcgis-server-monitor' {\n            mutate { add_field =\u003e { \"metric_type\" =\u003e \"recover_monitor\" } }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"Triggering \" }\n              add_field =\u003e { \"metric_type\" =\u003e \"recover_monitor\" }\n        }\n\n        #########################\n        # Configuration parsers #\n        #########################\n\n        grok {\n            break_on_match =\u003e false\n            match =\u003e {\n                \"process\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n                \"watcher\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n                \"pipeline\" =\u003e \"(?\u003cconfiguration\u003e\\b\\w{3})_\"\n            }\n        }\n\n        if ![configuration] {\n            mutate { add_field =\u003e { \"configuration\" =\u003e \"xxx\" } }\n        }\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%%{NUMBER:total_processes} processes are expected to be running.\" }\n            add_field =\u003e { \"metric_type\" =\u003e \"total_processes\" }\n        }\n\n        if [logger_json][level] == 'ERROR' {\n            mutate {\n                add_field =\u003e { \"service_status_code\" =\u003e 999 }\n                add_tag =\u003e [\"shouldmail\"]\n            }\n        }\n\n        #################\n        # Email parsers #\n        #################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"email_group:%%{GREEDYDATA:email_group}--email_title:%%{GREEDYDATA:email_title}--email_body:%%{GREEDYDATA:email_body}\" }\n            add_tag =\u003e [\"shouldmail\"]\n        }\n\n        ##########################\n        # Resource Usage parsers #\n        ##########################\n\n        grok {\n            match =\u003e { \"message\" =\u003e \"%%{GREEDYDATA:resource_process} Viz Service %%{GREEDYDATA:resource_type} Usage - %%{NUMBER:resource_usage} %%{GREEDYDATA:resource_unit}\"}\n            add_field =\u003e { \"metric_type\" =\u003e \"viz_resource_usage\" }\n        }\n    }\n}\n\nfilter {\n    ###############################\n    # Drop all unnecessary fields #\n    ###############################\n    if [type] == \"viz\" {\n        mutate {\n            rename =\u003e { \"[logger_json][@timestamp]\" =\u003e \"temp_timestamp\" }\n            rename =\u003e { \"[logger_json][level]\" =\u003e \"temp_level\" }\n            remove_field =\u003e [\"logger_json\"]\n        }\n\n        mutate {\n            rename =\u003e { \"temp_timestamp\" =\u003e \"[logger_json][@timestamp]\" }\n            rename =\u003e { \"temp_level\" =\u003e \"[logger_json][level]\" }\n        }\n\n        #########################\n        # Data type conversions #\n        #########################\n\n        mutate {\n            convert =\u003e {\n                \"process_status_code\" =\u003e \"integer\"\n                \"watcher_status_code\" =\u003e \"integer\"\n                \"total_resources\" =\u003e \"integer\"\n                \"resources_fetched\" =\u003e \"integer\"\n                \"service_status_code\" =\u003e \"integer\"\n                \"total_processes\" =\u003e \"integer\"\n            }\n        }\n    }\n}\n\nfilter {\n    #############################\n    # Drop all unnecessary logs #\n    #############################\n    if [type] == \"viz\" {\n        if ![metric_type] and [logger_json][level] == 'INFO' {\n            drop { }\n        }\n    }\n}\n\noutput {\n    stdout {}\n    if [type] == \"viz\" {\n        amazon_es {\n            hosts =\u003e [\"${es_endpoint}\"]\n            region =\u003e \"${region}\"\n            aws_access_key_id =\u003e ''\n            aws_secret_access_key =\u003e ''\n            index =\u003e \"nwmviz-%%{+YYYY.MM}\"\n        }\n    }\n}\n\n",
            "vars": {
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
              "parser_name": "viz_logstash.conf",
              "region": "us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "data",
      "type": "template_file",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "8420fe787029072ec7b8eab1875fdc19adffba3b94dd90db76b9bf4344924af3",
            "rendered": "#!/bin/bash\n\nrpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\ncd /etc/yum.repos.d/\n\ncat \u003e logstash.repo \u003c\u003c EOF\n[logstash-7.x]\nname=Elastic repository for 7.x packages\nbaseurl=https://artifacts.elastic.co/packages/7.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md\nEOF\n\nyum -y install logstash-7.16.1\n\nusermod -a -G logstash ec2-user\n\nexport LS_JAVA_OPTS=\"-Xms1g -Xmx1g -XX:ParallelGCThreads=1\"\n\ncd /etc/logstash/conf.d\n\ncp /parsers/* .\n\n/usr/share/logstash/bin/logstash-plugin install logstash-filter-elapsed\n/usr/share/logstash/bin/logstash-plugin install --version 7.0.1 logstash-output-amazon_es\n\nmkdir ~/kibana_objects\ncd ~/kibana_objects\naws s3 cp --recursive s3://hydrovis-uat-deployment-us-east-1/monitoring/ .\nfor FILE in *; do curl -X POST \"https://vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com/_plugin/kibana/api/saved_objects/_import?overwrite=true\" -H \"kbn-xsrf: true\" --form file=@$FILE; done\n\nservice logstash start\n",
            "template": "#!/bin/bash\n\nrpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\ncd /etc/yum.repos.d/\n\ncat \u003e logstash.repo \u003c\u003c EOF\n[logstash-7.x]\nname=Elastic repository for 7.x packages\nbaseurl=https://artifacts.elastic.co/packages/7.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md\nEOF\n\nyum -y install logstash-7.16.1\n\nusermod -a -G logstash ec2-user\n\nexport LS_JAVA_OPTS=\"-Xms1g -Xmx1g -XX:ParallelGCThreads=1\"\n\ncd /etc/logstash/conf.d\n\ncp /parsers/* .\n\n/usr/share/logstash/bin/logstash-plugin install logstash-filter-elapsed\n/usr/share/logstash/bin/logstash-plugin install --version 7.0.1 logstash-output-amazon_es\n\nmkdir ~/kibana_objects\ncd ~/kibana_objects\naws s3 cp --recursive s3://${deployment_bucket}/monitoring/ .\nfor FILE in *; do curl -X POST \"https://${es_endpoint}/_plugin/kibana/api/saved_objects/_import?overwrite=true\" -H \"kbn-xsrf: true\" --form file=@$FILE; done\n\nservice logstash start\n",
            "vars": {
              "deployment_bucket": "hydrovis-uat-deployment-us-east-1",
              "es_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "es_loggroup",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/OpenSearchService/domains/monitoring-hydrovis/application-logs",
            "id": "/aws/OpenSearchService/domains/monitoring-hydrovis/application-logs",
            "kms_key_id": "",
            "name": "/aws/OpenSearchService/domains/monitoring-hydrovis/application-logs",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "loggroup",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "HML_Receiver__uat",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/HML_Receiver__uat",
            "id": "/aws/lambda/HML_Receiver__uat",
            "kms_key_id": "",
            "name": "/aws/lambda/HML_Receiver__uat",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_vpc.main",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis"
          ]
        },
        {
          "index_key": "viz_huc_inundation_processing_uat",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_huc_inundation_processing_uat",
            "id": "/aws/lambda/viz_huc_inundation_processing_uat",
            "kms_key_id": "",
            "name": "/aws/lambda/viz_huc_inundation_processing_uat",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_vpc.main",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_route_table.private"
          ]
        },
        {
          "index_key": "viz_inundation_parent_uat",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_inundation_parent_uat",
            "id": "/aws/lambda/viz_inundation_parent_uat",
            "kms_key_id": "",
            "name": "/aws/lambda/viz_inundation_parent_uat",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private"
          ]
        },
        {
          "index_key": "viz_max_flows_uat",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_max_flows_uat",
            "id": "/aws/lambda/viz_max_flows_uat",
            "kms_key_id": "",
            "name": "/aws/lambda/viz_max_flows_uat",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_vpc.main",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.secrets-manager.module.secret.random_password.password",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.hydrovis-nat-sg"
          ]
        },
        {
          "index_key": "viz_optimize_rasters_uat",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_optimize_rasters_uat",
            "id": "/aws/lambda/viz_optimize_rasters_uat",
            "kms_key_id": "",
            "name": "/aws/lambda/viz_optimize_rasters_uat",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.vpc.aws_route_table.private"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_cloudwatch_log_resource_policy",
      "name": "es_loggroup",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "es_loggroup",
            "policy_document": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"es.amazonaws.com\"},\"Action\":[\"logs:PutLogEvents\",\"logs:PutLogEventsBatch\",\"logs:CreateLogStream\"],\"Resource\":\"arn:aws:logs:*\"}]}",
            "policy_name": "es_loggroup"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_cloudwatch_log_subscription_filter",
      "name": "logfilter",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "HML_Receiver__uat",
          "schema_version": 0,
          "attributes": {
            "destination_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "distribution": "ByLogStream",
            "filter_pattern": "?ELASTICSEARCH ?ERROR ?REPORT",
            "id": "cwlsf-974974808",
            "log_group_name": "/aws/lambda/HML_Receiver__uat",
            "name": "HML_Receiver__uat_logfilter",
            "role_arn": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.monitoring.aws_lambda_permission.allow_cloudwatch",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.vpc.aws_route_table.private",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_vpc.main",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.monitoring.aws_cloudwatch_log_group.loggroup",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.monitoring.data.archive_file.lambda_code",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        },
        {
          "index_key": "viz_huc_inundation_processing_uat",
          "schema_version": 0,
          "attributes": {
            "destination_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "distribution": "ByLogStream",
            "filter_pattern": "?ELASTICSEARCH ?ERROR ?REPORT",
            "id": "cwlsf-1048291155",
            "log_group_name": "/aws/lambda/viz_huc_inundation_processing_uat",
            "name": "viz_huc_inundation_processing_uat_logfilter",
            "role_arn": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.monitoring.data.archive_file.lambda_code",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.security-groups.aws_security_group.es-sg",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.monitoring.aws_cloudwatch_log_group.loggroup",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.monitoring.aws_lambda_permission.allow_cloudwatch",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_vpc.main",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3"
          ]
        },
        {
          "index_key": "viz_inundation_parent_uat",
          "schema_version": 0,
          "attributes": {
            "destination_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "distribution": "ByLogStream",
            "filter_pattern": "?ELASTICSEARCH ?ERROR ?REPORT",
            "id": "cwlsf-1775404332",
            "log_group_name": "/aws/lambda/viz_inundation_parent_uat",
            "name": "viz_inundation_parent_uat_logfilter",
            "role_arn": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.vpc.aws_vpc.main",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.monitoring.aws_lambda_permission.allow_cloudwatch",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.monitoring.data.archive_file.lambda_code",
            "module.vpc.aws_route_table.private",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.monitoring.aws_cloudwatch_log_group.loggroup"
          ]
        },
        {
          "index_key": "viz_max_flows_uat",
          "schema_version": 0,
          "attributes": {
            "destination_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "distribution": "ByLogStream",
            "filter_pattern": "?ELASTICSEARCH ?ERROR ?REPORT",
            "id": "cwlsf-1580303669",
            "log_group_name": "/aws/lambda/viz_max_flows_uat",
            "name": "viz_max_flows_uat_logfilter",
            "role_arn": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_vpc.main",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.monitoring.data.archive_file.lambda_code",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.monitoring.aws_cloudwatch_log_group.loggroup",
            "module.monitoring.aws_lambda_permission.allow_cloudwatch",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "viz_optimize_rasters_uat",
          "schema_version": 0,
          "attributes": {
            "destination_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "distribution": "ByLogStream",
            "filter_pattern": "?ELASTICSEARCH ?ERROR ?REPORT",
            "id": "cwlsf-1646923791",
            "log_group_name": "/aws/lambda/viz_optimize_rasters_uat",
            "name": "viz_optimize_rasters_uat_logfilter",
            "role_arn": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.monitoring.aws_lambda_permission.allow_cloudwatch",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_vpc.main",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.security-groups.aws_security_group.es-sg",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.monitoring.aws_cloudwatch_log_group.loggroup",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.monitoring.data.archive_file.lambda_code"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_elasticsearch_domain",
      "name": "es",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_policies": "{\"Statement\":[{\"Action\":\"es:*\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis/*\"}],\"Version\":\"2012-10-17\"}",
            "advanced_options": {
              "override_main_response_version": "false",
              "rest.action.multi.allow_explicit_index": "true"
            },
            "advanced_security_options": [
              {
                "enabled": false,
                "internal_user_database_enabled": false,
                "master_user_options": []
              }
            ],
            "arn": "arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis",
            "cluster_config": [
              {
                "dedicated_master_count": 0,
                "dedicated_master_enabled": false,
                "dedicated_master_type": "",
                "instance_count": 2,
                "instance_type": "r5.large.elasticsearch",
                "warm_count": 0,
                "warm_enabled": false,
                "warm_type": "",
                "zone_awareness_config": [
                  {
                    "availability_zone_count": 2
                  }
                ],
                "zone_awareness_enabled": true
              }
            ],
            "cognito_options": [
              {
                "enabled": false,
                "identity_pool_id": "",
                "role_arn": "",
                "user_pool_id": ""
              }
            ],
            "domain_endpoint_options": [
              {
                "custom_endpoint": "",
                "custom_endpoint_certificate_arn": "",
                "custom_endpoint_enabled": false,
                "enforce_https": false,
                "tls_security_policy": "Policy-Min-TLS-1-0-2019-07"
              }
            ],
            "domain_id": "799732994462/monitoring-hydrovis",
            "domain_name": "monitoring-hydrovis",
            "ebs_options": [
              {
                "ebs_enabled": true,
                "iops": 0,
                "volume_size": 100,
                "volume_type": "gp2"
              }
            ],
            "elasticsearch_version": "7.10",
            "encrypt_at_rest": [
              {
                "enabled": false,
                "kms_key_id": ""
              }
            ],
            "endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com",
            "id": "arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis",
            "kibana_endpoint": "vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com/_plugin/kibana/",
            "log_publishing_options": [
              {
                "cloudwatch_log_group_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/OpenSearchService/domains/monitoring-hydrovis/application-logs",
                "enabled": true,
                "log_type": "ES_APPLICATION_LOGS"
              }
            ],
            "node_to_node_encryption": [
              {
                "enabled": false
              }
            ],
            "snapshot_options": [
              {
                "automated_snapshot_start_hour": 23
              }
            ],
            "tags": {
              "Domain": "monitoring-hydrovis",
              "name": "monitoring-hydrovis"
            },
            "tags_all": {
              "Domain": "monitoring-hydrovis",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "name": "monitoring-hydrovis",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_options": [
              {
                "availability_zones": [
                  "us-east-1a",
                  "us-east-1b"
                ],
                "security_group_ids": [
                  "sg-018097bf79b5f835e"
                ],
                "subnet_ids": [
                  "subnet-002c2ed1565d4579d",
                  "subnet-04914abb2085ae5dd"
                ],
                "vpc_id": "vpc-0a52d5a43a8da3c6c"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsidXBkYXRlIjozNjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.monitoring.aws_cloudwatch_log_group.es_loggroup",
            "module.monitoring.aws_iam_service_linked_role.es"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "LambdaforElasticsearch",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/LambdaforElasticsearch",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-10-29T18:30:28Z",
            "description": "",
            "force_detach_policies": false,
            "id": "LambdaforElasticsearch",
            "inline_policy": [
              {
                "name": "LambdaforElasticsearch",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"es:DescribeReservedElasticsearchInstanceOfferings\",\n        \"es:DeletePackage\",\n        \"es:ListElasticsearchInstanceTypeDetails\",\n        \"es:ListDomainsForPackage\",\n        \"es:CreateElasticsearchServiceRole\",\n        \"es:UpdatePackage\",\n        \"es:RejectInboundCrossClusterSearchConnection\",\n        \"es:GetPackageVersionHistory\",\n        \"es:PurchaseReservedElasticsearchInstanceOffering\",\n        \"es:DeleteElasticsearchServiceRole\",\n        \"es:AcceptInboundCrossClusterSearchConnection\",\n        \"es:DescribeInboundCrossClusterSearchConnections\",\n        \"es:DescribeReservedElasticsearchInstances\",\n        \"es:ListDomainNames\",\n        \"es:CreatePackage\",\n        \"es:DescribePackages\",\n        \"es:DeleteInboundCrossClusterSearchConnection\",\n        \"es:ListElasticsearchInstanceTypes\",\n        \"es:DescribeOutboundCrossClusterSearchConnections\",\n        \"es:ListElasticsearchVersions\",\n        \"es:DescribeElasticsearchInstanceTypeLimits\",\n        \"es:DeleteOutboundCrossClusterSearchConnection\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"es:*\",\n      \"Resource\": \"arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            ],
            "max_session_duration": 3600,
            "name": "LambdaforElasticsearch",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "unique_id": "AROA3UM6NCGPFQOXRP3JU"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "LambdaforElasticsearch",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "LambdaforElasticsearch:LambdaforElasticsearch",
            "name": "LambdaforElasticsearch",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"es:DescribeReservedElasticsearchInstanceOfferings\",\n        \"es:DeletePackage\",\n        \"es:ListElasticsearchInstanceTypeDetails\",\n        \"es:ListDomainsForPackage\",\n        \"es:CreateElasticsearchServiceRole\",\n        \"es:UpdatePackage\",\n        \"es:RejectInboundCrossClusterSearchConnection\",\n        \"es:GetPackageVersionHistory\",\n        \"es:PurchaseReservedElasticsearchInstanceOffering\",\n        \"es:DeleteElasticsearchServiceRole\",\n        \"es:AcceptInboundCrossClusterSearchConnection\",\n        \"es:DescribeInboundCrossClusterSearchConnections\",\n        \"es:DescribeReservedElasticsearchInstances\",\n        \"es:ListDomainNames\",\n        \"es:CreatePackage\",\n        \"es:DescribePackages\",\n        \"es:DeleteInboundCrossClusterSearchConnection\",\n        \"es:ListElasticsearchInstanceTypes\",\n        \"es:DescribeOutboundCrossClusterSearchConnections\",\n        \"es:ListElasticsearchVersions\",\n        \"es:DescribeElasticsearchInstanceTypeLimits\",\n        \"es:DeleteOutboundCrossClusterSearchConnection\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"es:*\",\n      \"Resource\": \"arn:aws:es:us-east-1:799732994462:domain/monitoring-hydrovis\"\n    }\n  ]\n}",
            "role": "LambdaforElasticsearch"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.monitoring.data.template_file.LambdaforElasticsearch-template"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "AWSLambdaVPCAccessExecutionRole",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "LambdaforElasticsearch-20211029183044868600000001",
            "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
            "role": "LambdaforElasticsearch"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.monitoring.aws_iam_role.LambdaforElasticsearch"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_iam_service_linked_role",
      "name": "es",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::799732994462:role/aws-service-role/es.amazonaws.com/AWSServiceRoleForAmazonElasticsearchService",
            "aws_service_name": "es.amazonaws.com",
            "create_date": "2021-09-17T17:41:02Z",
            "custom_suffix": "",
            "description": "",
            "id": "arn:aws:iam::799732994462:role/aws-service-role/es.amazonaws.com/AWSServiceRoleForAmazonElasticsearchService",
            "name": "AWSServiceRoleForAmazonElasticsearchService",
            "path": "/aws-service-role/es.amazonaws.com/",
            "unique_id": "AROA3UM6NCGPIR4PUC3RE"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_instance",
      "name": "logstash",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-025b76b777024295e",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-01cc9c84ed0edb97a",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": true,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisSSMInstanceProfileRole",
            "id": "i-01cc9c84ed0edb97a",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3.medium",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-045f0942c75e17a1f",
            "private_dns": "ip-10-27-2-20.ec2.internal",
            "private_ip": "10.27.2.20",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-03dad3f6ab15bdd89",
                "volume_size": 12,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-099d60b8910d25894",
            "tags": {
              "Name": "hv-uat-logstash",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-logstash",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "8841d786f0f353bcfe1a499cc9534b2683976c84",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-018097bf79b5f835e",
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.monitoring.aws_elasticsearch_domain.es",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.iam-roles.aws_iam_instance_profile.HydrovisSSMInstanceProfileRole",
            "module.monitoring.data.cloudinit_config.startup",
            "module.vpc.aws_vpc.main",
            "module.monitoring.data.template_file.parser_templates",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.monitoring.data.template_file.startup",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.monitoring.aws_iam_service_linked_role.es",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.monitoring.data.aws_ami.linux",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.monitoring.aws_cloudwatch_log_group.es_loggroup"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "CWLogsToElasticsearch",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "CloudWatch Logs to Amazon ES streaming",
            "environment": [],
            "file_system_config": [],
            "filename": "ELASTICSEARCH/lambda_code.zip",
            "function_name": "CWLogsToElasticsearch",
            "handler": "index.handler",
            "id": "CWLogsToElasticsearch",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch/invocations",
            "kms_key_arn": "",
            "last_modified": "2021-12-20T21:40:39.000+0000",
            "layers": [],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:CWLogsToElasticsearch:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/LambdaforElasticsearch",
            "runtime": "nodejs12.x",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "c5lnSYXew0tWdsx8s0qXLvRIEKWn4sG0LjmaSzjnBOQ=",
            "source_code_size": 6573,
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": [
              {
                "security_group_ids": [
                  "sg-018097bf79b5f835e"
                ],
                "subnet_ids": [
                  "subnet-002c2ed1565d4579d",
                  "subnet-04914abb2085ae5dd"
                ],
                "vpc_id": "vpc-0a52d5a43a8da3c6c"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.monitoring.data.archive_file.lambda_code",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "allow_cloudwatch",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "HML_Receiver__uat",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "CWLogsToElasticsearch",
            "id": "terraform-2021102919014697580000001c",
            "principal": "logs.us-east-1.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/HML_Receiver__uat:*",
            "statement_id": "terraform-2021102919014697580000001c",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.monitoring.data.archive_file.lambda_code",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_route_table.private",
            "module.security-groups.aws_security_group.es-sg",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_vpc.main",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.secrets-manager.module.secret.random_password.password",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq"
          ]
        },
        {
          "index_key": "viz_huc_inundation_processing_uat",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "CWLogsToElasticsearch",
            "id": "terraform-2021102919014698990000001d",
            "principal": "logs.us-east-1.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_huc_inundation_processing_uat:*",
            "statement_id": "terraform-2021102919014698990000001d",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.es-sg",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.vpc.aws_vpc.main",
            "module.monitoring.data.archive_file.lambda_code",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        },
        {
          "index_key": "viz_inundation_parent_uat",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "CWLogsToElasticsearch",
            "id": "terraform-2021102919014799860000001f",
            "principal": "logs.us-east-1.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_inundation_parent_uat:*",
            "statement_id": "terraform-2021102919014799860000001f",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.monitoring.data.archive_file.lambda_code",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.secrets-manager.module.secret.random_password.password",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.security-groups.aws_security_group.hv-rabbitmq"
          ]
        },
        {
          "index_key": "viz_max_flows_uat",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "CWLogsToElasticsearch",
            "id": "terraform-20211029190148000200000020",
            "principal": "logs.us-east-1.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_max_flows_uat:*",
            "statement_id": "terraform-20211029190148000200000020",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.random_password.password",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.es-sg",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.monitoring.data.archive_file.lambda_code",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_route_table.private"
          ]
        },
        {
          "index_key": "viz_optimize_rasters_uat",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "CWLogsToElasticsearch",
            "id": "terraform-2021102919014699250000001e",
            "principal": "logs.us-east-1.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:logs:us-east-1:799732994462:log-group:/aws/lambda/viz_optimize_rasters_uat:*",
            "statement_id": "terraform-2021102919014699250000001e",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.monitoring.aws_iam_role.LambdaforElasticsearch",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.sqlalchemy",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.monitoring.data.archive_file.lambda_code",
            "module.vpc.aws_route_table.private",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.ingest_lambda_functions.aws_lambda_function.hml_reciever",
            "module.lambda_layers.aws_lambda_layer_version.psycopg2",
            "module.monitoring.aws_lambda_function.CWLogsToElasticsearch",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.security-groups.aws_security_group.es-sg",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-nat-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.lambda_layers.aws_lambda_layer_version.pika",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.vpc.aws_vpc.main",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing"
          ]
        }
      ]
    },
    {
      "module": "module.monitoring",
      "mode": "managed",
      "type": "local_file",
      "name": "lambda_code_index",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "const viz_js = require(\"viz_js\");\n\n// v1.1.2\nvar https = require('https');\nvar zlib = require('zlib');\nvar crypto = require('crypto');\n\nvar endpoint = 'vpc-monitoring-hydrovis-tpz2ls6nv6v6icgjltwgpj5o44.us-east-1.es.amazonaws.com';\n\n// Set this to true if you want to debug why data isn't making it to\n// your Elasticsearch cluster. This will enable logging of failed items\n// to CloudWatch Logs.\nvar logFailedResponses = true;\n\nexports.handler = function(input, context) {\n    // decode input from base64\n    var zippedInput = new Buffer.from(input.awslogs.data, 'base64');\n\n    // decompress the input\n    zlib.gunzip(zippedInput, function(error, buffer) {\n        if (error) { context.fail(error); return; }\n\n        // parse the input from JSON\n        var awslogsData = JSON.parse(buffer.toString('utf8'));\n\n        // transform the input to Elasticsearch documents\n        var elasticsearchBulkData = transform(awslogsData);\n\n        // skip control messages\n        if (!elasticsearchBulkData) {\n            console.log('Received a control message');\n            context.succeed('Control message handled successfully');\n            return;\n        }\n\n        // post documents to the Amazon Elasticsearch Service\n        post(elasticsearchBulkData, function(error, success, statusCode, failedItems) {\n            console.log('Response: ' + JSON.stringify({\n                \"statusCode\": statusCode\n            }));\n\n            if (error) {\n                logFailure(error, failedItems);\n                context.fail(JSON.stringify(error));\n            } else {\n                console.log('Success: ' + JSON.stringify(success));\n                context.succeed('Success');\n            }\n        });\n    });\n};\n\nfunction transform(payload) {\n    if (payload.messageType === 'CONTROL_MESSAGE') {\n        return null;\n    }\n\n    var bulkRequestBody = '';\n\n    payload.logEvents.forEach(function(logEvent) {\n        var timestamp = new Date(1 * logEvent.timestamp);\n\n        // index name format: cwl-YYYY.MM\n        var indexName = [\n            'cwl' + payload.logGroup.toLowerCase().split('/').join('-') + '-' + timestamp.getUTCFullYear(),              // year\n            ('0' + (timestamp.getUTCMonth() + 1)).slice(-2)  // month\n        ].join('.');\n\n        var source = buildSource(logEvent.message, logEvent.extractedFields);\n        source['@id'] = logEvent.id;\n        source['@timestamp'] = new Date(1 * logEvent.timestamp).toISOString();\n        source['@message'] = logEvent.message;\n        source['@owner'] = payload.owner;\n        source['@log_group'] = payload.logGroup;\n        source['@log_stream'] = payload.logStream;\n\n        source = viz_js.parse_viz_logs(source, payload.logGroup, logEvent.message)\n\n        var action = { \"index\": {} };\n        action.index._index = indexName;\n        action.index._type = payload.logGroup;\n        action.index._id = logEvent.id;\n\n        bulkRequestBody += [\n            JSON.stringify(action),\n            JSON.stringify(source),\n        ].join('\\n') + '\\n';\n    });\n    return bulkRequestBody;\n}\n\nfunction buildSource(message, extractedFields) {\n    if (extractedFields) {\n        var source = {};\n\n        for (var key in extractedFields) {\n            if (extractedFields.hasOwnProperty(key) \u0026\u0026 extractedFields[key]) {\n                var value = extractedFields[key];\n\n                if (isNumeric(value)) {\n                    source[key] = 1 * value;\n                    continue;\n                }\n\n                var jsonSubString = extractJson(value);\n                if (jsonSubString !== null) {\n                    source['$' + key] = JSON.parse(jsonSubString);\n                }\n\n                source[key] = value;\n            }\n        }\n        return source;\n    }\n\n    var jsonSubString = extractJson(message);\n    if (jsonSubString !== null) {\n        return JSON.parse(jsonSubString);\n    }\n\n    return {};\n}\n\nfunction extractJson(message) {\n    var jsonStart = message.indexOf('{');\n    if (jsonStart \u003c 0) return null;\n    var jsonSubString = message.substring(jsonStart);\n    return isValidJson(jsonSubString) ? jsonSubString : null;\n}\n\nfunction isValidJson(message) {\n    try {\n        JSON.parse(message);\n    } catch (e) { return false; }\n    return true;\n}\n\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) \u0026\u0026 isFinite(n);\n}\n\nfunction post(body, callback) {\n    var requestParams = buildRequest(endpoint, body);\n\n    var request = https.request(requestParams, function(response) {\n        var responseBody = '';\n        response.on('data', function(chunk) {\n            responseBody += chunk;\n        });\n\n        response.on('end', function() {\n            var info = JSON.parse(responseBody);\n            var failedItems;\n            var success;\n            var error;\n\n            if (response.statusCode \u003e= 200 \u0026\u0026 response.statusCode \u003c 299) {\n                failedItems = info.items.filter(function(x) {\n                    return x.index.status \u003e= 300;\n                });\n\n                success = {\n                    \"attemptedItems\": info.items.length,\n                    \"successfulItems\": info.items.length - failedItems.length,\n                    \"failedItems\": failedItems.length\n                };\n            }\n\n            if (response.statusCode !== 200 || info.errors === true) {\n                // prevents logging of failed entries, but allows logging\n                // of other errors such as access restrictions\n                delete info.items;\n                error = {\n                    statusCode: response.statusCode,\n                    responseBody: info\n                };\n            }\n\n            callback(error, success, response.statusCode, failedItems);\n        });\n    }).on('error', function(e) {\n        callback(e);\n    });\n    request.end(requestParams.body);\n}\n\nfunction buildRequest(endpoint, body) {\n    var endpointParts = endpoint.match(/^([^\\.]+)\\.?([^\\.]*)\\.?([^\\.]*)\\.amazonaws\\.com$/);\n    var region = endpointParts[2];\n    var service = endpointParts[3];\n    var datetime = (new Date()).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var date = datetime.substr(0, 8);\n    var kDate = hmac('AWS4' + process.env.AWS_SECRET_ACCESS_KEY, date);\n    var kRegion = hmac(kDate, region);\n    var kService = hmac(kRegion, service);\n    var kSigning = hmac(kService, 'aws4_request');\n\n    var request = {\n        host: endpoint,\n        method: 'POST',\n        path: '/_bulk',\n        body: body,\n        headers: {\n            'Content-Type': 'application/json',\n            'Host': endpoint,\n            'Content-Length': Buffer.byteLength(body),\n            'X-Amz-Security-Token': process.env.AWS_SESSION_TOKEN,\n            'X-Amz-Date': datetime\n        }\n    };\n\n    var canonicalHeaders = Object.keys(request.headers)\n        .sort(function(a, b) { return a.toLowerCase() \u003c b.toLowerCase() ? -1 : 1; })\n        .map(function(k) { return k.toLowerCase() + ':' + request.headers[k]; })\n        .join('\\n');\n\n    var signedHeaders = Object.keys(request.headers)\n        .map(function(k) { return k.toLowerCase(); })\n        .sort()\n        .join(';');\n\n    var canonicalString = [\n        request.method,\n        request.path, '',\n        canonicalHeaders, '',\n        signedHeaders,\n        hash(request.body, 'hex'),\n    ].join('\\n');\n\n    var credentialString = [ date, region, service, 'aws4_request' ].join('/');\n\n    var stringToSign = [\n        'AWS4-HMAC-SHA256',\n        datetime,\n        credentialString,\n        hash(canonicalString, 'hex')\n    ] .join('\\n');\n\n    request.headers.Authorization = [\n        'AWS4-HMAC-SHA256 Credential=' + process.env.AWS_ACCESS_KEY_ID + '/' + credentialString,\n        'SignedHeaders=' + signedHeaders,\n        'Signature=' + hmac(kSigning, stringToSign, 'hex')\n    ].join(', ');\n\n    return request;\n}\n\nfunction hmac(key, str, encoding) {\n    return crypto.createHmac('sha256', key).update(str, 'utf8').digest(encoding);\n}\n\nfunction hash(str, encoding) {\n    return crypto.createHash('sha256').update(str, 'utf8').digest(encoding);\n}\n\nfunction logFailure(error, failedItems) {\n    if (logFailedResponses) {\n        console.log('Error: ' + JSON.stringify(error, null, 2));\n\n        if (failedItems \u0026\u0026 failedItems.length \u003e 0) {\n            console.log(\"Failed Items: \" +\n                JSON.stringify(failedItems, null, 2));\n        }\n    }\n}\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "ELASTICSEARCH/lambda_code/index.js",
            "id": "adf6b2e16c82997fa1bbdaac88542c445808d3df",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.monitoring.data.template_file.lambda_code_index_template"
          ]
        }
      ]
    },
    {
      "module": "module.mq-ingest",
      "mode": "managed",
      "type": "aws_mq_broker",
      "name": "ingest",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "apply_immediately": true,
            "arn": "arn:aws:mq:us-east-1:799732994462:broker:hydrovis-uat-dataingest-rabbitmq-9e90e3:b-57baada6-d107-49f3-bdbf-07e453f342b7",
            "authentication_strategy": "simple",
            "auto_minor_version_upgrade": true,
            "broker_name": "hydrovis-uat-dataingest-rabbitmq-9e90e3",
            "configuration": [],
            "deployment_mode": "SINGLE_INSTANCE",
            "encryption_options": [
              {
                "kms_key_id": "",
                "use_aws_owned_key": true
              }
            ],
            "engine_type": "RabbitMQ",
            "engine_version": "3.8.23",
            "host_instance_type": "mq.t3.micro",
            "id": "b-57baada6-d107-49f3-bdbf-07e453f342b7",
            "instances": [
              {
                "console_url": "https://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com",
                "endpoints": [
                  "amqps://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com:5671"
                ],
                "ip_address": ""
              }
            ],
            "ldap_server_metadata": [],
            "logs": [
              {
                "audit": "",
                "general": true
              }
            ],
            "maintenance_window_start_time": [
              {
                "day_of_week": "WEDNESDAY",
                "time_of_day": "21:00",
                "time_zone": "UTC"
              }
            ],
            "publicly_accessible": false,
            "security_groups": [
              "sg-0584d6697b3f809b5"
            ],
            "storage_type": "ebs",
            "subnet_ids": [
              "subnet-04914abb2085ae5dd"
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "user": []
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "user"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "broker_name"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.secrets-manager.module.secret.random_password.password",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "data",
      "type": "aws_ami",
      "name": "linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-025b76b777024295e",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0a876d9af57e76134",
                  "throughput": "0",
                  "volume_size": "12",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-11-19T21:49:21.000Z",
            "description": "add docker for stig",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-amznlinux2-STIGD*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-025b76b777024295e",
            "image_id": "ami-025b76b777024295e",
            "image_location": "526904826677/hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0a876d9af57e76134",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "data",
      "type": "cloudinit_config",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "688958019",
            "part": [
              {
                "content": "#!/bin/bash\n\nFORECASTDB=\"rfcfcst\"\nLOCATIONDB=\"wrds_location3\"\nPGHOST=\"hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\"\nPGPORT=5432\nPGUSERNAME=\"postgres\"\nPGPASSWORD=\"JLrvuU9e0WKL1Ii7nNPXV6n8D\"\nDEPLOYMENT_BUCKET=\"hydrovis-uat-deployment-us-east-1\"\nRFCDBUSERS=\"rfc_fcst, rfc_fcst_ro\"\nLOCATIONDBUSERS=\"rfc_fcst_ro, location_ro_user_grp\"\n\n### install postgresql ###\nsudo yum install -y postgresql12\n\n### Constants ###\nHOME=\"/home/ec2-user\"\nPGPASS=\"${HOME}/.pgpass\"\nHML_S3_PREFIX=\"ingest/database\"\nPOSTGIS_SCRIPT=\"postgis_setup.sql\"\nUSERS_SCRIPT=\"db_users.sql\"\nBASE_SCRIPT=\"${FORECASTDB}_base.sql.gz\"\nLOCATION_S3_PREFIX=\"location/database\"\nLOCATION_DUMP=\"wrds_location3.dump\"\nDOWNLOAD_DIRECTORY=\"${HOME}/postgres_data\"\nPOSTGIS_FILE=\"${DOWNLOAD_DIRECTORY}/${POSTGIS_SCRIPT}\"\nBASE_FILE=\"${DOWNLOAD_DIRECTORY}/${BASE_SCRIPT}\"\nUSERS_FILE=\"/deploy_files/${USERS_SCRIPT}\"\nLOCATION_FILE=\"${DOWNLOAD_DIRECTORY}/${LOCATION_DUMP}\"\nDROP_DATABASE=0\nREMOVE_BASE_FILE=0\nREMOVE_USERS_FILE=0\nREMOVE_DIRECTORY=0\n\nexport PGPASSWORD=${PGPASSWORD}\n\n### Create/validate pgpass file ###\nfunction create_pgpass()\n{\n  local FOUND=0\n  local PGPASSLINE=\"${PGHOST}:*:*:${PGUSERNAME}:${PGPASSWORD}\"\n  ### Check to see if file is present, and if so, validate it ###\n  if [ -f \"${PGPASS}\" ]\n  then\n    while IFS= read -r LINE\n    do\n      if [ \"${LINE}\" = \"${PGPASSLINE}\" ]\n      then\n        FOUND=1\n        break \n      fi\n    done \u003c \"${PGPASS}\"\n    if [ ${FOUND} -eq 0 ]\n    then\n      echo \"Appending line to ${PGPASS}\"\n      echo \"${PGPASSLINE}\" \u003e\u003e \"${PGPASS}\"\n    else\n      echo \"Matching entry found in ${PGPASS}. No need to modify.\"\n    fi\n  else\n    echo \"Creating new ${PGPASS}...\"\n    echo \"${PGPASSLINE}\" \u003e \"${PGPASS}\"\n  fi\n\n  chmod 600 \"${PGPASS}\"\n}\n\n# Create PGPASS\ncreate_pgpass\n\n# Download database contents\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\nREMOVE_USERS_FILE=1\n\n# Uncompress\ngzip -d \"${BASE_FILE}\"\nBASE_FILE=\"${BASE_FILE/.gz}\"\n\n# Setting up DB\necho \"Setting up postgis..\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${POSTGIS_FILE}\"\n\n# Update users\necho \"Creating users...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${USERS_FILE}\"\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${FORECASTDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${FORECASTDB} to ${RFCDBUSERS};\n            COMMENT ON DATABASE ${FORECASTDB} IS \n            'database for storing river forecasts';\"\n\n# Create table schemas for HML Ingest\necho \"Setting up HML ingest on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${BASE_FILE}\"\n\n# Dump WRDS Location\necho \"Setting up WRDS Location on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -d \"${FORECASTDB}\" -c \"\\c\" -c \"create database ${LOCATIONDB};\"\npg_restore -h \"${PGHOST}\" -p ${PGPORT} -d \"${LOCATIONDB}\" -U ${PGUSERNAME} -v ${LOCATION_FILE}\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${LOCATIONDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${LOCATIONDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${LOCATIONDB} to ${LOCATIONDBUSERS};\n            COMMENT ON DATABASE ${LOCATIONDB} IS \n            'database for storing location metadata';\"\n\nDROP_DATABASE=0\n\n\n\n",
                "content_type": "text/x-shellscript",
                "filename": "postgres_setup.sh",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\n\nMQINGESTENDPOINT=\"amqps://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com:5671\"\nMQUSERNAME=\"rabbit_admin\"\nMQPASSWORD=\"yT5XsjsOurFACmkz4pL4wHtKF\"\nRFC_FCST_USER=\"rfc_fcst_user\"\nRFC_FCST_USER_PASSWORD=\"J9SabmtesQFUF5O50t2o8O3Cb\"\nMQVHOST=\"user_acceptance_testing\"\n\n### Get RabbitMQ Endpoint ###\nRSCHEME=\"${MQINGESTENDPOINT/:*}\"\nRPORT=\"${MQINGESTENDPOINT##*:}\"\nRHOST=$(echo ${MQINGESTENDPOINT} | cut -d : -f 2 | tr -d \"/\")\n\necho \"Adding ${MQVHOST} vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     \"https://${RHOST}/api/vhosts/${MQVHOST}\"\n\necho \"Removing default vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X DELETE \"https://${RHOST}/api/vhosts/%2f\"\n\necho \"Adding ${RFC_FCST_USER} to ${RHOST}\"\ncurl --trace-ascii /dev/stdout -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"password\":\"'\"${RFC_FCST_USER_PASSWORD}\"'\",\"tags\":\"none\"}' \\\n     \"https://${RHOST}/api/users/${RFC_FCST_USER}\"\n\necho \"Adding hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_hml_event_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/hml_event_queue\"\n\necho \"Adding xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_xml_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/xml_queue\"\n\necho \"Adding dl_xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"xml_queue\",\"x-message-ttl\":60000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_xml_queue\"\n\necho \"Adding dl_hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"hml_event_queue\",\"x-message-ttl\":900000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_hml_event_queue\"\n\necho \"Adding dl.hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/dl.hml\"\n\necho \"Adding hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/hml\"\n\necho \"Binding dl.hml exchange to dl_hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_hml_event_queue\"\n\necho \"Binding dl.hml exchange to dl_xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_xml_queue\"\n\necho \"Binding hml exchange to hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/hml_event_queue\"\n\necho \"Binding hml exchange to xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/xml_queue\"\n\necho \"Updating permissions for ${RFC_FCST_USER}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}' \\\n     \"https://${RHOST}/api/permissions/${MQVHOST}/${RFC_FCST_USER}\"\n",
                "content_type": "text/x-shellscript",
                "filename": "rabbitmq_setup.sh",
                "merge_type": ""
              },
              {
                "content": "#cloud-config\n{\"write_files\":[{\"content\":\"-- ROLES\\n\\nCREATE ROLE nwm_viz_ro;\\nALTER ROLE nwm_viz_ro WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '7AYiJbyLAzDFeJbP27HvCsmJA';\\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the Viz databases';\\n\\nCREATE ROLE rfc_fcst;\\nALTER ROLE rfc_fcst WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'LvUWPMec96KIb91W8zjfrGjp3';\\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the RFC Forecast databases';\\n\\nCREATE ROLE rfc_fcst_ro_user;\\nALTER ROLE rfc_fcst_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'JdjES1KtMwGvr3UVkYwgawGvi';\\nCOMMENT ON ROLE rfc_fcst_ro_user IS 'Read-only user role for the RFC Forecast databases';\\n\\nCREATE ROLE rfc_fcst_user;\\nALTER ROLE rfc_fcst_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'J9SabmtesQFUF5O50t2o8O3Cb';\\nCOMMENT ON ROLE rfc_fcst_user IS 'Read-write user role for the RFC Forecast databases';\\n\\nCREATE ROLE location_ro_user;\\nALTER ROLE location_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'rtKiTGcG7E9WKI8CqqtQsDGBM';\\nCOMMENT ON ROLE location_ro_user IS 'Read-only user role for the Location databases';\\n\\nCREATE ROLE wrds_svc_rw_user;\\nALTER ROLE wrds_svc_rw_user WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE wrds_svc_rw_user IS 'Read-write user role for the Location databases';\\n\\n-- GROUPS\\n\\nCREATE ROLE rfc_fcst_ro;\\nALTER ROLE rfc_fcst_ro WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE rfc_fcst_ro IS 'Read-only group role for the RFC Forecast databases';\\n\\nCREATE ROLE location_ro_user_grp;\\nALTER ROLE location_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE location_ro_user_grp IS 'Read-only group role for the Location databases';\\n\\nCREATE ROLE nwm_ro_user_grp;\\nALTER ROLE nwm_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE nwm_ro_user_grp IS 'Read-only group role for the Location databases';\\n\\n-- GROUP ASSIGNMENT\\n\\nGRANT rfc_fcst_ro TO rfc_fcst_ro_user ;\\nGRANT rfc_fcst TO rfc_fcst_user ;\\nGRANT rfc_fcst_ro TO nwm_viz_ro ;\\nGRANT location_ro_user_grp TO location_ro_user ;\\n\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/db_users.sql\",\"permissions\":\"0400\"}]}\n",
                "content_type": "text/cloud-config",
                "filename": "cloud-config.yaml",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"postgres_setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/bash\n\nFORECASTDB=\"rfcfcst\"\nLOCATIONDB=\"wrds_location3\"\nPGHOST=\"hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\"\nPGPORT=5432\nPGUSERNAME=\"postgres\"\nPGPASSWORD=\"JLrvuU9e0WKL1Ii7nNPXV6n8D\"\nDEPLOYMENT_BUCKET=\"hydrovis-uat-deployment-us-east-1\"\nRFCDBUSERS=\"rfc_fcst, rfc_fcst_ro\"\nLOCATIONDBUSERS=\"rfc_fcst_ro, location_ro_user_grp\"\n\n### install postgresql ###\nsudo yum install -y postgresql12\n\n### Constants ###\nHOME=\"/home/ec2-user\"\nPGPASS=\"${HOME}/.pgpass\"\nHML_S3_PREFIX=\"ingest/database\"\nPOSTGIS_SCRIPT=\"postgis_setup.sql\"\nUSERS_SCRIPT=\"db_users.sql\"\nBASE_SCRIPT=\"${FORECASTDB}_base.sql.gz\"\nLOCATION_S3_PREFIX=\"location/database\"\nLOCATION_DUMP=\"wrds_location3.dump\"\nDOWNLOAD_DIRECTORY=\"${HOME}/postgres_data\"\nPOSTGIS_FILE=\"${DOWNLOAD_DIRECTORY}/${POSTGIS_SCRIPT}\"\nBASE_FILE=\"${DOWNLOAD_DIRECTORY}/${BASE_SCRIPT}\"\nUSERS_FILE=\"/deploy_files/${USERS_SCRIPT}\"\nLOCATION_FILE=\"${DOWNLOAD_DIRECTORY}/${LOCATION_DUMP}\"\nDROP_DATABASE=0\nREMOVE_BASE_FILE=0\nREMOVE_USERS_FILE=0\nREMOVE_DIRECTORY=0\n\nexport PGPASSWORD=${PGPASSWORD}\n\n### Create/validate pgpass file ###\nfunction create_pgpass()\n{\n  local FOUND=0\n  local PGPASSLINE=\"${PGHOST}:*:*:${PGUSERNAME}:${PGPASSWORD}\"\n  ### Check to see if file is present, and if so, validate it ###\n  if [ -f \"${PGPASS}\" ]\n  then\n    while IFS= read -r LINE\n    do\n      if [ \"${LINE}\" = \"${PGPASSLINE}\" ]\n      then\n        FOUND=1\n        break \n      fi\n    done \u003c \"${PGPASS}\"\n    if [ ${FOUND} -eq 0 ]\n    then\n      echo \"Appending line to ${PGPASS}\"\n      echo \"${PGPASSLINE}\" \u003e\u003e \"${PGPASS}\"\n    else\n      echo \"Matching entry found in ${PGPASS}. No need to modify.\"\n    fi\n  else\n    echo \"Creating new ${PGPASS}...\"\n    echo \"${PGPASSLINE}\" \u003e \"${PGPASS}\"\n  fi\n\n  chmod 600 \"${PGPASS}\"\n}\n\n# Create PGPASS\ncreate_pgpass\n\n# Download database contents\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\nREMOVE_USERS_FILE=1\n\n# Uncompress\ngzip -d \"${BASE_FILE}\"\nBASE_FILE=\"${BASE_FILE/.gz}\"\n\n# Setting up DB\necho \"Setting up postgis..\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${POSTGIS_FILE}\"\n\n# Update users\necho \"Creating users...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${USERS_FILE}\"\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${FORECASTDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${FORECASTDB} to ${RFCDBUSERS};\n            COMMENT ON DATABASE ${FORECASTDB} IS \n            'database for storing river forecasts';\"\n\n# Create table schemas for HML Ingest\necho \"Setting up HML ingest on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${BASE_FILE}\"\n\n# Dump WRDS Location\necho \"Setting up WRDS Location on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -d \"${FORECASTDB}\" -c \"\\c\" -c \"create database ${LOCATIONDB};\"\npg_restore -h \"${PGHOST}\" -p ${PGPORT} -d \"${LOCATIONDB}\" -U ${PGUSERNAME} -v ${LOCATION_FILE}\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${LOCATIONDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${LOCATIONDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${LOCATIONDB} to ${LOCATIONDBUSERS};\n            COMMENT ON DATABASE ${LOCATIONDB} IS \n            'database for storing location metadata';\"\n\nDROP_DATABASE=0\n\n\n\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"rabbitmq_setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/bash\n\nMQINGESTENDPOINT=\"amqps://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com:5671\"\nMQUSERNAME=\"rabbit_admin\"\nMQPASSWORD=\"yT5XsjsOurFACmkz4pL4wHtKF\"\nRFC_FCST_USER=\"rfc_fcst_user\"\nRFC_FCST_USER_PASSWORD=\"J9SabmtesQFUF5O50t2o8O3Cb\"\nMQVHOST=\"user_acceptance_testing\"\n\n### Get RabbitMQ Endpoint ###\nRSCHEME=\"${MQINGESTENDPOINT/:*}\"\nRPORT=\"${MQINGESTENDPOINT##*:}\"\nRHOST=$(echo ${MQINGESTENDPOINT} | cut -d : -f 2 | tr -d \"/\")\n\necho \"Adding ${MQVHOST} vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     \"https://${RHOST}/api/vhosts/${MQVHOST}\"\n\necho \"Removing default vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X DELETE \"https://${RHOST}/api/vhosts/%2f\"\n\necho \"Adding ${RFC_FCST_USER} to ${RHOST}\"\ncurl --trace-ascii /dev/stdout -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"password\":\"'\"${RFC_FCST_USER_PASSWORD}\"'\",\"tags\":\"none\"}' \\\n     \"https://${RHOST}/api/users/${RFC_FCST_USER}\"\n\necho \"Adding hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_hml_event_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/hml_event_queue\"\n\necho \"Adding xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_xml_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/xml_queue\"\n\necho \"Adding dl_xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"xml_queue\",\"x-message-ttl\":60000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_xml_queue\"\n\necho \"Adding dl_hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"hml_event_queue\",\"x-message-ttl\":900000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_hml_event_queue\"\n\necho \"Adding dl.hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/dl.hml\"\n\necho \"Adding hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/hml\"\n\necho \"Binding dl.hml exchange to dl_hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_hml_event_queue\"\n\necho \"Binding dl.hml exchange to dl_xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_xml_queue\"\n\necho \"Binding hml exchange to hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/hml_event_queue\"\n\necho \"Binding hml exchange to xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/xml_queue\"\n\necho \"Updating permissions for ${RFC_FCST_USER}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}' \\\n     \"https://${RHOST}/api/permissions/${MQVHOST}/${RFC_FCST_USER}\"\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"cloud-config.yaml\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\n{\"write_files\":[{\"content\":\"-- ROLES\\n\\nCREATE ROLE nwm_viz_ro;\\nALTER ROLE nwm_viz_ro WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '7AYiJbyLAzDFeJbP27HvCsmJA';\\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the Viz databases';\\n\\nCREATE ROLE rfc_fcst;\\nALTER ROLE rfc_fcst WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'LvUWPMec96KIb91W8zjfrGjp3';\\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the RFC Forecast databases';\\n\\nCREATE ROLE rfc_fcst_ro_user;\\nALTER ROLE rfc_fcst_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'JdjES1KtMwGvr3UVkYwgawGvi';\\nCOMMENT ON ROLE rfc_fcst_ro_user IS 'Read-only user role for the RFC Forecast databases';\\n\\nCREATE ROLE rfc_fcst_user;\\nALTER ROLE rfc_fcst_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'J9SabmtesQFUF5O50t2o8O3Cb';\\nCOMMENT ON ROLE rfc_fcst_user IS 'Read-write user role for the RFC Forecast databases';\\n\\nCREATE ROLE location_ro_user;\\nALTER ROLE location_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'rtKiTGcG7E9WKI8CqqtQsDGBM';\\nCOMMENT ON ROLE location_ro_user IS 'Read-only user role for the Location databases';\\n\\nCREATE ROLE wrds_svc_rw_user;\\nALTER ROLE wrds_svc_rw_user WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE wrds_svc_rw_user IS 'Read-write user role for the Location databases';\\n\\n-- GROUPS\\n\\nCREATE ROLE rfc_fcst_ro;\\nALTER ROLE rfc_fcst_ro WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE rfc_fcst_ro IS 'Read-only group role for the RFC Forecast databases';\\n\\nCREATE ROLE location_ro_user_grp;\\nALTER ROLE location_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE location_ro_user_grp IS 'Read-only group role for the Location databases';\\n\\nCREATE ROLE nwm_ro_user_grp;\\nALTER ROLE nwm_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\\nCOMMENT ON ROLE nwm_ro_user_grp IS 'Read-only group role for the Location databases';\\n\\n-- GROUP ASSIGNMENT\\n\\nGRANT rfc_fcst_ro TO rfc_fcst_ro_user ;\\nGRANT rfc_fcst TO rfc_fcst_user ;\\nGRANT rfc_fcst_ro TO nwm_viz_ro ;\\nGRANT location_ro_user_grp TO location_ro_user ;\\n\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/db_users.sql\",\"permissions\":\"0400\"}]}\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "data",
      "type": "template_file",
      "name": "db_users",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1d3d2c80b431104659fbd54e56cbadf7e47109fe1ad8e94e7a0c2eb9f8dd74bf",
            "rendered": "-- ROLES\n\nCREATE ROLE nwm_viz_ro;\nALTER ROLE nwm_viz_ro WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '7AYiJbyLAzDFeJbP27HvCsmJA';\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the Viz databases';\n\nCREATE ROLE rfc_fcst;\nALTER ROLE rfc_fcst WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'LvUWPMec96KIb91W8zjfrGjp3';\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the RFC Forecast databases';\n\nCREATE ROLE rfc_fcst_ro_user;\nALTER ROLE rfc_fcst_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'JdjES1KtMwGvr3UVkYwgawGvi';\nCOMMENT ON ROLE rfc_fcst_ro_user IS 'Read-only user role for the RFC Forecast databases';\n\nCREATE ROLE rfc_fcst_user;\nALTER ROLE rfc_fcst_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS ENCRYPTED PASSWORD 'J9SabmtesQFUF5O50t2o8O3Cb';\nCOMMENT ON ROLE rfc_fcst_user IS 'Read-write user role for the RFC Forecast databases';\n\nCREATE ROLE location_ro_user;\nALTER ROLE location_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD 'rtKiTGcG7E9WKI8CqqtQsDGBM';\nCOMMENT ON ROLE location_ro_user IS 'Read-only user role for the Location databases';\n\nCREATE ROLE wrds_svc_rw_user;\nALTER ROLE wrds_svc_rw_user WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE wrds_svc_rw_user IS 'Read-write user role for the Location databases';\n\n-- GROUPS\n\nCREATE ROLE rfc_fcst_ro;\nALTER ROLE rfc_fcst_ro WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE rfc_fcst_ro IS 'Read-only group role for the RFC Forecast databases';\n\nCREATE ROLE location_ro_user_grp;\nALTER ROLE location_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE location_ro_user_grp IS 'Read-only group role for the Location databases';\n\nCREATE ROLE nwm_ro_user_grp;\nALTER ROLE nwm_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE nwm_ro_user_grp IS 'Read-only group role for the Location databases';\n\n-- GROUP ASSIGNMENT\n\nGRANT rfc_fcst_ro TO rfc_fcst_ro_user ;\nGRANT rfc_fcst TO rfc_fcst_user ;\nGRANT rfc_fcst_ro TO nwm_viz_ro ;\nGRANT location_ro_user_grp TO location_ro_user ;\n\n",
            "template": "-- ROLES\n\nCREATE ROLE nwm_viz_ro;\nALTER ROLE nwm_viz_ro WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '${NWM_VIZ_RO}';\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the Viz databases';\n\nCREATE ROLE rfc_fcst;\nALTER ROLE rfc_fcst WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS ENCRYPTED PASSWORD '${RFC_FCST}';\nCOMMENT ON ROLE rfc_fcst IS 'Read-write group role for the RFC Forecast databases';\n\nCREATE ROLE rfc_fcst_ro_user;\nALTER ROLE rfc_fcst_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '${RFC_FCST_RO_USER}';\nCOMMENT ON ROLE rfc_fcst_ro_user IS 'Read-only user role for the RFC Forecast databases';\n\nCREATE ROLE rfc_fcst_user;\nALTER ROLE rfc_fcst_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS ENCRYPTED PASSWORD '${RFC_FCST_USER}';\nCOMMENT ON ROLE rfc_fcst_user IS 'Read-write user role for the RFC Forecast databases';\n\nCREATE ROLE location_ro_user;\nALTER ROLE location_ro_user WITH INHERIT NOCREATEROLE NOCREATEDB LOGIN NOBYPASSRLS CONNECTION LIMIT 45 ENCRYPTED PASSWORD '${LOCATION_RO_USER}';\nCOMMENT ON ROLE location_ro_user IS 'Read-only user role for the Location databases';\n\nCREATE ROLE wrds_svc_rw_user;\nALTER ROLE wrds_svc_rw_user WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE wrds_svc_rw_user IS 'Read-write user role for the Location databases';\n\n-- GROUPS\n\nCREATE ROLE rfc_fcst_ro;\nALTER ROLE rfc_fcst_ro WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE rfc_fcst_ro IS 'Read-only group role for the RFC Forecast databases';\n\nCREATE ROLE location_ro_user_grp;\nALTER ROLE location_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE location_ro_user_grp IS 'Read-only group role for the Location databases';\n\nCREATE ROLE nwm_ro_user_grp;\nALTER ROLE nwm_ro_user_grp WITH INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOBYPASSRLS;\nCOMMENT ON ROLE nwm_ro_user_grp IS 'Read-only group role for the Location databases';\n\n-- GROUP ASSIGNMENT\n\nGRANT rfc_fcst_ro TO rfc_fcst_ro_user ;\nGRANT rfc_fcst TO rfc_fcst_user ;\nGRANT rfc_fcst_ro TO nwm_viz_ro ;\nGRANT location_ro_user_grp TO location_ro_user ;\n\n",
            "vars": {
              "LOCATION_RO_USER": "rtKiTGcG7E9WKI8CqqtQsDGBM",
              "NWM_VIZ_RO": "7AYiJbyLAzDFeJbP27HvCsmJA",
              "RFC_FCST": "LvUWPMec96KIb91W8zjfrGjp3",
              "RFC_FCST_RO_USER": "JdjES1KtMwGvr3UVkYwgawGvi",
              "RFC_FCST_USER": "J9SabmtesQFUF5O50t2o8O3Cb"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "LOCATION_RO_USER",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "NWM_VIZ_RO",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RFC_FCST",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RFC_FCST_RO_USER",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RFC_FCST_USER",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "data",
      "type": "template_file",
      "name": "postgresql_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "792f86f4f1f1d79a9f1bd6ac2a2d7a4b87b4a700880fc54508b6381c319c50d2",
            "rendered": "#!/bin/bash\n\nFORECASTDB=\"rfcfcst\"\nLOCATIONDB=\"wrds_location3\"\nPGHOST=\"hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com\"\nPGPORT=5432\nPGUSERNAME=\"postgres\"\nPGPASSWORD=\"JLrvuU9e0WKL1Ii7nNPXV6n8D\"\nDEPLOYMENT_BUCKET=\"hydrovis-uat-deployment-us-east-1\"\nRFCDBUSERS=\"rfc_fcst, rfc_fcst_ro\"\nLOCATIONDBUSERS=\"rfc_fcst_ro, location_ro_user_grp\"\n\n### install postgresql ###\nsudo yum install -y postgresql12\n\n### Constants ###\nHOME=\"/home/ec2-user\"\nPGPASS=\"${HOME}/.pgpass\"\nHML_S3_PREFIX=\"ingest/database\"\nPOSTGIS_SCRIPT=\"postgis_setup.sql\"\nUSERS_SCRIPT=\"db_users.sql\"\nBASE_SCRIPT=\"${FORECASTDB}_base.sql.gz\"\nLOCATION_S3_PREFIX=\"location/database\"\nLOCATION_DUMP=\"wrds_location3.dump\"\nDOWNLOAD_DIRECTORY=\"${HOME}/postgres_data\"\nPOSTGIS_FILE=\"${DOWNLOAD_DIRECTORY}/${POSTGIS_SCRIPT}\"\nBASE_FILE=\"${DOWNLOAD_DIRECTORY}/${BASE_SCRIPT}\"\nUSERS_FILE=\"/deploy_files/${USERS_SCRIPT}\"\nLOCATION_FILE=\"${DOWNLOAD_DIRECTORY}/${LOCATION_DUMP}\"\nDROP_DATABASE=0\nREMOVE_BASE_FILE=0\nREMOVE_USERS_FILE=0\nREMOVE_DIRECTORY=0\n\nexport PGPASSWORD=${PGPASSWORD}\n\n### Create/validate pgpass file ###\nfunction create_pgpass()\n{\n  local FOUND=0\n  local PGPASSLINE=\"${PGHOST}:*:*:${PGUSERNAME}:${PGPASSWORD}\"\n  ### Check to see if file is present, and if so, validate it ###\n  if [ -f \"${PGPASS}\" ]\n  then\n    while IFS= read -r LINE\n    do\n      if [ \"${LINE}\" = \"${PGPASSLINE}\" ]\n      then\n        FOUND=1\n        break \n      fi\n    done \u003c \"${PGPASS}\"\n    if [ ${FOUND} -eq 0 ]\n    then\n      echo \"Appending line to ${PGPASS}\"\n      echo \"${PGPASSLINE}\" \u003e\u003e \"${PGPASS}\"\n    else\n      echo \"Matching entry found in ${PGPASS}. No need to modify.\"\n    fi\n  else\n    echo \"Creating new ${PGPASS}...\"\n    echo \"${PGPASSLINE}\" \u003e \"${PGPASS}\"\n  fi\n\n  chmod 600 \"${PGPASS}\"\n}\n\n# Create PGPASS\ncreate_pgpass\n\n# Download database contents\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\nREMOVE_USERS_FILE=1\n\n# Uncompress\ngzip -d \"${BASE_FILE}\"\nBASE_FILE=\"${BASE_FILE/.gz}\"\n\n# Setting up DB\necho \"Setting up postgis..\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${POSTGIS_FILE}\"\n\n# Update users\necho \"Creating users...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${USERS_FILE}\"\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${FORECASTDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${FORECASTDB} to ${RFCDBUSERS};\n            COMMENT ON DATABASE ${FORECASTDB} IS \n            'database for storing river forecasts';\"\n\n# Create table schemas for HML Ingest\necho \"Setting up HML ingest on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${BASE_FILE}\"\n\n# Dump WRDS Location\necho \"Setting up WRDS Location on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -d \"${FORECASTDB}\" -c \"\\c\" -c \"create database ${LOCATIONDB};\"\npg_restore -h \"${PGHOST}\" -p ${PGPORT} -d \"${LOCATIONDB}\" -U ${PGUSERNAME} -v ${LOCATION_FILE}\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${LOCATIONDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${LOCATIONDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${LOCATIONDB} to ${LOCATIONDBUSERS};\n            COMMENT ON DATABASE ${LOCATIONDB} IS \n            'database for storing location metadata';\"\n\nDROP_DATABASE=0\n\n\n\n",
            "template": "#!/bin/bash\n\nFORECASTDB=\"${FORECASTDB}\"\nLOCATIONDB=\"${LOCATIONDB}\"\nPGHOST=\"${PGHOST}\"\nPGPORT=${PGPORT}\nPGUSERNAME=\"${PGUSERNAME}\"\nPGPASSWORD=\"${PGPASSWORD}\"\nDEPLOYMENT_BUCKET=\"${DEPLOYMENT_BUCKET}\"\nRFCDBUSERS=\"${RFCDBUSERS}\"\nLOCATIONDBUSERS=\"${LOCATIONDBUSERS}\"\n\n${INITIALIZATION_SCRIPT}\n\n",
            "vars": {
              "DEPLOYMENT_BUCKET": "hydrovis-uat-deployment-us-east-1",
              "FORECASTDB": "rfcfcst",
              "INITIALIZATION_SCRIPT": "### install postgresql ###\nsudo yum install -y postgresql12\n\n### Constants ###\nHOME=\"/home/ec2-user\"\nPGPASS=\"${HOME}/.pgpass\"\nHML_S3_PREFIX=\"ingest/database\"\nPOSTGIS_SCRIPT=\"postgis_setup.sql\"\nUSERS_SCRIPT=\"db_users.sql\"\nBASE_SCRIPT=\"${FORECASTDB}_base.sql.gz\"\nLOCATION_S3_PREFIX=\"location/database\"\nLOCATION_DUMP=\"wrds_location3.dump\"\nDOWNLOAD_DIRECTORY=\"${HOME}/postgres_data\"\nPOSTGIS_FILE=\"${DOWNLOAD_DIRECTORY}/${POSTGIS_SCRIPT}\"\nBASE_FILE=\"${DOWNLOAD_DIRECTORY}/${BASE_SCRIPT}\"\nUSERS_FILE=\"/deploy_files/${USERS_SCRIPT}\"\nLOCATION_FILE=\"${DOWNLOAD_DIRECTORY}/${LOCATION_DUMP}\"\nDROP_DATABASE=0\nREMOVE_BASE_FILE=0\nREMOVE_USERS_FILE=0\nREMOVE_DIRECTORY=0\n\nexport PGPASSWORD=${PGPASSWORD}\n\n### Create/validate pgpass file ###\nfunction create_pgpass()\n{\n  local FOUND=0\n  local PGPASSLINE=\"${PGHOST}:*:*:${PGUSERNAME}:${PGPASSWORD}\"\n  ### Check to see if file is present, and if so, validate it ###\n  if [ -f \"${PGPASS}\" ]\n  then\n    while IFS= read -r LINE\n    do\n      if [ \"${LINE}\" = \"${PGPASSLINE}\" ]\n      then\n        FOUND=1\n        break \n      fi\n    done \u003c \"${PGPASS}\"\n    if [ ${FOUND} -eq 0 ]\n    then\n      echo \"Appending line to ${PGPASS}\"\n      echo \"${PGPASSLINE}\" \u003e\u003e \"${PGPASS}\"\n    else\n      echo \"Matching entry found in ${PGPASS}. No need to modify.\"\n    fi\n  else\n    echo \"Creating new ${PGPASS}...\"\n    echo \"${PGPASSLINE}\" \u003e \"${PGPASS}\"\n  fi\n\n  chmod 600 \"${PGPASS}\"\n}\n\n# Create PGPASS\ncreate_pgpass\n\n# Download database contents\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${POSTGIS_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${HML_S3_PREFIX}/${BASE_SCRIPT} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\necho \"Downloading s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP}...\"\naws s3 cp s3://${DEPLOYMENT_BUCKET}/${LOCATION_S3_PREFIX}/${LOCATION_DUMP} ${DOWNLOAD_DIRECTORY}/\nREMOVE_BASE_FILE=1\n\nREMOVE_USERS_FILE=1\n\n# Uncompress\ngzip -d \"${BASE_FILE}\"\nBASE_FILE=\"${BASE_FILE/.gz}\"\n\n# Setting up DB\necho \"Setting up postgis..\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${POSTGIS_FILE}\"\n\n# Update users\necho \"Creating users...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${USERS_FILE}\"\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${FORECASTDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${FORECASTDB} to ${RFCDBUSERS};\n            COMMENT ON DATABASE ${FORECASTDB} IS \n            'database for storing river forecasts';\"\n\n# Create table schemas for HML Ingest\necho \"Setting up HML ingest on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${FORECASTDB}\" -f \"${BASE_FILE}\"\n\n# Dump WRDS Location\necho \"Setting up WRDS Location on ${PGHOST}...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -d \"${FORECASTDB}\" -c \"\\c\" -c \"create database ${LOCATIONDB};\"\npg_restore -h \"${PGHOST}\" -p ${PGPORT} -d \"${LOCATIONDB}\" -U ${PGUSERNAME} -v ${LOCATION_FILE}\n\n# Updating permissions\necho \"Granting database level permissions...\"\npsql -h \"${PGHOST}\" -U \"${PGUSERNAME}\" -p ${PGPORT} -d \"${LOCATIONDB}\" \\\n    -tAc \"REVOKE CONNECT ON DATABASE ${LOCATIONDB} FROM PUBLIC;\n            GRANT CONNECT ON DATABASE ${LOCATIONDB} to ${LOCATIONDBUSERS};\n            COMMENT ON DATABASE ${LOCATIONDB} IS \n            'database for storing location metadata';\"\n\nDROP_DATABASE=0\n\n",
              "LOCATIONDB": "wrds_location3",
              "LOCATIONDBUSERS": "rfc_fcst_ro, location_ro_user_grp",
              "PGHOST": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
              "PGPASSWORD": "JLrvuU9e0WKL1Ii7nNPXV6n8D",
              "PGPORT": "5432",
              "PGUSERNAME": "postgres",
              "RFCDBUSERS": "rfc_fcst, rfc_fcst_ro"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PGPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PGUSERNAME",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "data",
      "type": "template_file",
      "name": "rabbitmq_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "8bbaeb62ac1311109825ad4ef10ee325853c17cfa550b15d482cc496352ccf74",
            "rendered": "#!/bin/bash\n\nMQINGESTENDPOINT=\"amqps://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com:5671\"\nMQUSERNAME=\"rabbit_admin\"\nMQPASSWORD=\"yT5XsjsOurFACmkz4pL4wHtKF\"\nRFC_FCST_USER=\"rfc_fcst_user\"\nRFC_FCST_USER_PASSWORD=\"J9SabmtesQFUF5O50t2o8O3Cb\"\nMQVHOST=\"user_acceptance_testing\"\n\n### Get RabbitMQ Endpoint ###\nRSCHEME=\"${MQINGESTENDPOINT/:*}\"\nRPORT=\"${MQINGESTENDPOINT##*:}\"\nRHOST=$(echo ${MQINGESTENDPOINT} | cut -d : -f 2 | tr -d \"/\")\n\necho \"Adding ${MQVHOST} vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     \"https://${RHOST}/api/vhosts/${MQVHOST}\"\n\necho \"Removing default vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X DELETE \"https://${RHOST}/api/vhosts/%2f\"\n\necho \"Adding ${RFC_FCST_USER} to ${RHOST}\"\ncurl --trace-ascii /dev/stdout -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"password\":\"'\"${RFC_FCST_USER_PASSWORD}\"'\",\"tags\":\"none\"}' \\\n     \"https://${RHOST}/api/users/${RFC_FCST_USER}\"\n\necho \"Adding hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_hml_event_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/hml_event_queue\"\n\necho \"Adding xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_xml_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/xml_queue\"\n\necho \"Adding dl_xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"xml_queue\",\"x-message-ttl\":60000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_xml_queue\"\n\necho \"Adding dl_hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"hml_event_queue\",\"x-message-ttl\":900000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_hml_event_queue\"\n\necho \"Adding dl.hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/dl.hml\"\n\necho \"Adding hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/hml\"\n\necho \"Binding dl.hml exchange to dl_hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_hml_event_queue\"\n\necho \"Binding dl.hml exchange to dl_xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_xml_queue\"\n\necho \"Binding hml exchange to hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/hml_event_queue\"\n\necho \"Binding hml exchange to xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/xml_queue\"\n\necho \"Updating permissions for ${RFC_FCST_USER}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}' \\\n     \"https://${RHOST}/api/permissions/${MQVHOST}/${RFC_FCST_USER}\"\n",
            "template": "#!/bin/bash\n\nMQINGESTENDPOINT=\"${MQINGESTENDPOINT}\"\nMQUSERNAME=\"${MQUSERNAME}\"\nMQPASSWORD=\"${MQPASSWORD}\"\nRFC_FCST_USER=\"${RFC_FCST_USER}\"\nRFC_FCST_USER_PASSWORD=\"${RFC_FCST_USER_PASSWORD}\"\nMQVHOST=\"${MQVHOST}\"\n\n${INITIALIZATION_SCRIPT}",
            "vars": {
              "INITIALIZATION_SCRIPT": "### Get RabbitMQ Endpoint ###\nRSCHEME=\"${MQINGESTENDPOINT/:*}\"\nRPORT=\"${MQINGESTENDPOINT##*:}\"\nRHOST=$(echo ${MQINGESTENDPOINT} | cut -d : -f 2 | tr -d \"/\")\n\necho \"Adding ${MQVHOST} vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     \"https://${RHOST}/api/vhosts/${MQVHOST}\"\n\necho \"Removing default vhost to ${RHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X DELETE \"https://${RHOST}/api/vhosts/%2f\"\n\necho \"Adding ${RFC_FCST_USER} to ${RHOST}\"\ncurl --trace-ascii /dev/stdout -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"password\":\"'\"${RFC_FCST_USER_PASSWORD}\"'\",\"tags\":\"none\"}' \\\n     \"https://${RHOST}/api/users/${RFC_FCST_USER}\"\n\necho \"Adding hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_hml_event_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/hml_event_queue\"\n\necho \"Adding xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"dl.hml\",\"x-dead-letter-routing-key\":\"dl_xml_queue\"}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/xml_queue\"\n\necho \"Adding dl_xml_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"xml_queue\",\"x-message-ttl\":60000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_xml_queue\"\n\necho \"Adding dl_hml_event_queue queues for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"arguments\":{\"x-dead-letter-exchange\":\"hml\",\"x-dead-letter-routing-key\":\"hml_event_queue\",\"x-message-ttl\":900000}}' \\\n     \"https://${RHOST}/api/queues/${MQVHOST}/dl_hml_event_queue\"\n\necho \"Adding dl.hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/dl.hml\"\n\necho \"Adding hml exchange for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"auto_delete\":false,\"durable\":true,\"internal\": false,\"arguments\":{}}' \\\n     \"https://${RHOST}/api/exchanges/${MQVHOST}/hml\"\n\necho \"Binding dl.hml exchange to dl_hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_hml_event_queue\"\n\necho \"Binding dl.hml exchange to dl_xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"dl_xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/dl.hml/q/dl_xml_queue\"\n\necho \"Binding hml exchange to hml_event_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"hml_event_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/hml_event_queue\"\n\necho \"Binding hml exchange to xml_queue queue for ${MQVHOST}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X POST \\\n     -d '{\"routing_key\":\"xml_queue\", \"arguments\":{}}' \\\n     \"https://${RHOST}/api/bindings/${MQVHOST}/e/hml/q/xml_queue\"\n\necho \"Updating permissions for ${RFC_FCST_USER}\"\ncurl -u ${MQUSERNAME}:${MQPASSWORD} -H \"content-type:application/json\" -X PUT \\\n     -d '{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}' \\\n     \"https://${RHOST}/api/permissions/${MQVHOST}/${RFC_FCST_USER}\"\n",
              "MQINGESTENDPOINT": "amqps://b-57baada6-d107-49f3-bdbf-07e453f342b7.mq.us-east-1.amazonaws.com:5671",
              "MQPASSWORD": "yT5XsjsOurFACmkz4pL4wHtKF",
              "MQUSERNAME": "rabbit_admin",
              "MQVHOST": "user_acceptance_testing",
              "RFC_FCST_USER": "rfc_fcst_user",
              "RFC_FCST_USER_PASSWORD": "J9SabmtesQFUF5O50t2o8O3Cb"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "MQINGESTENDPOINT",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "MQPASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "MQUSERNAME",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RFC_FCST_USER",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "RFC_FCST_USER_PASSWORD",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.rds-bastion",
      "mode": "managed",
      "type": "aws_instance",
      "name": "rds-bastion",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-087880c5f90a432c3",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-05c33e323eba00ec4",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "hydrovis-uat-hml-ingest-role",
            "id": "i-05c33e323eba00ec4",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "m1.small",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0a3ce990fab76d93a",
            "private_dns": "ip-10-27-2-82.ec2.internal",
            "private_ip": "10.27.2.82",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-013b74e314794f669",
                "volume_size": 12,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-04914abb2085ae5dd",
            "tags": {
              "Name": "hv-uat-us-east-1a-rds-l-dba-1",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-us-east-1a-rds-l-dba-1",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "c289f7c1048c65333365bc83f088568b8606d181",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01a5ed608003e9f20",
              "sg-0584d6697b3f809b5",
              "sg-0e1ceb05bcc5bf0af"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.mq-ingest.aws_mq_broker.ingest",
            "module.rds-bastion.data.aws_ami.linux",
            "module.vpc.aws_route_table.private",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.vpc.aws_vpc.main",
            "module.rds-bastion.data.template_file.db_users",
            "module.secrets-manager.module.secret.random_password.password",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.rds-bastion.data.template_file.postgresql_setup",
            "module.iam-roles.aws_iam_instance_profile.hydrovis-hml-ingest-role",
            "module.rds-bastion.data.template_file.rabbitmq_setup",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.security-groups.aws_security_group.hv-rabbitmq",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.rds-bastion.data.cloudinit_config.startup",
            "module.rds-ingest.aws_db_instance.ingest",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.security-groups.aws_security_group.ssm-session-manager-sg"
          ]
        }
      ]
    },
    {
      "module": "module.rds-ingest",
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "ingest",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "address": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com",
            "allocated_storage": 100,
            "allow_major_version_upgrade": null,
            "apply_immediately": null,
            "arn": "arn:aws:rds:us-east-1:799732994462:db:hydrovis-uat-ingest",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1b",
            "backup_retention_period": 7,
            "backup_window": "05:52-06:22",
            "ca_cert_identifier": "rds-ca-2019",
            "character_set_name": null,
            "copy_tags_to_snapshot": true,
            "db_subnet_group_name": "rds_ingest_uat",
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_iam_role_name": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "hydrovis-uat-ingest.chdb0do7uljg.us-east-1.rds.amazonaws.com:5432",
            "engine": "postgres",
            "engine_version": "12.7",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "hydrovis-uat-ingest",
            "identifier": "hydrovis-uat-ingest",
            "identifier_prefix": null,
            "instance_class": "db.r6g.large",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/ccba4716-88b0-4d63-9d17-2e8a8512baa6",
            "latest_restorable_time": "2022-01-21T15:19:35Z",
            "license_model": "postgresql-license",
            "maintenance_window": "thu:07:39-thu:08:09",
            "max_allocated_storage": 0,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "name": "rfcfcst",
            "option_group_name": "default:postgres-12",
            "parameter_group_name": "default.postgres12",
            "password": "JLrvuU9e0WKL1Ii7nNPXV6n8D",
            "performance_insights_enabled": true,
            "performance_insights_kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/48b442f1-c714-4c26-bc7f-7ec3aa29c271",
            "performance_insights_retention_period": 7,
            "port": 5432,
            "publicly_accessible": false,
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-FLPT3BTCSKIH63R6FBETFIK244",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "security_group_names": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_type": "gp2",
            "tags": {
              "hydrovis-uat-data-ingest-rdsdbtag": "hydrovis-uat-data-ingest-rdsdbtag"
            },
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "hydrovis-uat-data-ingest-rdsdbtag": "hydrovis-uat-data-ingest-rdsdbtag",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "timezone": "",
            "username": "postgres",
            "vpc_security_group_ids": [
              "sg-0e1ceb05bcc5bf0af"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "username"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.secrets-manager.module.secret.random_password.password",
            "module.security-groups.aws_security_group.hydrovis-RDS",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.rds-ingest.aws_db_subnet_group.ingest",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_vpc.main",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.rds-ingest",
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "ingest",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:us-east-1:799732994462:subgrp:rds_ingest_uat",
            "description": "Managed by Terraform",
            "id": "rds_ingest_uat",
            "name": "rds_ingest_uat",
            "name_prefix": null,
            "subnet_ids": [
              "subnet-002c2ed1565d4579d",
              "subnet-04914abb2085ae5dd"
            ],
            "tags": {
              "Name": "My DB subnet group"
            },
            "tags_all": {
              "Name": "My DB subnet group",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private"
          ]
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "data",
      "type": "aws_ami",
      "name": "linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-025b76b777024295e",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0a876d9af57e76134",
                  "throughput": "0",
                  "volume_size": "12",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-11-19T21:49:21.000Z",
            "description": "add docker for stig",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-amznlinux2-STIGD*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-025b76b777024295e",
            "image_id": "ami-025b76b777024295e",
            "image_location": "526904826677/hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-amznlinux2-STIGD 2021-11-19T21-28-46.236Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0a876d9af57e76134",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "data",
      "type": "cloudinit_config",
      "name": "startup",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "4186077009",
            "part": [
              {
                "content": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=replace_route\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\n\necho \"Setting up RNR Mount\"\ncd\nsudo mkdir /rnr\nsudo file -s /dev/sdf\nsudo lsblk -f\nsudo mkfs -t xfs /dev/sdf\nsudo mount /dev/sdf /rnr\n#--------------------------------------------------\n#change the /etc/fstab file to make sure the volume mounts after a reboot\n#extract the UUID to be included in the /etc/fstab line\nblock_output=`sudo blkid | grep xfs | grep -v LABEL`\n# output example from block_output\n#/dev/nvme1n1: UUID=\"bb4ee817-111a-4cb6-b540-a40c1d34a8fa\" TYPE=\"xfs\"\nuuid_part=`echo $block_output | cut -d ' ' -f2 | sed 's/\\\"//g'`\n#Example fstab line to add to the end:\n#UUID=bb4ee817-111a-4cb6-b540-a40c1d34a8fa     /rnr        xfs    defaults,nofail   0   2\nexport line_to_add=\"$uuid_part        /rnr    xfs     defaults,nofail        0       2\"\necho $line_to_add \u003e\u003e \"/etc/fstab\"\n\n#-----------------------------------------------------\n\necho \"Installing System Dependencies\"\nsudo amazon-linux-extras install epel -y\nsudo yum-config-manager --enable epel\nsudo yum -y install git python3-devel openmpi-devel hdf5-devel  gcc-c++ cmake3 curl-devel make\nsudo yum -y install m4\n\necho \"Installing Python Dependencies\"\nsudo git clone https://github.com/Unidata/netcdf-c.git /opt/netcdf-c\ncd /opt/netcdf-c\nsudo cmake3 .\nsudo make install\nsudo git clone https://github.com/Unidata/netcdf-fortran.git /opt/netcdf-fortran\ncd /opt/netcdf-fortran\nsudo cmake3 .\nsudo make install\n\necho \"Updating Permissions\"\ncd\nsudo chown ssm-user: /rnr\n\necho \"Installing WRF-Hydro Files\"\ncd /rnr\naws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/wrf_hydro.tgz .\ntar -zxvf wrf_hydro.tgz\n\necho \"Installing Replace and Route\"\ncd /rnr\nsudo aws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/owp-viz-replace-route.tgz .\ntar -zxvf owp-viz-replace-route.tgz\n#git clone https://vlab.ncep.noaa.gov/code-review/a/owp-viz-replace-route\n\necho \"Installing RNR Dependencies\"\ncd /rnr/owp-viz-replace-route\n#sudo git checkout python-timeslicegen\nbash install.sh -s\n\necho \"Copying Static Resources\"\ncd /rnr\nsudo aws s3 cp  s3://hydrovis-uat-deployment-us-east-1/rnr/rnr_static.tgz  .\ntar -zxvf rnr_static.tgz\nsudo chown root static\nsudo chgrp root static\nsudo mkdir /rnr/owp-viz-replace-route/RESOURCES\nsudo cp -r static /rnr/owp-viz-replace-route/RESOURCES/\nsudo rm rnr_static.tgz\n\necho \"Updating Libnetcdf Link\"\n#Make sure that libnetcdf.so is available to the wrf_hydro executable, which is expecting libnetcdf.so.18\n#Note: version 18 will point to the generic name which already points to a different specific name, such as libnetcdf.so.19.\ncd /usr/local/lib64\nsudo ln -s libnetcdf.so libnetcdf.so.18\n\necho \"Setting up RNR File Structure\"\nsudo mkdir /rnr/share\nsudo mkdir /rnr/share/log\nsudo mkdir /rnr/share/.archive\nsudo mkdir /rnr/share/Run\n\necho \"Copying Rendered Template File to Replace and Route\"\nsudo cp /deploy_files/conus.ini /rnr/owp-viz-replace-route/configs/conus.ini\nsudo cp /deploy_files/.env.devel /rnr/owp-viz-replace-route/.env.devel\n\necho \"Setting up RNR Crontab\"\nsudo crontab -l -u ec2-user \u003e /tmp/mycrontab\necho '10 * * * * cd /rnr/owp-viz-replace-route \u0026\u0026 sudo ./run.sh' \u003e\u003e /tmp/mycrontab\nsudo crontab -u ec2-user /tmp/mycrontab\n\necho \"Finished Setup\"\n",
                "content_type": "text/x-shellscript",
                "filename": "install.sh",
                "merge_type": ""
              },
              {
                "content": "#cloud-config\n{\"write_files\":[{\"content\":\"[PATHS]\\n# The list of URLs to use when looking for nwm data.  The list\\n# assumes order based precendence.  The object store link should\\n# be defined before the nomads link.  These are extended with:\\n# nwm.YYYYMMDD/analysis_assim/nwm.tHHz.analysis_assim.type.tm00.conus.nc\\n# or /YYYY/YYYYMMDDHHMM.type_DOMAIN1.comp\\n\\nURLS = https://nwcal-dstore.nwc.nws.noaa.gov/nwm/2.1/\\n       https://nomads.ncep.noaa.gov/pub/data/nccf/com/nwm/prod\\n\\nWRDS_API_HOST_URL = http://10.27.2.90\\n\\nWRDS_RFC_FORECAST_API = /api/rfc_forecast/v2.0/forecast\\nWRDS_LOCATION_API = /api/location/v3.0\\n\\nFCST_API_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_RFC_FORECAST_API}\\n\\n#v2.0\\nWRDS_RFC_FORECAST_STAGE_ACTION_URL = ${FCST_API_BASE_URL}/stage/nws_lid/all/?returnNewestForecast=true\\u0026minForecastStatus=action\\n\\n#v 2.0\\nWRDS_RFC_FORECAST_STREAMFLOW_ACTION_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid/all/?returnNewestForecast=true\\u0026minForecastStatus=action\\n\\n# v2.0\\nWRDS_RFC_FORECAST_STREAMFLOW_BASE_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid\\n\\nWRDS_LOCATION_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_LOCATION_API}\\n\\nWRDS_LOCATION_ACTION_FLOW_URL = ${WRDS_LOCATION_BASE_URL}/threshold/flow/action/all\\nWRDS_LOCATION_RATING_BASE_URL = ${WRDS_LOCATION_BASE_URL}/rating_curve\\n\\n\\n# Location and name of the Resource file.  If not prefaced with'/',\\n# the path is relative to the current working directory\\nRESOURCES_PATH = RESOURCES\\n\\n# the host root share directory\\nSHARE_PATH = /rnr/share\\n\\n# Location to place the log file.  If not prefaced with '/', the path is\\n# relative to the current working directory.  If specifying the file name,\\n# end the name with .log\\nLOG_PATH =  ${SHARE_PATH}/log/replace_and_route-dynamic-run-NWMv2.1.log\\n\\n# Run directory, where the watermodel will be run\\nRUN_PATH = ${SHARE_PATH}/Run\\n\\n# Archive directory.  Base directory for archiving.  wrf_hydro run instances\\n# will be archived at ARCHIVES/Run and processed output will be archived at\\n# ARCHIVES/processed_output\\nARCHIVES_PATH = ${SHARE_PATH}/.archive\\n\\n# location of the timeslice generator config file.  It is unlikely it\\n# will need to be changed.\\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\\n\\n# Suffix for processed output files.  Processed output files are\\n# named by:\\n# ${SHARE_PATH}/nwc.YYYYMMDD/medium_range/wrf_hydro_tHH.medium_range.channel_rt.fXXX.${OUTPUT_SET_ID}.nc\\n# OUTPUT_SET_ID may be any combination of lower or uppercase letters, numbers,\\n# underscores, or dashes\\nOUTPUT_SET_ID = conus\\n\\n[DURATIONS]\\n# How long to archive run instances in the directory specified by ARCHIVES.\\n# This value is in days.\\nARCHIVE_INSTANCES_FOR = 1\\n\\n# How long to archive processed NWM data for  in the directory specified by\\n# ARCHIVES.  This value is in days.\\nARCHIVE_OUTPUT_FOR = 0\\n\\n# How many hours to look back in time to find a reference time with the required\\n# files.  This affects how execution instances are named and can cause a failure\\n# if a reference time that has already been processed is used.  Value is in hours.\\nREFERENCE_TIME_LOOKBACK = 1\\n\\n[OBJECT_STORE]\\n# These settings are used to configure where the processed files should\\n# be stored and accessible for distribution\\n\\n# host name with protocol \\nHOST=%(OSTORE_HOST)s\\n\\n# port number to connect to\\nPORT=%(OSTORE_PORT)s\\n\\n# bucket where processed files should be uploaded and stored\\nBUCKET=%(OSTORE_BUCKET)s\\n\\n# access and secret object store keys.  Should be set via environment variables\\nACCESS_KEY=%(OSTORE_ACCESSKEY)s\\nSECRET_KEY=%(OSTORE_SECRETKEY)s\\n\\n[REPLACE_AND_ROUTE_RESOURCES]\\n# Files in this section are expected to exist in the\\n# RESOURCES/static/wrf_hydro_support directory\\n\\n# Name of the water body file.  The feature_id order is maintained.\\nWATERBODY_FILE = domain_waterbodies.csv\\n\\n# Master Waterbody file.  This file is subsetted to generate a LAKEPARM.nc\\n# wrf_hydro input file.\\n# MASTER_WATERBODY_FILE = master_lakeparm.nc\\n\\n[WRF_HYDRO_RESOURCES]\\n# The names of files required by wrf_hydro\\n# The files here are found in RESOURCES/static/wrf_hydro\\n\\n# Name of the hydro.namelist file to use\\n# should be placed in each execution directory\\nHYDRO_NAMELIST_FILE = hydro.namelist\\n\\n# Name of the namelist.hrldas file to use\\n# should be placed in each execution directory\\nNAMELIST_HRLDAS_FILE = namelist.hrldas\\n\\n# Path to the pre-compiled wrf_hydro executable to use\\n# This path should be fully specified.\\n# WRF_HYDRO_EXE_PATH = /rnr/wrf_hydro/bin/wrf_hydro_NoahMP.exe\\n\\nWRF_HYDRO_EXE_PATH = /rnr/wrf_hydro_nwm_public/trunk/NDHMS/Run/wrf_hydro_NoahMP.exe\\n\\n# Tells how many days of FORCING files to create.  This must be an integer.\\nDAYS_OF_FORCINGS = 5\\n\\n# Tell how often a HYDRO_RST file should be written by the wrf_hydro\\n# executable.  This must be specified in hours as an integer\\nRESTART_WRITE_FREQUENCY = 24\\n\\n[WRF_HYDRO_DOMAIN]\\n# The files here are placed in the common Run/RESOURCES/DOMAIN directory\\n\\n# land surface model gridded input data file needed by wrf_hydro\\n# should be placed in RESOURCES/static/wrf_hydro\\nGEO_STATIC_FILE = geo_em_CONUS.nc\\n\\n# Name of the full domain file to use\\n# the high-resolution routing terrain input data file\\n# should be placed in RESOURCES/static/wrf_hydro\\nGEO_FINEGRID_FILE = Fulldom_hires_netcdf_250m.nc\\n\\n# Name of the hydro table 2D file to use\\n# the spatial hydro parameters file\\n# should be placed in RESOURCES/static/wrf_hydro\\nSPATIAL_HYDRO_TABLE_FILE = hydro2dtbl_CONUS_FullRouting.nc\\n\\n# Name of the soil properties file to use\\n# spatial terrain properties file used in namelist.hrldas\\n# should be placed in RESOURCES/static/wrf_hydro\\nSPATIAL_PROPERTIES_FILE = soilproperties_CONUS_FullRouting.nc\\n\\n# Name of the spatial weights file to use\\n# user defined mapping file to use\\n# should be placed in RESOURCES/static/wrf_hydro\\nUSER_DEFINED_MAP_FILE = spatialweights_CONUS_FullRouting.nc\\n\\n# Name of the wrf input file to use\\n# should be placed in RESOURCES/static/wrf_hydro\\nHRLDAS_SETUP_FILE = wrfinput_CONUS.nc\\n\\n[WRF_HYDRO_TABLES]\\n# The files here are placed in the common Run/RESOURCES/TABLES directory\\n\\n# CHANPARM.TBL file needed by each wrf_hydro execution\\n# should be placed in RESOURCES/static/wrf_hydro\\nCHANPARM_TABLE = CHANPARM.TBL\\n\\n# GENPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nGENPARM_TABLE = GENPARM.TBL\\n\\n# HYDRO.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nHYDRO_TABLE = HYDRO.TBL\\n\\n# LAKEPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nLAKEPARM_TABLE = LAKEPARM.TBL\\n\\n# MPTABLE.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nMPTABLE_TABLE = MPTABLE.TBL\\n\\n# SOILPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nSOILPARM_TABLE = SOILPARM.TBL\\n\\n# URBPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nURBPARM_TABLE = URBPARM.TBL\\n\\n# VEGPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nVEGPARM_TABLE = VEGPARM.TBL\\n\\n[DEFAULT]\\n# Default values for configuration file parameters\\n# Override parameters in the sections above.  Do not alter\\n# the default values.\\nURLS = http://localhost/nwm\\nRESOURCES_PATH = RESOURCES\\nLOG_PATH = LOGS\\nSHARE_PATH = OUTPUT\\nRUN_PATH = RUNS\\nARCHIVES_PATH = ARCHIVES\\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\\nTHRESHOLD_CSV_FILEPATH = RESOURCES/static/wrf_hydro_support/nwm_ahps_thresholds.csv\\nARCHIVE_INSTANCES_FOR = 30\\nARCHIVE_OUTPUT_FOR = 60\\nREFERENCE_TIME_LOOKBACK = 6\\nOUTPUT_SET_ID = DRAFT\\nDAYS_OF_FORCINGS = 5\\nRESTART_WRITE_FREQUENCY = 24\\n# How long to wait on the object store to respond before timing out.\\n# Specified in seconds.\\nCONNECTION_TIMEOUT = 60\\nWATERBODY_FILE = conus2.0/waterbodies.csv\\nMASTER_WATERBODY_FILE = master_lakeparm.nc\\n#AHPS_POINTS_MAPPING_FILE = conus2.0/gages_map.csv\\nHYDRO_NAMELIST_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/hydro.namelist\\nNAMELIST_HRLDAS_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/namelist.hrldas\\nWRF_HYDRO_EXE_PATH =\\nLAKEPARM_FILE = ${RUN_WRF_HYDRO_RESOURCES:MASTER_WATERBODY_FILE}\\nROUTELINK_FILE =\\nGEO_STATIC_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/geo_em.nc\\nGWBUCKPARM_FILE =\\nNUDGING_PARAMS_FILE =\\nGEO_FINEGRID_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/Fulldom.nc\\nSPATIAL_HYDRO_TABLE_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO_TBL_2D.nc\\nSPATIAL_PROPERTIES_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/soil_properties.nc\\nUSER_DEFINED_MAP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/spatialweights.nc\\nHRLDAS_SETUP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/wrfinput.nc\\nCHANPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/CHANPARM.TBL\\nGENPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/GENPARM.TBL\\nHYDRO_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO.TBL\\nLAKEPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/LAKEPARM.TBL\\nMPTABLE_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/MPTABLE.TBL\\nSOILPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/SOILPARM.TBL\\nURBPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/URBPARM.TBL\\nVEGPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/VEGPARM.TBL\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/conus.ini\",\"permissions\":\"0400\"},{\"content\":\"##  Object Store Environment Variables\\n# ---------------------------------------------------------\\nOSTORE_HOST=\\nOSTORE_PORT=\\nOSTORE_BUCKET=hydrovis-uat-rnr-us-east-1\\nOSTORE_ACCESSKEY=\\nOSTORE_SECRETKEY=\\nLD_LIBRARY_PATH=/usr/local/lib64\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/.env.devel\",\"permissions\":\"0400\"}]}\n",
                "content_type": "text/cloud-config",
                "filename": "cloud-config.yaml",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"install.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=replace_route\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\n\necho \"Setting up RNR Mount\"\ncd\nsudo mkdir /rnr\nsudo file -s /dev/sdf\nsudo lsblk -f\nsudo mkfs -t xfs /dev/sdf\nsudo mount /dev/sdf /rnr\n#--------------------------------------------------\n#change the /etc/fstab file to make sure the volume mounts after a reboot\n#extract the UUID to be included in the /etc/fstab line\nblock_output=`sudo blkid | grep xfs | grep -v LABEL`\n# output example from block_output\n#/dev/nvme1n1: UUID=\"bb4ee817-111a-4cb6-b540-a40c1d34a8fa\" TYPE=\"xfs\"\nuuid_part=`echo $block_output | cut -d ' ' -f2 | sed 's/\\\"//g'`\n#Example fstab line to add to the end:\n#UUID=bb4ee817-111a-4cb6-b540-a40c1d34a8fa     /rnr        xfs    defaults,nofail   0   2\nexport line_to_add=\"$uuid_part        /rnr    xfs     defaults,nofail        0       2\"\necho $line_to_add \u003e\u003e \"/etc/fstab\"\n\n#-----------------------------------------------------\n\necho \"Installing System Dependencies\"\nsudo amazon-linux-extras install epel -y\nsudo yum-config-manager --enable epel\nsudo yum -y install git python3-devel openmpi-devel hdf5-devel  gcc-c++ cmake3 curl-devel make\nsudo yum -y install m4\n\necho \"Installing Python Dependencies\"\nsudo git clone https://github.com/Unidata/netcdf-c.git /opt/netcdf-c\ncd /opt/netcdf-c\nsudo cmake3 .\nsudo make install\nsudo git clone https://github.com/Unidata/netcdf-fortran.git /opt/netcdf-fortran\ncd /opt/netcdf-fortran\nsudo cmake3 .\nsudo make install\n\necho \"Updating Permissions\"\ncd\nsudo chown ssm-user: /rnr\n\necho \"Installing WRF-Hydro Files\"\ncd /rnr\naws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/wrf_hydro.tgz .\ntar -zxvf wrf_hydro.tgz\n\necho \"Installing Replace and Route\"\ncd /rnr\nsudo aws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/owp-viz-replace-route.tgz .\ntar -zxvf owp-viz-replace-route.tgz\n#git clone https://vlab.ncep.noaa.gov/code-review/a/owp-viz-replace-route\n\necho \"Installing RNR Dependencies\"\ncd /rnr/owp-viz-replace-route\n#sudo git checkout python-timeslicegen\nbash install.sh -s\n\necho \"Copying Static Resources\"\ncd /rnr\nsudo aws s3 cp  s3://hydrovis-uat-deployment-us-east-1/rnr/rnr_static.tgz  .\ntar -zxvf rnr_static.tgz\nsudo chown root static\nsudo chgrp root static\nsudo mkdir /rnr/owp-viz-replace-route/RESOURCES\nsudo cp -r static /rnr/owp-viz-replace-route/RESOURCES/\nsudo rm rnr_static.tgz\n\necho \"Updating Libnetcdf Link\"\n#Make sure that libnetcdf.so is available to the wrf_hydro executable, which is expecting libnetcdf.so.18\n#Note: version 18 will point to the generic name which already points to a different specific name, such as libnetcdf.so.19.\ncd /usr/local/lib64\nsudo ln -s libnetcdf.so libnetcdf.so.18\n\necho \"Setting up RNR File Structure\"\nsudo mkdir /rnr/share\nsudo mkdir /rnr/share/log\nsudo mkdir /rnr/share/.archive\nsudo mkdir /rnr/share/Run\n\necho \"Copying Rendered Template File to Replace and Route\"\nsudo cp /deploy_files/conus.ini /rnr/owp-viz-replace-route/configs/conus.ini\nsudo cp /deploy_files/.env.devel /rnr/owp-viz-replace-route/.env.devel\n\necho \"Setting up RNR Crontab\"\nsudo crontab -l -u ec2-user \u003e /tmp/mycrontab\necho '10 * * * * cd /rnr/owp-viz-replace-route \u0026\u0026 sudo ./run.sh' \u003e\u003e /tmp/mycrontab\nsudo crontab -u ec2-user /tmp/mycrontab\n\necho \"Finished Setup\"\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"cloud-config.yaml\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\n{\"write_files\":[{\"content\":\"[PATHS]\\n# The list of URLs to use when looking for nwm data.  The list\\n# assumes order based precendence.  The object store link should\\n# be defined before the nomads link.  These are extended with:\\n# nwm.YYYYMMDD/analysis_assim/nwm.tHHz.analysis_assim.type.tm00.conus.nc\\n# or /YYYY/YYYYMMDDHHMM.type_DOMAIN1.comp\\n\\nURLS = https://nwcal-dstore.nwc.nws.noaa.gov/nwm/2.1/\\n       https://nomads.ncep.noaa.gov/pub/data/nccf/com/nwm/prod\\n\\nWRDS_API_HOST_URL = http://10.27.2.90\\n\\nWRDS_RFC_FORECAST_API = /api/rfc_forecast/v2.0/forecast\\nWRDS_LOCATION_API = /api/location/v3.0\\n\\nFCST_API_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_RFC_FORECAST_API}\\n\\n#v2.0\\nWRDS_RFC_FORECAST_STAGE_ACTION_URL = ${FCST_API_BASE_URL}/stage/nws_lid/all/?returnNewestForecast=true\\u0026minForecastStatus=action\\n\\n#v 2.0\\nWRDS_RFC_FORECAST_STREAMFLOW_ACTION_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid/all/?returnNewestForecast=true\\u0026minForecastStatus=action\\n\\n# v2.0\\nWRDS_RFC_FORECAST_STREAMFLOW_BASE_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid\\n\\nWRDS_LOCATION_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_LOCATION_API}\\n\\nWRDS_LOCATION_ACTION_FLOW_URL = ${WRDS_LOCATION_BASE_URL}/threshold/flow/action/all\\nWRDS_LOCATION_RATING_BASE_URL = ${WRDS_LOCATION_BASE_URL}/rating_curve\\n\\n\\n# Location and name of the Resource file.  If not prefaced with'/',\\n# the path is relative to the current working directory\\nRESOURCES_PATH = RESOURCES\\n\\n# the host root share directory\\nSHARE_PATH = /rnr/share\\n\\n# Location to place the log file.  If not prefaced with '/', the path is\\n# relative to the current working directory.  If specifying the file name,\\n# end the name with .log\\nLOG_PATH =  ${SHARE_PATH}/log/replace_and_route-dynamic-run-NWMv2.1.log\\n\\n# Run directory, where the watermodel will be run\\nRUN_PATH = ${SHARE_PATH}/Run\\n\\n# Archive directory.  Base directory for archiving.  wrf_hydro run instances\\n# will be archived at ARCHIVES/Run and processed output will be archived at\\n# ARCHIVES/processed_output\\nARCHIVES_PATH = ${SHARE_PATH}/.archive\\n\\n# location of the timeslice generator config file.  It is unlikely it\\n# will need to be changed.\\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\\n\\n# Suffix for processed output files.  Processed output files are\\n# named by:\\n# ${SHARE_PATH}/nwc.YYYYMMDD/medium_range/wrf_hydro_tHH.medium_range.channel_rt.fXXX.${OUTPUT_SET_ID}.nc\\n# OUTPUT_SET_ID may be any combination of lower or uppercase letters, numbers,\\n# underscores, or dashes\\nOUTPUT_SET_ID = conus\\n\\n[DURATIONS]\\n# How long to archive run instances in the directory specified by ARCHIVES.\\n# This value is in days.\\nARCHIVE_INSTANCES_FOR = 1\\n\\n# How long to archive processed NWM data for  in the directory specified by\\n# ARCHIVES.  This value is in days.\\nARCHIVE_OUTPUT_FOR = 0\\n\\n# How many hours to look back in time to find a reference time with the required\\n# files.  This affects how execution instances are named and can cause a failure\\n# if a reference time that has already been processed is used.  Value is in hours.\\nREFERENCE_TIME_LOOKBACK = 1\\n\\n[OBJECT_STORE]\\n# These settings are used to configure where the processed files should\\n# be stored and accessible for distribution\\n\\n# host name with protocol \\nHOST=%(OSTORE_HOST)s\\n\\n# port number to connect to\\nPORT=%(OSTORE_PORT)s\\n\\n# bucket where processed files should be uploaded and stored\\nBUCKET=%(OSTORE_BUCKET)s\\n\\n# access and secret object store keys.  Should be set via environment variables\\nACCESS_KEY=%(OSTORE_ACCESSKEY)s\\nSECRET_KEY=%(OSTORE_SECRETKEY)s\\n\\n[REPLACE_AND_ROUTE_RESOURCES]\\n# Files in this section are expected to exist in the\\n# RESOURCES/static/wrf_hydro_support directory\\n\\n# Name of the water body file.  The feature_id order is maintained.\\nWATERBODY_FILE = domain_waterbodies.csv\\n\\n# Master Waterbody file.  This file is subsetted to generate a LAKEPARM.nc\\n# wrf_hydro input file.\\n# MASTER_WATERBODY_FILE = master_lakeparm.nc\\n\\n[WRF_HYDRO_RESOURCES]\\n# The names of files required by wrf_hydro\\n# The files here are found in RESOURCES/static/wrf_hydro\\n\\n# Name of the hydro.namelist file to use\\n# should be placed in each execution directory\\nHYDRO_NAMELIST_FILE = hydro.namelist\\n\\n# Name of the namelist.hrldas file to use\\n# should be placed in each execution directory\\nNAMELIST_HRLDAS_FILE = namelist.hrldas\\n\\n# Path to the pre-compiled wrf_hydro executable to use\\n# This path should be fully specified.\\n# WRF_HYDRO_EXE_PATH = /rnr/wrf_hydro/bin/wrf_hydro_NoahMP.exe\\n\\nWRF_HYDRO_EXE_PATH = /rnr/wrf_hydro_nwm_public/trunk/NDHMS/Run/wrf_hydro_NoahMP.exe\\n\\n# Tells how many days of FORCING files to create.  This must be an integer.\\nDAYS_OF_FORCINGS = 5\\n\\n# Tell how often a HYDRO_RST file should be written by the wrf_hydro\\n# executable.  This must be specified in hours as an integer\\nRESTART_WRITE_FREQUENCY = 24\\n\\n[WRF_HYDRO_DOMAIN]\\n# The files here are placed in the common Run/RESOURCES/DOMAIN directory\\n\\n# land surface model gridded input data file needed by wrf_hydro\\n# should be placed in RESOURCES/static/wrf_hydro\\nGEO_STATIC_FILE = geo_em_CONUS.nc\\n\\n# Name of the full domain file to use\\n# the high-resolution routing terrain input data file\\n# should be placed in RESOURCES/static/wrf_hydro\\nGEO_FINEGRID_FILE = Fulldom_hires_netcdf_250m.nc\\n\\n# Name of the hydro table 2D file to use\\n# the spatial hydro parameters file\\n# should be placed in RESOURCES/static/wrf_hydro\\nSPATIAL_HYDRO_TABLE_FILE = hydro2dtbl_CONUS_FullRouting.nc\\n\\n# Name of the soil properties file to use\\n# spatial terrain properties file used in namelist.hrldas\\n# should be placed in RESOURCES/static/wrf_hydro\\nSPATIAL_PROPERTIES_FILE = soilproperties_CONUS_FullRouting.nc\\n\\n# Name of the spatial weights file to use\\n# user defined mapping file to use\\n# should be placed in RESOURCES/static/wrf_hydro\\nUSER_DEFINED_MAP_FILE = spatialweights_CONUS_FullRouting.nc\\n\\n# Name of the wrf input file to use\\n# should be placed in RESOURCES/static/wrf_hydro\\nHRLDAS_SETUP_FILE = wrfinput_CONUS.nc\\n\\n[WRF_HYDRO_TABLES]\\n# The files here are placed in the common Run/RESOURCES/TABLES directory\\n\\n# CHANPARM.TBL file needed by each wrf_hydro execution\\n# should be placed in RESOURCES/static/wrf_hydro\\nCHANPARM_TABLE = CHANPARM.TBL\\n\\n# GENPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nGENPARM_TABLE = GENPARM.TBL\\n\\n# HYDRO.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nHYDRO_TABLE = HYDRO.TBL\\n\\n# LAKEPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nLAKEPARM_TABLE = LAKEPARM.TBL\\n\\n# MPTABLE.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nMPTABLE_TABLE = MPTABLE.TBL\\n\\n# SOILPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nSOILPARM_TABLE = SOILPARM.TBL\\n\\n# URBPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nURBPARM_TABLE = URBPARM.TBL\\n\\n# VEGPARM.TBL file needed by wrf_hydro model\\n# should be placed in RESOURCES/static/wrf_hydro\\nVEGPARM_TABLE = VEGPARM.TBL\\n\\n[DEFAULT]\\n# Default values for configuration file parameters\\n# Override parameters in the sections above.  Do not alter\\n# the default values.\\nURLS = http://localhost/nwm\\nRESOURCES_PATH = RESOURCES\\nLOG_PATH = LOGS\\nSHARE_PATH = OUTPUT\\nRUN_PATH = RUNS\\nARCHIVES_PATH = ARCHIVES\\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\\nTHRESHOLD_CSV_FILEPATH = RESOURCES/static/wrf_hydro_support/nwm_ahps_thresholds.csv\\nARCHIVE_INSTANCES_FOR = 30\\nARCHIVE_OUTPUT_FOR = 60\\nREFERENCE_TIME_LOOKBACK = 6\\nOUTPUT_SET_ID = DRAFT\\nDAYS_OF_FORCINGS = 5\\nRESTART_WRITE_FREQUENCY = 24\\n# How long to wait on the object store to respond before timing out.\\n# Specified in seconds.\\nCONNECTION_TIMEOUT = 60\\nWATERBODY_FILE = conus2.0/waterbodies.csv\\nMASTER_WATERBODY_FILE = master_lakeparm.nc\\n#AHPS_POINTS_MAPPING_FILE = conus2.0/gages_map.csv\\nHYDRO_NAMELIST_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/hydro.namelist\\nNAMELIST_HRLDAS_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/namelist.hrldas\\nWRF_HYDRO_EXE_PATH =\\nLAKEPARM_FILE = ${RUN_WRF_HYDRO_RESOURCES:MASTER_WATERBODY_FILE}\\nROUTELINK_FILE =\\nGEO_STATIC_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/geo_em.nc\\nGWBUCKPARM_FILE =\\nNUDGING_PARAMS_FILE =\\nGEO_FINEGRID_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/Fulldom.nc\\nSPATIAL_HYDRO_TABLE_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO_TBL_2D.nc\\nSPATIAL_PROPERTIES_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/soil_properties.nc\\nUSER_DEFINED_MAP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/spatialweights.nc\\nHRLDAS_SETUP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/wrfinput.nc\\nCHANPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/CHANPARM.TBL\\nGENPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/GENPARM.TBL\\nHYDRO_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO.TBL\\nLAKEPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/LAKEPARM.TBL\\nMPTABLE_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/MPTABLE.TBL\\nSOILPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/SOILPARM.TBL\\nURBPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/URBPARM.TBL\\nVEGPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/VEGPARM.TBL\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/conus.ini\",\"permissions\":\"0400\"},{\"content\":\"##  Object Store Environment Variables\\n# ---------------------------------------------------------\\nOSTORE_HOST=\\nOSTORE_PORT=\\nOSTORE_BUCKET=hydrovis-uat-rnr-us-east-1\\nOSTORE_ACCESSKEY=\\nOSTORE_SECRETKEY=\\nLD_LIBRARY_PATH=/usr/local/lib64\\n\",\"owner\":\"ec2-user:ec2-user\",\"path\":\"/deploy_files/.env.devel\",\"permissions\":\"0400\"}]}\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "conus_ini_template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "67e05fa5031b2927f11c9c722173400fd1db17969889e31436ac443500af2d3c",
            "rendered": "[PATHS]\n# The list of URLs to use when looking for nwm data.  The list\n# assumes order based precendence.  The object store link should\n# be defined before the nomads link.  These are extended with:\n# nwm.YYYYMMDD/analysis_assim/nwm.tHHz.analysis_assim.type.tm00.conus.nc\n# or /YYYY/YYYYMMDDHHMM.type_DOMAIN1.comp\n\nURLS = https://nwcal-dstore.nwc.nws.noaa.gov/nwm/2.1/\n       https://nomads.ncep.noaa.gov/pub/data/nccf/com/nwm/prod\n\nWRDS_API_HOST_URL = http://10.27.2.90\n\nWRDS_RFC_FORECAST_API = /api/rfc_forecast/v2.0/forecast\nWRDS_LOCATION_API = /api/location/v3.0\n\nFCST_API_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_RFC_FORECAST_API}\n\n#v2.0\nWRDS_RFC_FORECAST_STAGE_ACTION_URL = ${FCST_API_BASE_URL}/stage/nws_lid/all/?returnNewestForecast=true\u0026minForecastStatus=action\n\n#v 2.0\nWRDS_RFC_FORECAST_STREAMFLOW_ACTION_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid/all/?returnNewestForecast=true\u0026minForecastStatus=action\n\n# v2.0\nWRDS_RFC_FORECAST_STREAMFLOW_BASE_URL = ${FCST_API_BASE_URL}/streamflow/nws_lid\n\nWRDS_LOCATION_BASE_URL = ${WRDS_API_HOST_URL}${WRDS_LOCATION_API}\n\nWRDS_LOCATION_ACTION_FLOW_URL = ${WRDS_LOCATION_BASE_URL}/threshold/flow/action/all\nWRDS_LOCATION_RATING_BASE_URL = ${WRDS_LOCATION_BASE_URL}/rating_curve\n\n\n# Location and name of the Resource file.  If not prefaced with'/',\n# the path is relative to the current working directory\nRESOURCES_PATH = RESOURCES\n\n# the host root share directory\nSHARE_PATH = /rnr/share\n\n# Location to place the log file.  If not prefaced with '/', the path is\n# relative to the current working directory.  If specifying the file name,\n# end the name with .log\nLOG_PATH =  ${SHARE_PATH}/log/replace_and_route-dynamic-run-NWMv2.1.log\n\n# Run directory, where the watermodel will be run\nRUN_PATH = ${SHARE_PATH}/Run\n\n# Archive directory.  Base directory for archiving.  wrf_hydro run instances\n# will be archived at ARCHIVES/Run and processed output will be archived at\n# ARCHIVES/processed_output\nARCHIVES_PATH = ${SHARE_PATH}/.archive\n\n# location of the timeslice generator config file.  It is unlikely it\n# will need to be changed.\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\n\n# Suffix for processed output files.  Processed output files are\n# named by:\n# ${SHARE_PATH}/nwc.YYYYMMDD/medium_range/wrf_hydro_tHH.medium_range.channel_rt.fXXX.${OUTPUT_SET_ID}.nc\n# OUTPUT_SET_ID may be any combination of lower or uppercase letters, numbers,\n# underscores, or dashes\nOUTPUT_SET_ID = conus\n\n[DURATIONS]\n# How long to archive run instances in the directory specified by ARCHIVES.\n# This value is in days.\nARCHIVE_INSTANCES_FOR = 1\n\n# How long to archive processed NWM data for  in the directory specified by\n# ARCHIVES.  This value is in days.\nARCHIVE_OUTPUT_FOR = 0\n\n# How many hours to look back in time to find a reference time with the required\n# files.  This affects how execution instances are named and can cause a failure\n# if a reference time that has already been processed is used.  Value is in hours.\nREFERENCE_TIME_LOOKBACK = 1\n\n[OBJECT_STORE]\n# These settings are used to configure where the processed files should\n# be stored and accessible for distribution\n\n# host name with protocol \nHOST=%(OSTORE_HOST)s\n\n# port number to connect to\nPORT=%(OSTORE_PORT)s\n\n# bucket where processed files should be uploaded and stored\nBUCKET=%(OSTORE_BUCKET)s\n\n# access and secret object store keys.  Should be set via environment variables\nACCESS_KEY=%(OSTORE_ACCESSKEY)s\nSECRET_KEY=%(OSTORE_SECRETKEY)s\n\n[REPLACE_AND_ROUTE_RESOURCES]\n# Files in this section are expected to exist in the\n# RESOURCES/static/wrf_hydro_support directory\n\n# Name of the water body file.  The feature_id order is maintained.\nWATERBODY_FILE = domain_waterbodies.csv\n\n# Master Waterbody file.  This file is subsetted to generate a LAKEPARM.nc\n# wrf_hydro input file.\n# MASTER_WATERBODY_FILE = master_lakeparm.nc\n\n[WRF_HYDRO_RESOURCES]\n# The names of files required by wrf_hydro\n# The files here are found in RESOURCES/static/wrf_hydro\n\n# Name of the hydro.namelist file to use\n# should be placed in each execution directory\nHYDRO_NAMELIST_FILE = hydro.namelist\n\n# Name of the namelist.hrldas file to use\n# should be placed in each execution directory\nNAMELIST_HRLDAS_FILE = namelist.hrldas\n\n# Path to the pre-compiled wrf_hydro executable to use\n# This path should be fully specified.\n# WRF_HYDRO_EXE_PATH = /rnr/wrf_hydro/bin/wrf_hydro_NoahMP.exe\n\nWRF_HYDRO_EXE_PATH = /rnr/wrf_hydro_nwm_public/trunk/NDHMS/Run/wrf_hydro_NoahMP.exe\n\n# Tells how many days of FORCING files to create.  This must be an integer.\nDAYS_OF_FORCINGS = 5\n\n# Tell how often a HYDRO_RST file should be written by the wrf_hydro\n# executable.  This must be specified in hours as an integer\nRESTART_WRITE_FREQUENCY = 24\n\n[WRF_HYDRO_DOMAIN]\n# The files here are placed in the common Run/RESOURCES/DOMAIN directory\n\n# land surface model gridded input data file needed by wrf_hydro\n# should be placed in RESOURCES/static/wrf_hydro\nGEO_STATIC_FILE = geo_em_CONUS.nc\n\n# Name of the full domain file to use\n# the high-resolution routing terrain input data file\n# should be placed in RESOURCES/static/wrf_hydro\nGEO_FINEGRID_FILE = Fulldom_hires_netcdf_250m.nc\n\n# Name of the hydro table 2D file to use\n# the spatial hydro parameters file\n# should be placed in RESOURCES/static/wrf_hydro\nSPATIAL_HYDRO_TABLE_FILE = hydro2dtbl_CONUS_FullRouting.nc\n\n# Name of the soil properties file to use\n# spatial terrain properties file used in namelist.hrldas\n# should be placed in RESOURCES/static/wrf_hydro\nSPATIAL_PROPERTIES_FILE = soilproperties_CONUS_FullRouting.nc\n\n# Name of the spatial weights file to use\n# user defined mapping file to use\n# should be placed in RESOURCES/static/wrf_hydro\nUSER_DEFINED_MAP_FILE = spatialweights_CONUS_FullRouting.nc\n\n# Name of the wrf input file to use\n# should be placed in RESOURCES/static/wrf_hydro\nHRLDAS_SETUP_FILE = wrfinput_CONUS.nc\n\n[WRF_HYDRO_TABLES]\n# The files here are placed in the common Run/RESOURCES/TABLES directory\n\n# CHANPARM.TBL file needed by each wrf_hydro execution\n# should be placed in RESOURCES/static/wrf_hydro\nCHANPARM_TABLE = CHANPARM.TBL\n\n# GENPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nGENPARM_TABLE = GENPARM.TBL\n\n# HYDRO.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nHYDRO_TABLE = HYDRO.TBL\n\n# LAKEPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nLAKEPARM_TABLE = LAKEPARM.TBL\n\n# MPTABLE.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nMPTABLE_TABLE = MPTABLE.TBL\n\n# SOILPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nSOILPARM_TABLE = SOILPARM.TBL\n\n# URBPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nURBPARM_TABLE = URBPARM.TBL\n\n# VEGPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nVEGPARM_TABLE = VEGPARM.TBL\n\n[DEFAULT]\n# Default values for configuration file parameters\n# Override parameters in the sections above.  Do not alter\n# the default values.\nURLS = http://localhost/nwm\nRESOURCES_PATH = RESOURCES\nLOG_PATH = LOGS\nSHARE_PATH = OUTPUT\nRUN_PATH = RUNS\nARCHIVES_PATH = ARCHIVES\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\nTHRESHOLD_CSV_FILEPATH = RESOURCES/static/wrf_hydro_support/nwm_ahps_thresholds.csv\nARCHIVE_INSTANCES_FOR = 30\nARCHIVE_OUTPUT_FOR = 60\nREFERENCE_TIME_LOOKBACK = 6\nOUTPUT_SET_ID = DRAFT\nDAYS_OF_FORCINGS = 5\nRESTART_WRITE_FREQUENCY = 24\n# How long to wait on the object store to respond before timing out.\n# Specified in seconds.\nCONNECTION_TIMEOUT = 60\nWATERBODY_FILE = conus2.0/waterbodies.csv\nMASTER_WATERBODY_FILE = master_lakeparm.nc\n#AHPS_POINTS_MAPPING_FILE = conus2.0/gages_map.csv\nHYDRO_NAMELIST_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/hydro.namelist\nNAMELIST_HRLDAS_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/namelist.hrldas\nWRF_HYDRO_EXE_PATH =\nLAKEPARM_FILE = ${RUN_WRF_HYDRO_RESOURCES:MASTER_WATERBODY_FILE}\nROUTELINK_FILE =\nGEO_STATIC_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/geo_em.nc\nGWBUCKPARM_FILE =\nNUDGING_PARAMS_FILE =\nGEO_FINEGRID_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/Fulldom.nc\nSPATIAL_HYDRO_TABLE_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO_TBL_2D.nc\nSPATIAL_PROPERTIES_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/soil_properties.nc\nUSER_DEFINED_MAP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/spatialweights.nc\nHRLDAS_SETUP_FILE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/wrfinput.nc\nCHANPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/CHANPARM.TBL\nGENPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/GENPARM.TBL\nHYDRO_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO.TBL\nLAKEPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/LAKEPARM.TBL\nMPTABLE_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/MPTABLE.TBL\nSOILPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/SOILPARM.TBL\nURBPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/URBPARM.TBL\nVEGPARM_TABLE = ${PATHS:RESOURCES_PATH}/static/wrf_hydro/VEGPARM.TBL\n",
            "template": "[PATHS]\n# The list of URLs to use when looking for nwm data.  The list\n# assumes order based precendence.  The object store link should\n# be defined before the nomads link.  These are extended with:\n# nwm.YYYYMMDD/analysis_assim/nwm.tHHz.analysis_assim.type.tm00.conus.nc\n# or /YYYY/YYYYMMDDHHMM.type_DOMAIN1.comp\n\nURLS = ${DSTORE_URL}\n       ${NOMADS_URL}\n\nWRDS_API_HOST_URL = ${WRDS_HOST}\n\nWRDS_RFC_FORECAST_API = /api/rfc_forecast/v2.0/forecast\nWRDS_LOCATION_API = /api/location/v3.0\n\nFCST_API_BASE_URL = $${WRDS_API_HOST_URL}$${WRDS_RFC_FORECAST_API}\n\n#v2.0\nWRDS_RFC_FORECAST_STAGE_ACTION_URL = $${FCST_API_BASE_URL}/stage/nws_lid/all/?returnNewestForecast=true\u0026minForecastStatus=action\n\n#v 2.0\nWRDS_RFC_FORECAST_STREAMFLOW_ACTION_URL = $${FCST_API_BASE_URL}/streamflow/nws_lid/all/?returnNewestForecast=true\u0026minForecastStatus=action\n\n# v2.0\nWRDS_RFC_FORECAST_STREAMFLOW_BASE_URL = $${FCST_API_BASE_URL}/streamflow/nws_lid\n\nWRDS_LOCATION_BASE_URL = $${WRDS_API_HOST_URL}$${WRDS_LOCATION_API}\n\nWRDS_LOCATION_ACTION_FLOW_URL = $${WRDS_LOCATION_BASE_URL}/threshold/flow/action/all\nWRDS_LOCATION_RATING_BASE_URL = $${WRDS_LOCATION_BASE_URL}/rating_curve\n\n\n# Location and name of the Resource file.  If not prefaced with'/',\n# the path is relative to the current working directory\nRESOURCES_PATH = RESOURCES\n\n# the host root share directory\nSHARE_PATH = /rnr/share\n\n# Location to place the log file.  If not prefaced with '/', the path is\n# relative to the current working directory.  If specifying the file name,\n# end the name with .log\nLOG_PATH =  $${SHARE_PATH}/log/replace_and_route-dynamic-run-NWMv2.1.log\n\n# Run directory, where the watermodel will be run\nRUN_PATH = $${SHARE_PATH}/Run\n\n# Archive directory.  Base directory for archiving.  wrf_hydro run instances\n# will be archived at ARCHIVES/Run and processed output will be archived at\n# ARCHIVES/processed_output\nARCHIVES_PATH = $${SHARE_PATH}/.archive\n\n# location of the timeslice generator config file.  It is unlikely it\n# will need to be changed.\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\n\n# Suffix for processed output files.  Processed output files are\n# named by:\n# $${SHARE_PATH}/nwc.YYYYMMDD/medium_range/wrf_hydro_tHH.medium_range.channel_rt.fXXX.$${OUTPUT_SET_ID}.nc\n# OUTPUT_SET_ID may be any combination of lower or uppercase letters, numbers,\n# underscores, or dashes\nOUTPUT_SET_ID = conus\n\n[DURATIONS]\n# How long to archive run instances in the directory specified by ARCHIVES.\n# This value is in days.\nARCHIVE_INSTANCES_FOR = 1\n\n# How long to archive processed NWM data for  in the directory specified by\n# ARCHIVES.  This value is in days.\nARCHIVE_OUTPUT_FOR = 0\n\n# How many hours to look back in time to find a reference time with the required\n# files.  This affects how execution instances are named and can cause a failure\n# if a reference time that has already been processed is used.  Value is in hours.\nREFERENCE_TIME_LOOKBACK = 1\n\n[OBJECT_STORE]\n# These settings are used to configure where the processed files should\n# be stored and accessible for distribution\n\n# host name with protocol \nHOST=%(OSTORE_HOST)s\n\n# port number to connect to\nPORT=%(OSTORE_PORT)s\n\n# bucket where processed files should be uploaded and stored\nBUCKET=%(OSTORE_BUCKET)s\n\n# access and secret object store keys.  Should be set via environment variables\nACCESS_KEY=%(OSTORE_ACCESSKEY)s\nSECRET_KEY=%(OSTORE_SECRETKEY)s\n\n[REPLACE_AND_ROUTE_RESOURCES]\n# Files in this section are expected to exist in the\n# RESOURCES/static/wrf_hydro_support directory\n\n# Name of the water body file.  The feature_id order is maintained.\nWATERBODY_FILE = domain_waterbodies.csv\n\n# Master Waterbody file.  This file is subsetted to generate a LAKEPARM.nc\n# wrf_hydro input file.\n# MASTER_WATERBODY_FILE = master_lakeparm.nc\n\n[WRF_HYDRO_RESOURCES]\n# The names of files required by wrf_hydro\n# The files here are found in RESOURCES/static/wrf_hydro\n\n# Name of the hydro.namelist file to use\n# should be placed in each execution directory\nHYDRO_NAMELIST_FILE = hydro.namelist\n\n# Name of the namelist.hrldas file to use\n# should be placed in each execution directory\nNAMELIST_HRLDAS_FILE = namelist.hrldas\n\n# Path to the pre-compiled wrf_hydro executable to use\n# This path should be fully specified.\n# WRF_HYDRO_EXE_PATH = /rnr/wrf_hydro/bin/wrf_hydro_NoahMP.exe\n\nWRF_HYDRO_EXE_PATH = /rnr/wrf_hydro_nwm_public/trunk/NDHMS/Run/wrf_hydro_NoahMP.exe\n\n# Tells how many days of FORCING files to create.  This must be an integer.\nDAYS_OF_FORCINGS = 5\n\n# Tell how often a HYDRO_RST file should be written by the wrf_hydro\n# executable.  This must be specified in hours as an integer\nRESTART_WRITE_FREQUENCY = 24\n\n[WRF_HYDRO_DOMAIN]\n# The files here are placed in the common Run/RESOURCES/DOMAIN directory\n\n# land surface model gridded input data file needed by wrf_hydro\n# should be placed in RESOURCES/static/wrf_hydro\nGEO_STATIC_FILE = geo_em_CONUS.nc\n\n# Name of the full domain file to use\n# the high-resolution routing terrain input data file\n# should be placed in RESOURCES/static/wrf_hydro\nGEO_FINEGRID_FILE = Fulldom_hires_netcdf_250m.nc\n\n# Name of the hydro table 2D file to use\n# the spatial hydro parameters file\n# should be placed in RESOURCES/static/wrf_hydro\nSPATIAL_HYDRO_TABLE_FILE = hydro2dtbl_CONUS_FullRouting.nc\n\n# Name of the soil properties file to use\n# spatial terrain properties file used in namelist.hrldas\n# should be placed in RESOURCES/static/wrf_hydro\nSPATIAL_PROPERTIES_FILE = soilproperties_CONUS_FullRouting.nc\n\n# Name of the spatial weights file to use\n# user defined mapping file to use\n# should be placed in RESOURCES/static/wrf_hydro\nUSER_DEFINED_MAP_FILE = spatialweights_CONUS_FullRouting.nc\n\n# Name of the wrf input file to use\n# should be placed in RESOURCES/static/wrf_hydro\nHRLDAS_SETUP_FILE = wrfinput_CONUS.nc\n\n[WRF_HYDRO_TABLES]\n# The files here are placed in the common Run/RESOURCES/TABLES directory\n\n# CHANPARM.TBL file needed by each wrf_hydro execution\n# should be placed in RESOURCES/static/wrf_hydro\nCHANPARM_TABLE = CHANPARM.TBL\n\n# GENPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nGENPARM_TABLE = GENPARM.TBL\n\n# HYDRO.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nHYDRO_TABLE = HYDRO.TBL\n\n# LAKEPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nLAKEPARM_TABLE = LAKEPARM.TBL\n\n# MPTABLE.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nMPTABLE_TABLE = MPTABLE.TBL\n\n# SOILPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nSOILPARM_TABLE = SOILPARM.TBL\n\n# URBPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nURBPARM_TABLE = URBPARM.TBL\n\n# VEGPARM.TBL file needed by wrf_hydro model\n# should be placed in RESOURCES/static/wrf_hydro\nVEGPARM_TABLE = VEGPARM.TBL\n\n[DEFAULT]\n# Default values for configuration file parameters\n# Override parameters in the sections above.  Do not alter\n# the default values.\nURLS = http://localhost/nwm\nRESOURCES_PATH = RESOURCES\nLOG_PATH = LOGS\nSHARE_PATH = OUTPUT\nRUN_PATH = RUNS\nARCHIVES_PATH = ARCHIVES\nTIMESLICE_CONFIG = usgs_timeslice_generator/config.ini\nTHRESHOLD_CSV_FILEPATH = RESOURCES/static/wrf_hydro_support/nwm_ahps_thresholds.csv\nARCHIVE_INSTANCES_FOR = 30\nARCHIVE_OUTPUT_FOR = 60\nREFERENCE_TIME_LOOKBACK = 6\nOUTPUT_SET_ID = DRAFT\nDAYS_OF_FORCINGS = 5\nRESTART_WRITE_FREQUENCY = 24\n# How long to wait on the object store to respond before timing out.\n# Specified in seconds.\nCONNECTION_TIMEOUT = 60\nWATERBODY_FILE = conus2.0/waterbodies.csv\nMASTER_WATERBODY_FILE = master_lakeparm.nc\n#AHPS_POINTS_MAPPING_FILE = conus2.0/gages_map.csv\nHYDRO_NAMELIST_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/hydro.namelist\nNAMELIST_HRLDAS_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/namelist.hrldas\nWRF_HYDRO_EXE_PATH =\nLAKEPARM_FILE = $${RUN_WRF_HYDRO_RESOURCES:MASTER_WATERBODY_FILE}\nROUTELINK_FILE =\nGEO_STATIC_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/geo_em.nc\nGWBUCKPARM_FILE =\nNUDGING_PARAMS_FILE =\nGEO_FINEGRID_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/Fulldom.nc\nSPATIAL_HYDRO_TABLE_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO_TBL_2D.nc\nSPATIAL_PROPERTIES_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/soil_properties.nc\nUSER_DEFINED_MAP_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/spatialweights.nc\nHRLDAS_SETUP_FILE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/wrfinput.nc\nCHANPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/CHANPARM.TBL\nGENPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/GENPARM.TBL\nHYDRO_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/HYDRO.TBL\nLAKEPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/LAKEPARM.TBL\nMPTABLE_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/MPTABLE.TBL\nSOILPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/SOILPARM.TBL\nURBPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/URBPARM.TBL\nVEGPARM_TABLE = $${PATHS:RESOURCES_PATH}/static/wrf_hydro/VEGPARM.TBL\n",
            "vars": {
              "DSTORE_URL": "https://nwcal-dstore.nwc.nws.noaa.gov/nwm/2.1/",
              "NOMADS_URL": "https://nomads.ncep.noaa.gov/pub/data/nccf/com/nwm/prod",
              "WRDS_HOST": "http://10.27.2.90"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "env_devel",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "08b1b8d4bb1663e700db37a678d55287832fad242deb3d11a4add7b5df710708",
            "rendered": "##  Object Store Environment Variables\n# ---------------------------------------------------------\nOSTORE_HOST=\nOSTORE_PORT=\nOSTORE_BUCKET=hydrovis-uat-rnr-us-east-1\nOSTORE_ACCESSKEY=\nOSTORE_SECRETKEY=\nLD_LIBRARY_PATH=/usr/local/lib64\n",
            "template": "##  Object Store Environment Variables\n# ---------------------------------------------------------\nOSTORE_HOST=\nOSTORE_PORT=\nOSTORE_BUCKET=${OUTPUT_BUCKET}\nOSTORE_ACCESSKEY=\nOSTORE_SECRETKEY=\nLD_LIBRARY_PATH=/usr/local/lib64\n",
            "vars": {
              "OUTPUT_BUCKET": "hydrovis-uat-rnr-us-east-1"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "install",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9323994fa183f438f9e3bf9959015ef3621625f4fd2cbda769936295eab2760e",
            "rendered": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=10.27.2.20\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=replace_route\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\n\necho \"Setting up RNR Mount\"\ncd\nsudo mkdir /rnr\nsudo file -s /dev/sdf\nsudo lsblk -f\nsudo mkfs -t xfs /dev/sdf\nsudo mount /dev/sdf /rnr\n#--------------------------------------------------\n#change the /etc/fstab file to make sure the volume mounts after a reboot\n#extract the UUID to be included in the /etc/fstab line\nblock_output=`sudo blkid | grep xfs | grep -v LABEL`\n# output example from block_output\n#/dev/nvme1n1: UUID=\"bb4ee817-111a-4cb6-b540-a40c1d34a8fa\" TYPE=\"xfs\"\nuuid_part=`echo $block_output | cut -d ' ' -f2 | sed 's/\\\"//g'`\n#Example fstab line to add to the end:\n#UUID=bb4ee817-111a-4cb6-b540-a40c1d34a8fa     /rnr        xfs    defaults,nofail   0   2\nexport line_to_add=\"$uuid_part        /rnr    xfs     defaults,nofail        0       2\"\necho $line_to_add \u003e\u003e \"/etc/fstab\"\n\n#-----------------------------------------------------\n\necho \"Installing System Dependencies\"\nsudo amazon-linux-extras install epel -y\nsudo yum-config-manager --enable epel\nsudo yum -y install git python3-devel openmpi-devel hdf5-devel  gcc-c++ cmake3 curl-devel make\nsudo yum -y install m4\n\necho \"Installing Python Dependencies\"\nsudo git clone https://github.com/Unidata/netcdf-c.git /opt/netcdf-c\ncd /opt/netcdf-c\nsudo cmake3 .\nsudo make install\nsudo git clone https://github.com/Unidata/netcdf-fortran.git /opt/netcdf-fortran\ncd /opt/netcdf-fortran\nsudo cmake3 .\nsudo make install\n\necho \"Updating Permissions\"\ncd\nsudo chown ssm-user: /rnr\n\necho \"Installing WRF-Hydro Files\"\ncd /rnr\naws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/wrf_hydro.tgz .\ntar -zxvf wrf_hydro.tgz\n\necho \"Installing Replace and Route\"\ncd /rnr\nsudo aws s3 cp s3://hydrovis-uat-deployment-us-east-1/rnr/owp-viz-replace-route.tgz .\ntar -zxvf owp-viz-replace-route.tgz\n#git clone https://vlab.ncep.noaa.gov/code-review/a/owp-viz-replace-route\n\necho \"Installing RNR Dependencies\"\ncd /rnr/owp-viz-replace-route\n#sudo git checkout python-timeslicegen\nbash install.sh -s\n\necho \"Copying Static Resources\"\ncd /rnr\nsudo aws s3 cp  s3://hydrovis-uat-deployment-us-east-1/rnr/rnr_static.tgz  .\ntar -zxvf rnr_static.tgz\nsudo chown root static\nsudo chgrp root static\nsudo mkdir /rnr/owp-viz-replace-route/RESOURCES\nsudo cp -r static /rnr/owp-viz-replace-route/RESOURCES/\nsudo rm rnr_static.tgz\n\necho \"Updating Libnetcdf Link\"\n#Make sure that libnetcdf.so is available to the wrf_hydro executable, which is expecting libnetcdf.so.18\n#Note: version 18 will point to the generic name which already points to a different specific name, such as libnetcdf.so.19.\ncd /usr/local/lib64\nsudo ln -s libnetcdf.so libnetcdf.so.18\n\necho \"Setting up RNR File Structure\"\nsudo mkdir /rnr/share\nsudo mkdir /rnr/share/log\nsudo mkdir /rnr/share/.archive\nsudo mkdir /rnr/share/Run\n\necho \"Copying Rendered Template File to Replace and Route\"\nsudo cp /deploy_files/conus.ini /rnr/owp-viz-replace-route/configs/conus.ini\nsudo cp /deploy_files/.env.devel /rnr/owp-viz-replace-route/.env.devel\n\necho \"Setting up RNR Crontab\"\nsudo crontab -l -u ec2-user \u003e /tmp/mycrontab\necho '10 * * * * cd /rnr/owp-viz-replace-route \u0026\u0026 sudo ./run.sh' \u003e\u003e /tmp/mycrontab\nsudo crontab -u ec2-user /tmp/mycrontab\n\necho \"Finished Setup\"\n",
            "template": "#!/bin/bash\n\necho \"Setting up Rsyslog Configuration\"\nsudo mkdir -p /etc/systemd/system/rsyslog.service.d/\n{ echo \"[Service]\"; \n  echo \"Environment=\\\"LOGSTASH_IP=${logstash_ip}\\\"\";\n  echo \"Environment=\\\"HYDROVIS_APPLICATION=replace_route\\\"\";\n} | sudo tee /etc/systemd/system/rsyslog.service.d/override.conf\nsudo systemctl daemon-reload\nsudo systemctl restart rsyslog\n\n\necho \"Setting up RNR Mount\"\ncd\nsudo mkdir /rnr\nsudo file -s /dev/sdf\nsudo lsblk -f\nsudo mkfs -t xfs /dev/sdf\nsudo mount /dev/sdf /rnr\n#--------------------------------------------------\n#change the /etc/fstab file to make sure the volume mounts after a reboot\n#extract the UUID to be included in the /etc/fstab line\nblock_output=`sudo blkid | grep xfs | grep -v LABEL`\n# output example from block_output\n#/dev/nvme1n1: UUID=\"bb4ee817-111a-4cb6-b540-a40c1d34a8fa\" TYPE=\"xfs\"\nuuid_part=`echo $block_output | cut -d ' ' -f2 | sed 's/\\\"//g'`\n#Example fstab line to add to the end:\n#UUID=bb4ee817-111a-4cb6-b540-a40c1d34a8fa     /rnr        xfs    defaults,nofail   0   2\nexport line_to_add=\"$uuid_part        /rnr    xfs     defaults,nofail        0       2\"\necho $line_to_add \u003e\u003e \"/etc/fstab\"\n\n#-----------------------------------------------------\n\necho \"Installing System Dependencies\"\nsudo amazon-linux-extras install epel -y\nsudo yum-config-manager --enable epel\nsudo yum -y install git python3-devel openmpi-devel hdf5-devel  gcc-c++ cmake3 curl-devel make\nsudo yum -y install m4\n\necho \"Installing Python Dependencies\"\nsudo git clone https://github.com/Unidata/netcdf-c.git /opt/netcdf-c\ncd /opt/netcdf-c\nsudo cmake3 .\nsudo make install\nsudo git clone https://github.com/Unidata/netcdf-fortran.git /opt/netcdf-fortran\ncd /opt/netcdf-fortran\nsudo cmake3 .\nsudo make install\n\necho \"Updating Permissions\"\ncd\nsudo chown ssm-user: /rnr\n\necho \"Installing WRF-Hydro Files\"\ncd /rnr\naws s3 cp s3://${DEPLOYMENT_DATA_BUCKET}/rnr/wrf_hydro.tgz .\ntar -zxvf wrf_hydro.tgz\n\necho \"Installing Replace and Route\"\ncd /rnr\nsudo aws s3 cp s3://${DEPLOYMENT_DATA_BUCKET}/rnr/owp-viz-replace-route.tgz .\ntar -zxvf owp-viz-replace-route.tgz\n#git clone https://vlab.ncep.noaa.gov/code-review/a/owp-viz-replace-route\n\necho \"Installing RNR Dependencies\"\ncd /rnr/owp-viz-replace-route\n#sudo git checkout python-timeslicegen\nbash install.sh -s\n\necho \"Copying Static Resources\"\ncd /rnr\nsudo aws s3 cp  s3://${DEPLOYMENT_DATA_BUCKET}/rnr/rnr_static.tgz  .\ntar -zxvf rnr_static.tgz\nsudo chown root static\nsudo chgrp root static\nsudo mkdir /rnr/owp-viz-replace-route/RESOURCES\nsudo cp -r static /rnr/owp-viz-replace-route/RESOURCES/\nsudo rm rnr_static.tgz\n\necho \"Updating Libnetcdf Link\"\n#Make sure that libnetcdf.so is available to the wrf_hydro executable, which is expecting libnetcdf.so.18\n#Note: version 18 will point to the generic name which already points to a different specific name, such as libnetcdf.so.19.\ncd /usr/local/lib64\nsudo ln -s libnetcdf.so libnetcdf.so.18\n\necho \"Setting up RNR File Structure\"\nsudo mkdir /rnr/share\nsudo mkdir /rnr/share/log\nsudo mkdir /rnr/share/.archive\nsudo mkdir /rnr/share/Run\n\necho \"Copying Rendered Template File to Replace and Route\"\nsudo cp /deploy_files/conus.ini /rnr/owp-viz-replace-route/configs/conus.ini\nsudo cp /deploy_files/.env.devel /rnr/owp-viz-replace-route/.env.devel\n\necho \"Setting up RNR Crontab\"\nsudo crontab -l -u ec2-user \u003e /tmp/mycrontab\necho '10 * * * * cd /rnr/owp-viz-replace-route \u0026\u0026 sudo ./run.sh' \u003e\u003e /tmp/mycrontab\nsudo crontab -u ec2-user /tmp/mycrontab\n\necho \"Finished Setup\"\n",
            "vars": {
              "DEPLOYMENT_DATA_BUCKET": "hydrovis-uat-deployment-us-east-1",
              "logstash_ip": "10.27.2.20"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.rnr_ec2",
      "mode": "managed",
      "type": "aws_instance",
      "name": "replace_and_route",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-025b76b777024295e",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-01d0abbdd86cae088",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 4,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sdf",
                "encrypted": true,
                "iops": 300,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "snapshot_id": "",
                "tags": {
                  "Name": "hv-uat-replace-route-drive"
                },
                "throughput": 0,
                "volume_id": "vol-03d240333af9536f2",
                "volume_size": 100,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "Hydroviz-RnR-EC2-Profile",
            "id": "i-01d0abbdd86cae088",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "c5.2xlarge",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-00dc7970eca814a3b",
            "private_dns": "ip-10-27-2-71.ec2.internal",
            "private_ip": "10.27.2.71",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": true,
                "iops": 100,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/5a69bec0-8533-4b5e-a3d6-3b1b3d77f5c1",
                "tags": null,
                "throughput": 0,
                "volume_id": "vol-051c61754edd9e8cb",
                "volume_size": 12,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-04914abb2085ae5dd",
            "tags": {
              "Name": "hv-uat-replace-route",
              "OS": "Linux"
            },
            "tags_all": {
              "Name": "hv-uat-replace-route",
              "OS": "Linux",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "f7f067ff6d193699bff04bd796184744042eb71b",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_instance_profile.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.rnr_ec2.data.aws_ami.linux",
            "module.rnr_ec2.data.cloudinit_config.startup",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a"
          ]
        }
      ]
    },
    {
      "module": "module.s3",
      "mode": "managed",
      "type": "aws_s3_account_public_access_block",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "799732994462",
            "block_public_acls": true,
            "block_public_policy": true,
            "id": "799732994462",
            "ignore_public_acls": false,
            "restrict_public_buckets": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"hml\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-hml-us-east-1-s3",
            "id": "alias/hydrovis-uat-hml-us-east-1-s3",
            "name": "alias/hydrovis-uat-hml-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/e8800dbe-a3f3-40db-8792-227f066f99df",
            "target_key_id": "e8800dbe-a3f3-40db-8792-227f066f99df"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"hml\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/e8800dbe-a3f3-40db-8792-227f066f99df",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-hml-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "e8800dbe-a3f3-40db-8792-227f066f99df",
            "is_enabled": true,
            "key_id": "e8800dbe-a3f3-40db-8792-227f066f99df",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::734632823696:role/hydrovis-prod-hml-incoming-s3st-HMLReplicationRole-1INFV8WNQTTHE\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"hml\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-hml-us-east-1",
            "bucket": "hydrovis-uat-hml-us-east-1",
            "bucket_domain_name": "hydrovis-uat-hml-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-hml-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-hml-us-east-1",
            "lifecycle_rule": [
              {
                "abort_incomplete_multipart_upload_days": 0,
                "enabled": true,
                "expiration": [
                  {
                    "date": "",
                    "days": 30,
                    "expired_object_delete_marker": false
                  }
                ],
                "id": "tf-s3-lifecycle-20210928213421742900000001",
                "noncurrent_version_expiration": [
                  {
                    "days": 1
                  }
                ],
                "noncurrent_version_transition": [],
                "prefix": "",
                "tags": {},
                "transition": []
              }
            ],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/e8800dbe-a3f3-40db-8792-227f066f99df",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"hml\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-hml-us-east-1",
            "id": "hydrovis-uat-hml-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-hml-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Sid\":\"PermissionsOnObjects\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:role/hydrovis-prod-hml-incoming-s3st-HMLReplicationRole-1INFV8WNQTTHE\"},\"Action\":[\"s3:ReplicateDelete\",\"s3:ReplicateObject\"],\"Resource\":\"arn:aws:s3:::hydrovis-uat-hml-us-east-1/*\"},{\"Sid\":\"PermissionsOnBucket\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:role/hydrovis-prod-hml-incoming-s3st-HMLReplicationRole-1INFV8WNQTTHE\"},\"Action\":[\"s3:List*\",\"s3:GetBucketVersioning\",\"s3:PutBucketVersioning\"],\"Resource\":\"arn:aws:s3:::hydrovis-uat-hml-us-east-1\"},{\"Sid\":\"OverrideBucketOwner\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:root\"},\"Action\":\"s3:ObjectOwnerOverrideToBucketOwner\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-hml-us-east-1/*\"},{\"Sid\":\"PermissionsOnObjectsToUsersRoles\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-hml-us-east-1\",\"arn:aws:s3:::hydrovis-uat-hml-us-east-1/*\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"nwm\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-nwm-us-east-1-s3",
            "id": "alias/hydrovis-uat-nwm-us-east-1-s3",
            "name": "alias/hydrovis-uat-nwm-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/8901be6c-df99-44f9-a794-dc8dec76989b",
            "target_key_id": "8901be6c-df99-44f9-a794-dc8dec76989b"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"nwm\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/8901be6c-df99-44f9-a794-dc8dec76989b",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-nwm-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "8901be6c-df99-44f9-a794-dc8dec76989b",
            "is_enabled": true,
            "key_id": "8901be6c-df99-44f9-a794-dc8dec76989b",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::734632823696:role/hydrovis-prod-nwm-incoming-s3st-NWMReplicationRole-P9EAA8EI6VNC\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"nwm\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-nwm-us-east-1",
            "bucket": "hydrovis-uat-nwm-us-east-1",
            "bucket_domain_name": "hydrovis-uat-nwm-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-nwm-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-nwm-us-east-1",
            "lifecycle_rule": [
              {
                "abort_incomplete_multipart_upload_days": 0,
                "enabled": true,
                "expiration": [
                  {
                    "date": "",
                    "days": 30,
                    "expired_object_delete_marker": false
                  }
                ],
                "id": "tf-s3-lifecycle-20210929154352512500000001",
                "noncurrent_version_expiration": [
                  {
                    "days": 1
                  }
                ],
                "noncurrent_version_transition": [],
                "prefix": "",
                "tags": {},
                "transition": []
              }
            ],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/8901be6c-df99-44f9-a794-dc8dec76989b",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3-replication.module.bucket[\"nwm\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-nwm-us-east-1",
            "id": "hydrovis-uat-nwm-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Sid\":\"PermissionsOnObjects\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:role/hydrovis-prod-nwm-incoming-s3st-NWMReplicationRole-P9EAA8EI6VNC\"},\"Action\":[\"s3:ReplicateDelete\",\"s3:ReplicateObject\"],\"Resource\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1/*\"},{\"Sid\":\"PermissionsOnBucket\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:role/hydrovis-prod-nwm-incoming-s3st-NWMReplicationRole-P9EAA8EI6VNC\"},\"Action\":[\"s3:List*\",\"s3:GetBucketVersioning\",\"s3:PutBucketVersioning\"],\"Resource\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"},{\"Sid\":\"OverrideBucketOwner\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::734632823696:root\"},\"Action\":\"s3:ObjectOwnerOverrideToBucketOwner\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1/*\"},{\"Sid\":\"PermissionsOnObjectsToUsersRoles\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\",\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1/*\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"deployment\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-deployment-us-east-1-s3",
            "id": "alias/hydrovis-uat-deployment-us-east-1-s3",
            "name": "alias/hydrovis-uat-deployment-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/54a4ab41-9103-4891-9c64-1b7c1d83e3f3",
            "target_key_id": "54a4ab41-9103-4891-9c64-1b7c1d83e3f3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"deployment\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/54a4ab41-9103-4891-9c64-1b7c1d83e3f3",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-deployment-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "54a4ab41-9103-4891-9c64-1b7c1d83e3f3",
            "is_enabled": true,
            "key_id": "54a4ab41-9103-4891-9c64-1b7c1d83e3f3",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/HydrovisSSMInstanceProfileRole\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"deployment\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-deployment-us-east-1",
            "bucket": "hydrovis-uat-deployment-us-east-1",
            "bucket_domain_name": "hydrovis-uat-deployment-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-deployment-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-deployment-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/54a4ab41-9103-4891-9c64-1b7c1d83e3f3",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"deployment\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-deployment-us-east-1",
            "id": "hydrovis-uat-deployment-us-east-1",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"deployment\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-deployment-us-east-1",
            "id": "hydrovis-uat-deployment-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-deployment-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:role/HydrovisSSMInstanceProfileRole\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-deployment-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-deployment-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"fim\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-fim-us-east-1-s3",
            "id": "alias/hydrovis-uat-fim-us-east-1-s3",
            "name": "alias/hydrovis-uat-fim-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/584421b4-6506-4c4c-a609-7c8901e29ac3",
            "target_key_id": "584421b4-6506-4c4c-a609-7c8901e29ac3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"fim\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/584421b4-6506-4c4c-a609-7c8901e29ac3",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-fim-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "584421b4-6506-4c4c-a609-7c8901e29ac3",
            "is_enabled": true,
            "key_id": "584421b4-6506-4c4c-a609-7c8901e29ac3",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"fim\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-fim-us-east-1",
            "bucket": "hydrovis-uat-fim-us-east-1",
            "bucket_domain_name": "hydrovis-uat-fim-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-fim-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-fim-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/584421b4-6506-4c4c-a609-7c8901e29ac3",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"fim\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-fim-us-east-1",
            "id": "hydrovis-uat-fim-us-east-1",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"fim\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-fim-us-east-1",
            "id": "hydrovis-uat-fim-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-fim-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-fim-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-fim-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"hml-backup\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-hml-backup-us-east-1-s3",
            "id": "alias/hydrovis-uat-hml-backup-us-east-1-s3",
            "name": "alias/hydrovis-uat-hml-backup-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/f26b7f59-e14e-46c1-80d0-a5d7476a145b",
            "target_key_id": "f26b7f59-e14e-46c1-80d0-a5d7476a145b"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"hml-backup\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/f26b7f59-e14e-46c1-80d0-a5d7476a145b",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-hml-backup-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "f26b7f59-e14e-46c1-80d0-a5d7476a145b",
            "is_enabled": true,
            "key_id": "f26b7f59-e14e-46c1-80d0-a5d7476a145b",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:root\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"hml-backup\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-hml-backup-us-east-1",
            "bucket": "hydrovis-uat-hml-backup-us-east-1",
            "bucket_domain_name": "hydrovis-uat-hml-backup-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-hml-backup-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-hml-backup-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/f26b7f59-e14e-46c1-80d0-a5d7476a145b",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"hml-backup\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-hml-backup-us-east-1",
            "id": "hydrovis-uat-hml-backup-us-east-1",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"hml-backup\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-hml-backup-us-east-1",
            "id": "hydrovis-uat-hml-backup-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-hml-backup-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-hml-backup-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-hml-backup-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"rnr\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-rnr-us-east-1-s3",
            "id": "alias/hydrovis-uat-rnr-us-east-1-s3",
            "name": "alias/hydrovis-uat-rnr-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/886eb6d8-ca18-45bd-9db4-1824828f6c0a",
            "target_key_id": "886eb6d8-ca18-45bd-9db4-1824828f6c0a"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"rnr\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/886eb6d8-ca18-45bd-9db4-1824828f6c0a",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-rnr-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "886eb6d8-ca18-45bd-9db4-1824828f6c0a",
            "is_enabled": true,
            "key_id": "886eb6d8-ca18-45bd-9db4-1824828f6c0a",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"rnr\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-rnr-us-east-1",
            "bucket": "hydrovis-uat-rnr-us-east-1",
            "bucket_domain_name": "hydrovis-uat-rnr-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-rnr-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-rnr-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/886eb6d8-ca18-45bd-9db4-1824828f6c0a",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"rnr\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-rnr-us-east-1",
            "id": "hydrovis-uat-rnr-us-east-1",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"rnr\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-rnr-us-east-1",
            "id": "hydrovis-uat-rnr-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-rnr-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-rnr-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-rnr-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"session-manager-logs\"]",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:alias/hydrovis-uat-session-manager-logs-us-east-1-s3",
            "id": "alias/hydrovis-uat-session-manager-logs-us-east-1-s3",
            "name": "alias/hydrovis-uat-session-manager-logs-us-east-1-s3",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:us-east-1:799732994462:key/4d282d10-1254-437c-b53f-27ea96b60553",
            "target_key_id": "4d282d10-1254-437c-b53f-27ea96b60553"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"session-manager-logs\"]",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "hydrovis-s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-1:799732994462:key/4d282d10-1254-437c-b53f-27ea96b60553",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "Used for hydrovis-uat-session-manager-logs-us-east-1 bucket encryption",
            "enable_key_rotation": true,
            "id": "4d282d10-1254-437c-b53f-27ea96b60553",
            "is_enabled": true,
            "key_id": "4d282d10-1254-437c-b53f-27ea96b60553",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:root\"]},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"},{\"Action\":[\"kms:Create*\",\"kms:Describe*\",\"kms:Enable*\",\"kms:List*\",\"kms:Put*\",\"kms:Update*\",\"kms:Revoke*\",\"kms:Disable*\",\"kms:Get*\",\"kms:Delete*\",\"kms:ScheduleKeyDeletion\",\"kms:CancelKeyDeletion\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\"]},\"Resource\":\"*\",\"Sid\":\"Allow administration of the key\"},{\"Action\":[\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:Decrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey\",\"kms:GenerateDataKeyWithoutPlaintext\",\"kms:List*\",\"kms:Get*\",\"kms:Describe*\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/HydrovisSSMInstanceProfileRole\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\"]},\"Resource\":\"*\",\"Sid\":\"Allow use of the key\"}],\"Version\":\"2012-10-17\"}",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"session-manager-logs\"]",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::hydrovis-uat-session-manager-logs-us-east-1",
            "bucket": "hydrovis-uat-session-manager-logs-us-east-1",
            "bucket_domain_name": "hydrovis-uat-session-manager-logs-us-east-1.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "hydrovis-uat-session-manager-logs-us-east-1.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "hydrovis-uat-session-manager-logs-us-east-1",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "arn:aws:kms:us-east-1:799732994462:key/4d282d10-1254-437c-b53f-27ea96b60553",
                        "sse_algorithm": "aws:kms"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"session-manager-logs\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_ownership_controls",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-session-manager-logs-us-east-1",
            "id": "hydrovis-uat-session-manager-logs-us-east-1",
            "rule": [
              {
                "object_ownership": "BucketOwnerPreferred"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        }
      ]
    },
    {
      "module": "module.s3.module.bucket[\"session-manager-logs\"]",
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-session-manager-logs-us-east-1",
            "id": "hydrovis-uat-session-manager-logs-us-east-1",
            "policy": "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"DenyUnEncryptedObjectUploads\",\"Effect\":\"Deny\",\"Principal\":\"*\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::hydrovis-uat-session-manager-logs-us-east-1/*\",\"Condition\":{\"StringNotEquals\":{\"s3:x-amz-server-side-encryption\":\"aws:kms\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda\",\"arn:aws:iam::799732994462:role/HydrovisESRISSMDeploy\",\"arn:aws:iam::799732994462:role/HydrovisSSMInstanceProfileRole\",\"arn:aws:iam::799732994462:role/hydrovis-uat-hml-ingest-role\",\"arn:aws:iam::799732994462:role/Hydroviz-RnR-EC2-Profile\",\"arn:aws:iam::799732994462:user/zachary.wills@noaa.gov\",\"arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov\",\"arn:aws:iam::799732994462:user/noel.perkins@noaa.gov\"]},\"Action\":[\"s3:GetBucketPolicy\",\"s3:GetBucketAcl\",\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::hydrovis-uat-session-manager-logs-us-east-1/*\",\"arn:aws:s3:::hydrovis-uat-session-manager-logs-us-east-1\"]}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-forecast-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-forecast-pg-rdssecret-VvRx9V",
            "description": "hydrovis-uat-data-services-forecast-pg-rdssecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-forecast-pg-rdssecret-VvRx9V",
            "kms_key_id": "",
            "name": "hydrovis-uat-data-services-forecast-pg-rdssecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-forecast-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-forecast-pg-rdssecret-VvRx9V",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-forecast-pg-rdssecret-VvRx9V|84249804-9CC7-4FA9-AA58-6CF6692D9A06",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-forecast-pg-rdssecret-VvRx9V",
            "secret_string": "{\"password\":\"JdjES1KtMwGvr3UVkYwgawGvi\",\"username\":\"rfc_fcst_ro_user\"}",
            "version_id": "84249804-9CC7-4FA9-AA58-6CF6692D9A06",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-forecast-pg-rdssecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "JdjES1KtMwGvr3UVkYwgawGvi",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-location-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-location-pg-rdssecret-RCLKfC",
            "description": "hydrovis-uat-data-services-location-pg-rdssecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-location-pg-rdssecret-RCLKfC",
            "kms_key_id": "",
            "name": "hydrovis-uat-data-services-location-pg-rdssecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-location-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-location-pg-rdssecret-RCLKfC",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-location-pg-rdssecret-RCLKfC|1D9B5A0E-5702-40C2-8810-DC5DA7FE6D24",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-data-services-location-pg-rdssecret-RCLKfC",
            "secret_string": "{\"password\":\"rtKiTGcG7E9WKI8CqqtQsDGBM\",\"username\":\"location_ro_user\"}",
            "version_id": "1D9B5A0E-5702-40C2-8810-DC5DA7FE6D24",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"data-services-location-pg-rdssecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "rtKiTGcG7E9WKI8CqqtQsDGBM",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-pg-rds-secret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-pg-rds-secret-P8oz9C",
            "description": "hydrovis-uat-egis-pg-rds-secret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-pg-rds-secret-P8oz9C",
            "kms_key_id": "",
            "name": "hydrovis-uat-egis-pg-rds-secret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-pg-rds-secret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-pg-rds-secret-P8oz9C",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-pg-rds-secret-P8oz9C|36A98BFB-C053-4C09-8637-E1C05F12E03E",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-pg-rds-secret-P8oz9C",
            "secret_string": "{\"password\":\"PYXRFoNniK34cDAN8qfADX0RI\",\"username\":\"hydrovis\"}",
            "version_id": "36A98BFB-C053-4C09-8637-E1C05F12E03E",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-pg-rds-secret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "PYXRFoNniK34cDAN8qfADX0RI",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-service-account\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-service-account-5bTg2X",
            "description": "hydrovis-uat-egis-service-account",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-service-account-5bTg2X",
            "kms_key_id": "",
            "name": "hydrovis-uat-egis-service-account",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-service-account\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-service-account-5bTg2X",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-service-account-5bTg2X|58606563-1BBA-4983-9B66-3C0D9ACA793C",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-egis-service-account-5bTg2X",
            "secret_string": "{\"password\":\"hardwork123donehere!\",\"username\":\"arcgis\"}",
            "version_id": "58606563-1BBA-4983-9B66-3C0D9ACA793C",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"egis-service-account\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "vrQQQkaokrff7O3peqlxdXX2e",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-mqsecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-mqsecret-d4aQeh",
            "description": "hydrovis-uat-ingest-mqsecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-mqsecret-d4aQeh",
            "kms_key_id": "",
            "name": "hydrovis-uat-ingest-mqsecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-mqsecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-mqsecret-d4aQeh",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-mqsecret-d4aQeh|3754D0DC-B495-485D-8B9D-8307C0CBF279",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-mqsecret-d4aQeh",
            "secret_string": "{\"password\":\"yT5XsjsOurFACmkz4pL4wHtKF\",\"username\":\"rabbit_admin\"}",
            "version_id": "3754D0DC-B495-485D-8B9D-8307C0CBF279",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-mqsecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "yT5XsjsOurFACmkz4pL4wHtKF",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-pg-rdssecret-Qd1YgI",
            "description": "hydrovis-uat-ingest-pg-rdssecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-pg-rdssecret-Qd1YgI",
            "kms_key_id": "",
            "name": "hydrovis-uat-ingest-pg-rdssecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-pg-rdssecret-Qd1YgI",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-pg-rdssecret-Qd1YgI|802A1C68-F4CF-457E-91B2-54E3A2CFB9A1",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-ingest-pg-rdssecret-Qd1YgI",
            "secret_string": "{\"password\":\"JLrvuU9e0WKL1Ii7nNPXV6n8D\",\"username\":\"postgres\"}",
            "version_id": "802A1C68-F4CF-457E-91B2-54E3A2CFB9A1",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"ingest-pg-rdssecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "JLrvuU9e0WKL1Ii7nNPXV6n8D",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"mq-aws-monitoring\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-mq-aws-monitoring-VMiQpr",
            "description": "hydrovis-uat-mq-aws-monitoring",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-mq-aws-monitoring-VMiQpr",
            "kms_key_id": "",
            "name": "hydrovis-uat-mq-aws-monitoring",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"mq-aws-monitoring\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-mq-aws-monitoring-VMiQpr",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-mq-aws-monitoring-VMiQpr|0812A543-EC11-44EA-A6A6-813DB74699DB",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-mq-aws-monitoring-VMiQpr",
            "secret_string": "{\"password\":\"arQXW7MbWdlqJ8jNlGs3Pqjwo\",\"username\":\"monitoring-AWS-OWNED-DO-NOT-DELETE\"}",
            "version_id": "0812A543-EC11-44EA-A6A6-813DB74699DB",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"mq-aws-monitoring\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "arQXW7MbWdlqJ8jNlGs3Pqjwo",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-nwm_viz_ro\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-nwm_viz_ro-gpYsQd",
            "description": "hydrovis-uat-rds-nwm_viz_ro",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-nwm_viz_ro-gpYsQd",
            "kms_key_id": "",
            "name": "hydrovis-uat-rds-nwm_viz_ro",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-nwm_viz_ro\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-nwm_viz_ro-gpYsQd",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-nwm_viz_ro-gpYsQd|EEBC799A-1226-43D3-8CB1-B6E932835D9B",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-nwm_viz_ro-gpYsQd",
            "secret_string": "{\"password\":\"7AYiJbyLAzDFeJbP27HvCsmJA\",\"username\":\"nwm_viz_ro\"}",
            "version_id": "EEBC799A-1226-43D3-8CB1-B6E932835D9B",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-nwm_viz_ro\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "7AYiJbyLAzDFeJbP27HvCsmJA",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst-QC6XDT",
            "description": "hydrovis-uat-rds-rfc_fcst",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst-QC6XDT",
            "kms_key_id": "",
            "name": "hydrovis-uat-rds-rfc_fcst",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst-QC6XDT",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst-QC6XDT|3985CDF0-8D1B-40C4-923A-0BE6CCB23AC8",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst-QC6XDT",
            "secret_string": "{\"password\":\"LvUWPMec96KIb91W8zjfrGjp3\",\"username\":\"rfc_fcst\"}",
            "version_id": "3985CDF0-8D1B-40C4-923A-0BE6CCB23AC8",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "LvUWPMec96KIb91W8zjfrGjp3",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst_user\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst_user-SsDxQI",
            "description": "hydrovis-uat-rds-rfc_fcst_user",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst_user-SsDxQI",
            "kms_key_id": "",
            "name": "hydrovis-uat-rds-rfc_fcst_user",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst_user\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst_user-SsDxQI",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst_user-SsDxQI|460F07FC-AD89-4862-9DA9-E3DD238900AA",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-rds-rfc_fcst_user-SsDxQI",
            "secret_string": "{\"password\":\"J9SabmtesQFUF5O50t2o8O3Cb\",\"username\":\"rfc_fcst_user\"}",
            "version_id": "460F07FC-AD89-4862-9DA9-E3DD238900AA",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"rds-rfc_fcst_user\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "J9SabmtesQFUF5O50t2o8O3Cb",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz-processing-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz-processing-pg-rdssecret-eYAVIx",
            "description": "hydrovis-uat-viz-processing-pg-rdssecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz-processing-pg-rdssecret-eYAVIx",
            "kms_key_id": "",
            "name": "hydrovis-uat-viz-processing-pg-rdssecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz-processing-pg-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz-processing-pg-rdssecret-eYAVIx",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz-processing-pg-rdssecret-eYAVIx|B3348E1F-81C5-4D73-95AE-2CFF1CAC200A",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz-processing-pg-rdssecret-eYAVIx",
            "secret_string": "{\"password\":\"fvUxYAw1CYY73qPH6xTvVdC88\",\"username\":\"postgres\"}",
            "version_id": "B3348E1F-81C5-4D73-95AE-2CFF1CAC200A",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz-processing-pg-rdssecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "fvUxYAw1CYY73qPH6xTvVdC88",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz_proc-user-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz_proc-user-rdssecret-xez9dQ",
            "description": "hydrovis-uat-viz_proc-user-rdssecret",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz_proc-user-rdssecret-xez9dQ",
            "kms_key_id": "",
            "name": "hydrovis-uat-viz_proc-user-rdssecret",
            "name_prefix": null,
            "policy": null,
            "recovery_window_in_days": 0,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz_proc-user-rdssecret\"]",
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "hydrovis",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz_proc-user-rdssecret-xez9dQ",
            "id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz_proc-user-rdssecret-xez9dQ|7A949485-5BA8-443D-8A6F-D6693E6E70B5",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-1:799732994462:secret:hydrovis-uat-viz_proc-user-rdssecret-xez9dQ",
            "secret_string": "{\"password\":\"cAOoumCus9z8BYWhZVOMiajwi\",\"username\":\"viz_proc_admin_rw_user\"}",
            "version_id": "7A949485-5BA8-443D-8A6F-D6693E6E70B5",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.secrets-manager.module.secret[\"viz_proc-user-rdssecret\"]",
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 25,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "cAOoumCus9z8BYWhZVOMiajwi",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "egis-overlord",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-013db899dbaeea4ce",
            "description": "Allow inbound traffic to eGIS environment",
            "egress": [],
            "id": "sg-013db899dbaeea4ce",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "ArcGIS DataStore Private Access",
                "from_port": 2443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 2443
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "ArcGIS Server Private Access gis, img, gp",
                "from_port": 6443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 6443
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Data Sharing",
                "from_port": 139,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 139
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Data Sharing",
                "from_port": 445,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 445
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Portal Private Access",
                "from_port": 7443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 7443
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "PostGres Private Access",
                "from_port": 5432,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5432
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "RDP Access",
                "from_port": 3389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3389
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Session Manager Access",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Web Tier Access",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "hv-uat-egis-ptl-gis-img-gp",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hv-uat-egis-ptl-gis-img-gp"
            },
            "tags_all": {
              "Name": "hv-uat-egis-ptl-gis-img-gp",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "es-sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-018097bf79b5f835e",
            "description": "Allow inbound traffic to ElasticSearch from VPC CIDR",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-018097bf79b5f835e",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "es-sg",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "es-sg"
            },
            "tags_all": {
              "Name": "es-sg",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "hv-allow-NWC-access",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-0ea66f0502c1cd904",
            "description": "Allow NWC vpn users access to Portal",
            "egress": [],
            "id": "sg-0ea66f0502c1cd904",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0",
                  "137.75.81.52/32"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "hv-uat-allow-NWC-access",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hv-uat-internet-443-from-NWC"
            },
            "tags_all": {
              "Name": "hv-uat-internet-443-from-NWC",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "hv-rabbitmq",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-0584d6697b3f809b5",
            "description": "Allows rabbit MQ connection and dashboard",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0584d6697b3f809b5",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "",
                "from_port": 5671,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5671
              },
              {
                "cidr_blocks": [
                  "10.27.2.160/27"
                ],
                "description": "Access from subnet hydrovis-sn-prv-uat-data1b",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "10.27.2.160/27"
                ],
                "description": "Access from subnet hydrovis-sn-prv-uat-data1b",
                "from_port": 5671,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5671
              },
              {
                "cidr_blocks": [
                  "10.27.2.64/27"
                ],
                "description": "Access from subnet hydrovis-sn-prv-uat-data1a",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "10.27.2.64/27"
                ],
                "description": "Access from subnet hydrovis-sn-prv-uat-data1a",
                "from_port": 5671,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5671
              }
            ],
            "name": "hv-uat-rabbitmq",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hv-uat-rabbitmq",
              "vpc": "uat"
            },
            "tags_all": {
              "Name": "hv-uat-rabbitmq",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462",
              "vpc": "uat"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "hv-test-loadbalancer-sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-0bfc935a7ccc2cf54",
            "description": "Security group for testing ALB access from internet",
            "egress": [],
            "id": "sg-0bfc935a7ccc2cf54",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [
                  "::/0"
                ],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "hv-uat-test-loadbalancer-sg",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hv-uat-test-loadbalancer-sg"
            },
            "tags_all": {
              "Name": "hv-uat-test-loadbalancer-sg",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "hydrovis-RDS",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-0e1ceb05bcc5bf0af",
            "description": "UAT RDS access",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0e1ceb05bcc5bf0af",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "",
                "from_port": 5432,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5432
              }
            ],
            "name": "hydrovis-UAT-RDS",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hydrovis-UAT-RDS",
              "vpc": "uat"
            },
            "tags_all": {
              "Name": "hydrovis-UAT-RDS",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462",
              "vpc": "uat"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "hydrovis-nat-sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-05068fed65f00bff2",
            "description": "Security group for NAT instance for hydrovis UAT VPC",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-05068fed65f00bff2",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23"
                ],
                "description": "Allow all inbound traffic from private subnets",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "name": "hydrovis-uat-nat-sg",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "hydrovis-uat-nat-sg"
            },
            "tags_all": {
              "Name": "hydrovis-uat-nat-sg",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.security-groups",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "ssm-session-manager-sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:security-group/sg-01a5ed608003e9f20",
            "description": "allow access to VPC endpoints",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-01a5ed608003e9f20",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.27.2.0/23",
                  "137.75.89.64/26"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "name": "ssm-session-manager-sg",
            "name_prefix": "",
            "owner_id": "799732994462",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "ssm-session-manager-sg"
            },
            "tags_all": {
              "Name": "ssm-session-manager-sg",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "799732994462",
            "arn": "arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov",
            "id": "799732994462",
            "user_id": "AIDA3UM6NCGPNWOLCYKWO"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "sns_topic_policies",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "id": "1936184972",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_ana_hi",
          "schema_version": 0,
          "attributes": {
            "id": "3090886705",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_ana_prvi",
          "schema_version": 0,
          "attributes": {
            "id": "3949489068",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_mrf_10day",
          "schema_version": 0,
          "attributes": {
            "id": "1242604170",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_mrf_3day",
          "schema_version": 0,
          "attributes": {
            "id": "2880800792",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_mrf_5day",
          "schema_version": 0,
          "attributes": {
            "id": "3614549999",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_srf",
          "schema_version": 0,
          "attributes": {
            "id": "1197588636",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_srf_hi",
          "schema_version": 0,
          "attributes": {
            "id": "2642988963",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_ingest_srf_prvi",
          "schema_version": 0,
          "attributes": {
            "id": "2073305950",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-nwm-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "nwm_max_flows",
          "schema_version": 0,
          "attributes": {
            "id": "2926191710",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-fim-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-fim-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "rnr_max_flows",
          "schema_version": 0,
          "attributes": {
            "id": "3724243638",
            "json": "{\n  \"Version\": \"2008-10-17\",\n  \"Id\": \"__default_policy_ID\",\n  \"Statement\": [\n    {\n      \"Sid\": \"__default_statement_ID\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:SetTopicAttributes\",\n        \"SNS:RemovePermission\",\n        \"SNS:Receive\",\n        \"SNS:Publish\",\n        \"SNS:ListSubscriptionsByTopic\",\n        \"SNS:GetTopicAttributes\",\n        \"SNS:DeleteTopic\",\n        \"SNS:AddPermission\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Condition\": {\n        \"ArnLike\": {\n          \"aws:SourceArn\": [\n            \"arn:aws:s3:::hydrovis-uat-rnr-us-east-1\"\n          ]\n        },\n        \"StringEquals\": {\n          \"AWS:SourceAccount\": [\n            \"799732994462\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"__console_pub_0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"SNS:Subscribe\",\n        \"SNS:Receive\",\n        \"SNS:Publish\"\n      ],\n      \"Resource\": \"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::799732994462:root\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": "__default_policy_ID",
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "SNS:AddPermission",
                  "SNS:DeleteTopic",
                  "SNS:GetTopicAttributes",
                  "SNS:ListSubscriptionsByTopic",
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:RemovePermission",
                  "SNS:SetTopicAttributes",
                  "SNS:Subscribe"
                ],
                "condition": [
                  {
                    "test": "ArnLike",
                    "values": [
                      "arn:aws:s3:::hydrovis-uat-rnr-us-east-1"
                    ],
                    "variable": "aws:SourceArn"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "799732994462"
                    ],
                    "variable": "AWS:SourceAccount"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "*"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows"
                ],
                "sid": "__default_statement_ID"
              },
              {
                "actions": [
                  "SNS:Publish",
                  "SNS:Receive",
                  "SNS:Subscribe"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::799732994462:root"
                    ],
                    "type": "AWS"
                  }
                ],
                "resources": [
                  "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows"
                ],
                "sid": "__console_pub_0"
              }
            ],
            "version": "2008-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "US East (N. Virginia)",
            "endpoint": "ec2.us-east-1.amazonaws.com",
            "id": "us-east-1",
            "name": "us-east-1"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "nwm_bucket_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-nwm-us-east-1",
            "id": "hydrovis-uat-nwm-us-east-1",
            "lambda_function": [],
            "queue": [],
            "topic": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "analysis_assim.channel_rt.tm00.conus.nc",
                "id": "tf-s3-topic-20211029205513547400000003",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "analysis_assim.channel_rt.tm0000.hawaii.nc",
                "id": "tf-s3-topic-20211029205513547400000004",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "analysis_assim.channel_rt.tm00.puertorico.nc",
                "id": "tf-s3-topic-20211029205513547400000005",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "short_range.channel_rt.f018.conus.nc",
                "id": "tf-s3-topic-20211029205513547400000006",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "short_range.channel_rt.f04800.hawaii.nc",
                "id": "tf-s3-topic-20211029205513547400000007",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "short_range.channel_rt.f048.puertorico.nc",
                "id": "tf-s3-topic-20211029205513547400000008",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "medium_range.channel_rt_1.f072.conus.nc",
                "id": "tf-s3-topic-20211029205513547400000009",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "medium_range.channel_rt_1.f120.conus.nc",
                "id": "tf-s3-topic-2021102920551354740000000a",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day"
              },
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "common/data/model/com/nwm/prod/",
                "filter_suffix": "medium_range.channel_rt_1.f240.conus.nc",
                "id": "tf-s3-topic-2021102920551354750000000b",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "nwm_max_flows_bucket_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-fim-us-east-1",
            "id": "hydrovis-uat-fim-us-east-1",
            "lambda_function": [],
            "queue": [],
            "topic": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "max_flows/",
                "filter_suffix": "max_flows.nc",
                "id": "tf-s3-topic-20211029205513352100000001",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "rnr_max_flows_bucket_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "hydrovis-uat-rnr-us-east-1",
            "id": "hydrovis-uat-rnr-us-east-1",
            "lambda_function": [],
            "queue": [],
            "topic": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "max_flows/",
                "filter_suffix": "max_flows.csv",
                "id": "tf-s3-topic-20211029205513352400000002",
                "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "managed",
      "type": "aws_sns_topic",
      "name": "sns_topics",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_ana",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_ana",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_ana"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_ana",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_hi",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_ana_hi",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_ana_hi",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_ana_hi"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_ana_hi",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_prvi",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_ana_prvi",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_ana_prvi",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_ana_prvi"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_ana_prvi",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_10day",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_mrf_10day",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_mrf_10day",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_mrf_10day"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_mrf_10day",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_3day",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_mrf_3day",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_mrf_3day",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_mrf_3day"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_mrf_3day",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_5day",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_mrf_5day",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_mrf_5day",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_mrf_5day"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_mrf_5day",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_srf",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_srf",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_srf",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_srf"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_srf",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_hi",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_srf_hi",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_srf_hi",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_srf_hi"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_srf_hi",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_prvi",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_ingest_srf_prvi",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_ingest_srf_prvi",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_ingest_srf_prvi"
            },
            "tags_all": {
              "Name": "uat_nwm_ingest_srf_prvi",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        },
        {
          "index_key": "nwm_max_flows",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_nwm_max_flows",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_nwm_max_flows",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-fim-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_nwm_max_flows"
            },
            "tags_all": {
              "Name": "uat_nwm_max_flows",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        },
        {
          "index_key": "rnr_max_flows",
          "schema_version": 0,
          "attributes": {
            "application_failure_feedback_role_arn": "",
            "application_success_feedback_role_arn": "",
            "application_success_feedback_sample_rate": null,
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows",
            "content_based_deduplication": false,
            "delivery_policy": "",
            "display_name": "uat_rnr_max_flows",
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": "",
            "firehose_success_feedback_role_arn": "",
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": "",
            "http_success_feedback_role_arn": "",
            "http_success_feedback_sample_rate": null,
            "id": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows",
            "kms_master_key_id": "",
            "lambda_failure_feedback_role_arn": "",
            "lambda_success_feedback_role_arn": "",
            "lambda_success_feedback_sample_rate": null,
            "name": "uat_rnr_max_flows",
            "name_prefix": "",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-rnr-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\"}]}",
            "sqs_failure_feedback_role_arn": "",
            "sqs_success_feedback_role_arn": "",
            "sqs_success_feedback_sample_rate": null,
            "tags": {
              "Name": "uat_rnr_max_flows"
            },
            "tags_all": {
              "Name": "uat_rnr_max_flows",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.sns",
      "mode": "managed",
      "type": "aws_sns_topic_policy",
      "name": "sns_topics",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.data.aws_caller_identity.current",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_hi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_caller_identity.current",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_prvi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_caller_identity.current",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_10day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.data.aws_caller_identity.current",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_3day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_caller_identity.current",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_5day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_caller_identity.current",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_srf",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.data.aws_caller_identity.current",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_hi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.data.aws_caller_identity.current",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_prvi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-nwm-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.data.aws_caller_identity.current",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics"
          ]
        },
        {
          "index_key": "nwm_max_flows",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-fim-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.sns.data.aws_caller_identity.current",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis"
          ]
        },
        {
          "index_key": "rnr_max_flows",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows",
            "owner": "799732994462",
            "policy": "{\"Version\":\"2008-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Subscribe\",\"SNS:SetTopicAttributes\",\"SNS:RemovePermission\",\"SNS:Receive\",\"SNS:Publish\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:AddPermission\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\",\"Condition\":{\"StringEquals\":{\"AWS:SourceAccount\":\"799732994462\"},\"ArnLike\":{\"aws:SourceArn\":\"arn:aws:s3:::hydrovis-uat-rnr-us-east-1\"}}},{\"Sid\":\"__console_pub_0\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::799732994462:root\"},\"Action\":[\"SNS:Subscribe\",\"SNS:Receive\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows\"}]}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.sns.aws_sns_topic.sns_topics",
            "module.sns.data.aws_caller_identity.current",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.data.aws_iam_policy_document.sns_topic_policies"
          ]
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "aws_ami",
      "name": "windows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0b266e75d54048c9f",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-04a06950e6c42a4b1",
                  "throughput": "0",
                  "volume_size": "150",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-12-06T21:39:40.000Z",
            "description": "STIG image no encryption for sharing between accounts",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "hydrovis-win2019-STIG*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0b266e75d54048c9f",
            "image_id": "ami-0b266e75d54048c9f",
            "image_location": "526904826677/hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "hydrovis-win2019-STIG-no-encryption 2021-12-06T21-08-07.275Z",
            "name_regex": null,
            "owner_id": "526904826677",
            "owners": [
              "526904826677"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": false,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-04a06950e6c42a4b1",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "799732994462",
            "arn": "arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov",
            "id": "799732994462",
            "user_id": "AIDA3UM6NCGPNWOLCYKWO"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "fileshare_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "gzip": false,
            "id": "2178524007",
            "part": [
              {
                "content": "\u003cpowershell\u003e\n$PIPELINE_USER = 'arcgis'\n\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nNew-Item -ItemType Directory -Force -Path D:\\viz | Out-Null\nNew-Item -ItemType Directory -Force -Path D:\\viz\\published | Out-Null\n\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n\nNew-SmbShare -Name \"viz\" -Path \"D:\\viz\" -FullAccess $PIPELINE_USER\n\n\u003c/powershell\u003e\n",
                "content_type": "text/x-shellscript",
                "filename": "fs_setup.ps1",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"fs_setup.ps1\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n\u003cpowershell\u003e\n$PIPELINE_USER = 'arcgis'\n\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nNew-Item -ItemType Directory -Force -Path D:\\viz | Out-Null\nNew-Item -ItemType Directory -Force -Path D:\\viz\\published | Out-Null\n\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n\nNew-SmbShare -Name \"viz\" -Path \"D:\\viz\" -FullAccess $PIPELINE_USER\n\n\u003c/powershell\u003e\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "pipeline_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "gzip": false,
            "id": "1638941634",
            "part": [
              {
                "content": "\u003cpowershell\u003e\n$Fileshare = '\\\\10.27.2.29'\n$EGIS_HOST = 'maps-staging.water.noaa.gov'\n$VIZ_ENVIRONMENT = 'staging'\n$FIM_VERSION = '3.0.23.3'\n$SSH_KEY_CONTENT = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAYEA4BR4+o+atEvTxc2k0n+4lhN4jpJSDRg9sUNseJm6fpXUX72ml7M+\nTDCiicpjU4ja7fX/tMY5do3X/ggy9wHFYjYbzAlRD0//gzKkr7Azo9Sl+4rArENNFaoEmT\nge/ZW5q9g9NukOKESZXQETbVWIFFDlVTO9dUj8w23OhE4NMio/zre4EOPgeuC4I+sqfPSp\nkEY14Udq6xh9YNkq9ouT6BeEvl2R1O0asS4WwZNpYLLErxwK7nNyqXZiXlglE89lArovEI\n43+MVphc2SeEdU1Sela9ShsK6ZWqmE9V1HgdSKIQUYRNurnNSyM5mMAM5ByiEkN27Xsczv\npdgGqXkNub3o3cloriiP70nGIefj+XH6sx/pBFOum+zzbPrrb5b0iYUz0c9KgWxypmeesW\nVFnw1Gs+K6wOlkqz1ejDjNNQiBLzkiZtaz4gcLeoBp0lsFJG5IXCvtoHlEC/oiXPoqpcxy\nThDBedX5mikJJvdK/9tOewdaQmm5ZAiWxTEoCnknAAAFmKQ3sJKkN7CSAAAAB3NzaC1yc2\nEAAAGBAOAUePqPmrRL08XNpNJ/uJYTeI6SUg0YPbFDbHiZun6V1F+9ppezPkwwoonKY1OI\n2u31/7TGOXaN1/4IMvcBxWI2G8wJUQ9P/4MypK+wM6PUpfuKwKxDTRWqBJk4Hv2VuavYPT\nbpDihEmV0BE21ViBRQ5VUzvXVI/MNtzoRODTIqP863uBDj4HrguCPrKnz0qZBGNeFHausY\nfWDZKvaLk+gXhL5dkdTtGrEuFsGTaWCyxK8cCu5zcql2Yl5YJRPPZQK6LxCON/jFaYXNkn\nhHVNUnpWvUobCumVqphPVdR4HUiiEFGETbq5zUsjOZjADOQcohJDdu17HM76XYBql5Dbm9\n6N3JaK4oj+9JxiHn4/lx+rMf6QRTrpvs82z662+W9ImFM9HPSoFscqZnnrFlRZ8NRrPius\nDpZKs9Xow4zTUIgS85ImbWs+IHC3qAadJbBSRuSFwr7aB5RAv6Ilz6KqXMck4QwXnV+Zop\nCSb3Sv/bTnsHWkJpuWQIlsUxKAp5JwAAAAMBAAEAAAGAON+5XQ852u0sERaC8RKNzTmf7b\n/hp4Uxk15jl7CdDygEQVCnifVqqHfnqUV/NGKV/rPjdQSi7R5PZiC6nssKSEUnhQAQXOyX\nE7u05Qq58Kk2f8PV52Mlm4wNor4Fz6NC/wThdKBugXX33w042xVMdquZqah6O9yMmyWxtw\n8Adm0WyOcEhvTvswB6fFNh81k9+Gp5nnY8AvOyTvSP3QfMQKpHfPHO49ZSYgoqqHM72dlF\n5pQdiiwvPCfaC8wfjQmkRhkPu5D6IO2aY/zuFX+2sJ0Ha2aQLc/wEyDinu5SlPReh7sD2Z\nxpbidqMhVyRIZZ+oIsAbuCR0rhxHP0a/vTBX6PGHMhi7VxUXtRjudbkL+SSLNe6eOofBv+\nny+Z6IHgh/pv7zYSxWw+2KpK8Bx6FPzEgae+VFW2D9MUSOhdWXLZHtsPK7TMukCpsuuaO9\nAtRlMRvsWMLi5ObVqGstozkjH+7/W1ZRHoxD9p/gCVvY7vWpJmDOlQNGSJkWYts2JRAAAA\nwQCXnexIjVhU/+wCDwQmkzPIdVRHbSwiXINMUo8BJwpYE8ac9T81fqEcGf9Kdsj8Y9IRdh\nD5WydNVaryiGNAmyQV3DdPVMPNw9SfD5yArx8ZXlq4cbqBiQJaL89FfrnPIDmT8D4zF/eX\nS8PbFg9EKKqFwHNpT+pKVxJJdeqSWJBX4ZfhYfy5n7vYLjd1XAOm924o2V2v6SgOhS6qZE\ntAJvM1E3xQjHdFCNRmFTFtw/mbaPo3mIi4tUPWaS5cL0avVd8AAADBAPFkdwLug7OLuTaB\n0Pzwm+HshxF978yS08PJAUeKn9k3+SOCGbWW1AGnnTpJjzPaZAu209Qkge7aVVLA/kawEb\ntJr5jWq1VqSQE+LRShUZv9NxTwUA4aXO/37hLW02Q0ImHTWfK4ZHK93vPz5CjhrFjM5mwc\nztCopRypxg1Frx8lMC+iWfz8EoS5odCusmNOa6abNX1PDxIvxBrAgfhyiPnRpWJ3rcE8sq\nnpv/V4ulwhT9lDt9ZlFji73Qkr7GXB1QAAAMEA7aPPrs871BS7ZZ9C/7KBqeK/a3PpcZqW\nqepObo4FtCO7EMGjiFbdC6pKelF9hj2brQ2Iv4QEZZK0rsnyAnBaMTebsHXdKRxjM+gnWI\nzd5frrcYdrcvfATL8FXV6XKmKW57fipjUQS7Qk37ZfyWCRV2IOvJyFtz9Dw/5e97jBChiW\noMhmfU7CAZYd25oMRftgasQk6Qf6Wsi8fg+sEWi4uFwsCD6Xwbht52kU99V+G4tBjlCZSn\nJSQI64GqSgnBELAAAAIW53Y1xjb3JleS5rcmV3c29uQE5XQ0FMLUwtNDMzOTMzMwE=\n-----END OPENSSH PRIVATE KEY-----\n'\n$LICENSE_REG_CONTENT = 'Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\arcgis\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@10.27.2.156\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\arcgis\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n'\n$WRDS_HOST = '10.27.2.90'\n$S3_STATIC_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$DEPLOY_FILES_PREFIX = 'viz/'\n$NWM_DATA_BUCKET = 'hydrovis-uat-nwm-us-east-1'\n$FIM_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$FIM_OUTPUT_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$NWM_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$RNR_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-rnr-us-east-1'\n$WINDOWS_SERVICE_STATUS = 'start'\n$WINDOWS_SERVICE_STARTUP = 'SERVICE_AUTO_START'\n$PIPELINE_USER = 'arcgis'\n$PIPELINE_USER_ACCOUNT_PASSWORD = 'hardwork123donehere!'\n\n$HYDROVIS_EGIS_USER = \"hydrovis.proc\"\n$HYDROVIS_EGIS_PASS = 'WaterIsFun1@'\n\n$LOGSTASH_IP = '10.27.2.20'\n$VLAB_REPO_PREFIX   = 'ssh://corey.krewson@vlab.noaa.gov:29418'\n$VLAB_HOST   = 'vlab.noaa.gov'\n\nWrite-Host \"Setting up $PIPELINE_USER profile\"\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n# This command will fail but that is on purpose. It will initialize the profile which is what we want\n$securePassword = ConvertTo-SecureString $PIPELINE_USER_ACCOUNT_PASSWORD -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential $PIPELINE_USER, $securePassword\nStart-Process program.exe -Credential $credential\n\n$Logfile = \"C:\\Users\\$PIPELINE_USER\\Desktop\\pipeline_setup.log\"\n\nfunction LogWrite\n{\nParam ([string]$logstring)\nWrite-Host $logstring\n$currentdate = Get-Date -Format \"MM/dd/yyyy HH:mm K\"\n$logstring =  $currentdate + \": \" +  $logstring\nAdd-content $Logfile -value $logstring\n}\n\nfunction CreateUTF8File\n{\n  Param ([string]$file_content, [string]$file_dir, [string]$file_name)\n\n  Set-Location -Path $file_dir\n  $file_path = $file_dir + \"\\\" + $file_name\n  $file_content | Out-File -Encoding ascii -FilePath $file_path\n  Get-ChildItem $file_name | ForEach-Object {\n    # get the contents and replace line breaks by U+000A\n    $contents = [IO.File]::ReadAllText($_) -replace \"`r`n?\", \"`n\"\n    # create UTF-8 encoding without signature\n    $utf8 = New-Object System.Text.UTF8Encoding $false\n    # write the text back\n    [IO.File]::WriteAllText($_, $contents, $utf8)\n  }\n}\n\nLogWrite \"Setting up file variables\"\n$StaticDir = \"D:\\static\"\n$DynamicDir = \"D:\\dynamic\"\n\n$AUTHORITATIVE_ROOT = \"$StaticDir\\authoritative\"\n$CACHE_ROOT = \"$DynamicDir\\cache\"\n$FLAGS_ROOT = \"s3://$FIM_OUTPUT_BUCKET/published_flags\"\n$PRISTINE_ROOT = \"$StaticDir\\pristine\"\n$PRO_PROJECT_ROOT = \"$StaticDir\\pro_project\"\n$PUBLISHED_ROOT = \"$Fileshare\\viz\\published\"\n$WORKSPACE_ROOT = \"$DynamicDir\\authoritative\"\n$PIPELINE_WORKSPACE = \"D:\\pipeline_workspace\"\n\nLogWrite \"Setting up D drive\"\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nLogWrite \"ADDING SSH Files\"\n$HV_SSH_DIR = \"C:\\Users\\$PIPELINE_USER\\.ssh\"\n$UD_SSH_DIR = \"$HOME\\.ssh\"\n\nLogWrite \"Opening Firewall for ArcgisPro License Connection\"\nNew-NetFirewallRule -DisplayName \"ArcGISPro License Manager Connection\" -Direction \"Outbound\" -Program \"$env:ProgramFiles\\ArcGIS\\Pro\\bin\\ArcGISPro.exe\" -Action \"Allow\"\n\nLogWrite \"ADDING ArcGIS Pro License Registry\"\n$HV_LICENSE = \"C:\\Users\\$PIPELINE_USER\\Documents\\licensed_pro.reg\"\n$LICENSE_REG_CONTENT | Out-File  $HV_LICENSE\n\n$UD_LICENSE_REG_CONTENT = $LICENSE_REG_CONTENT.Replace(\"[HKEY_USERS\\$PIPELINE_USER\\\", \"[HKEY_CURRENT_USER\\\")\n$UD_LICENSE = \"$env:TEMP\\ud_pro_license.reg\"\n$UD_LICENSE_REG_CONTENT | Out-File $UD_LICENSE\n\nGet-Command reg\nreg load \"HKU\\$PIPELINE_USER\" \"C:\\Users\\$PIPELINE_USER\\ntuser.dat\"\nreg import $HV_LICENSE\nreg import $UD_LICENSE\n[gc]::Collect()\nreg unload \"HKU\\$PIPELINE_USER\"\n\nNew-Item -ItemType Directory -Force -Path $HV_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $HV_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e C:\\Users\\$PIPELINE_USER\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\nNew-Item -ItemType Directory -Force -Path $UD_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $UD_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e $HOME\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\nLogWrite \"Setting up file structure of static and dynamic data\"\nNew-Item -ItemType Directory -Force -Path $AUTHORITATIVE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"AUTHORITATIVE_ROOT\", $AUTHORITATIVE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $CACHE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"CACHE_ROOT\", $CACHE_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"FLAGS_ROOT\", $FLAGS_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRISTINE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRISTINE_ROOT\", $PRISTINE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRO_PROJECT_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRO_PROJECT_ROOT\", $PRO_PROJECT_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"PUBLISHED_ROOT\", $PUBLISHED_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $WORKSPACE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"WORKSPACE_ROOT\", $WORKSPACE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PIPELINE_WORKSPACE | Out-Null\n[Environment]::SetEnvironmentVariable(\"PIPELINE_WORKSPACE\", $PIPELINE_WORKSPACE, \"2\")\n\nLogWrite \"Setting up environment variables\"\n[Environment]::SetEnvironmentVariable(\"CACHE_DAYS\", \"3\", \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_HOST\", $EGIS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_USERNAME\", $HYDROVIS_EGIS_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_PASSWORD\", $HYDROVIS_EGIS_PASS, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_VERSION\", $FIM_VERSION, \"2\")\n[Environment]::SetEnvironmentVariable(\"IMAGE_SERVER\", \"image\", \"2\")\n[Environment]::SetEnvironmentVariable(\"PRIMARY_SERVER\", \"server\", \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_ENVIRONMENT\", $VIZ_ENVIRONMENT, \"2\")\n[Environment]::SetEnvironmentVariable(\"WRDS_HOST\", $WRDS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_USER\", $PIPELINE_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_MAX_FLOWS_DATA_BUCKET\", $NWM_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"RNR_MAX_FLOWS_DATA_BUCKET\", $RNR_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_DATA_BUCKET\", $NWM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_DATA_BUCKET\", $FIM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_OUTPUT_BUCKET\", $FIM_OUTPUT_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"LOGSTASH_SOCKET\", \"$LOGSTASH_IP`:5000\", \"2\")\n\nfunction GetRepo\n{\n   Param ([string]$branch, [string]$repo)\n\n   if (Test-Path -Path $repo) {\n       Remove-Item $repo -Recurse\n       Get-ChildItem $repo -Hidden -Recurse | Remove-Item -Force -Recurse\n   }\n   git clone -b $branch $VLAB_REPO_PREFIX/$repo\n\n   if ($LASTEXITCODE -gt 0) { throw \"Error occurred getting \" + $repo }\n}\n\nfunction Retry([Action]$action)\n{\n    $attempts=3\n    $sleepInSeconds=10\n    do\n    {\n        try\n        {\n            $action.Invoke();\n            $message = \"Successfully cloned \" + $repo\n            LogWrite $message\n            break;\n        }\n        catch [Exception]\n        {\n            LogWrite $_.Exception.Message\n        }\n        $attempts--\n        if ($attempts -gt 0) {\n            $message = \"Error: \" + $attempts + \" attempts left for getting \" + $repo\n            LogWrite $message\n            Start-Sleep $sleepInSeconds\n        } else {\n            $message = \"Error: Attempt limit reached while cloning \" + $repo\n            throw $message\n        }\n    } while ($attempts -gt 0)\n}\n\nLogWrite \"Setting up viz pipeline\"\n\nLogWrite \"Creating viz file structure\"\n$VIZ_DIR = \"C:\\Users\\$PIPELINE_USER\\NWC\\viz\"\nNew-Item -ItemType Directory -Force -Path $VIZ_DIR | Out-Null\n\nSet-Location -Path $VIZ_DIR\nLogWrite \"CLONING PIPELINE REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo master owp-viz-proc-pipeline})\n\nLogWrite \"CLONING VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\n$AWS_VIZ_ENVIRONMENT = \"aws-\" + $VIZ_ENVIRONMENT\nRetry({GetRepo $AWS_VIZ_ENVIRONMENT owp-viz-services})\n\nLogWrite \"CLONING AWS VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo $VIZ_ENVIRONMENT owp-viz-services-aws})\n\nLogWrite \"CREATING FRESH viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" create -y --name viz --clone arcgispro-py3\n\nLogWrite \"ACTIVATING viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\activate.bat\" viz\n\n$window_python_exe = \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\"\n$user_python_exe = \"C:\\Users\\$PIPELINE_USER\\AppData\\Local\\ESRI\\conda\\envs\\viz\\python.exe\"\nif (Test-Path -Path $window_python_exe -PathType Leaf) {\n    $python_exe = $window_python_exe\n} else {\n    $python_exe = $user_python_exe\n}\n\nLogWrite \"INSTALLING PROCESSING PIPELINE REPO\"\n$PIPELINE_REPO = $VIZ_DIR + \"\\owp-viz-proc-pipeline\"\nSet-Location -Path $PIPELINE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"INSTALLING SERVICE REPO\"\n$SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services\"\nSet-Location -Path $SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" install -y -n viz -c esri arcgis\n\nLogWrite \"INSTALLING AWS SERVICE REPO\"\n$AWS_SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services-aws\"\nSet-Location -Path $AWS_SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"--\u003eTRANFERRING AUTHORITATIVE DATA\"\n$s3_authoritative = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"authoritative_data/\"\naws s3 cp $s3_authoritative $AUTHORITATIVE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRISTINE DATA\"\n$s3_pristine = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pristine_data/\"\naws s3 cp $s3_pristine $PRISTINE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRO PROJECT DATA\"\n$s3_pro_projects = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pro_project_data/\"\naws s3 cp $s3_pro_projects $PRO_PROJECT_ROOT --recursive\n\nLogWrite \"CREATING CONNECTION FILES FOR $FIM_DATA_BUCKET\"\nSet-Location -Path $VIZ_DIR\n$env:AUTHORITATIVE_ROOT = $AUTHORITATIVE_ROOT\n$env:FIM_OUTPUT_BUCKET = $FIM_OUTPUT_BUCKET\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_s3_connection_files.py\n\nSet-Location HKCU:\\Software\\ESRI\\ArcGISPro\nRemove-Item -Recurse -Force -Confirm:$false Licensing\n\nLogWrite \"UPDATING PYTHON PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n\nLogWrite \"UPDATING WORKSPACE PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"D:\\\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"D:\\\"\n\nLogWrite \"ADDING $PUBLISHED_ROOT TO $EGIS_HOST\"\nSet-Location -Path $VIZ_DIR\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\update_data_stores.py $EGIS_HOST $PUBLISHED_ROOT $HYDROVIS_EGIS_USER $HYDROVIS_EGIS_PASS\n\nLogWrite \"DELETING PUBLISHED FLAGS IF THEY EXIST\"\n$EXISTING_PUBLISHED_FLAGS = aws s3 ls $FLAGS_ROOT\nif ($EXISTING_PUBLISHED_FLAGS) {\n    LogWrite \"DELETING PUBLISHED FLAGS\"\n    aws s3 rm $FLAGS_ROOT --recursive\n}\n\nLogWrite \"GETTING NSSM\"\nNew-Item -ItemType Directory -Force -Path 'C:\\Programs' | Out-Null\nSet-Location -Path 'C:\\Programs'\nInvoke-WebRequest https://nssm.cc/release/nssm-2.24.zip -OutFile nssm-2.24.zip\nExpand-Archive -LiteralPath 'nssm-2.24.zip' -DestinationPath nssm-2.24\nCopy-Item .\\nssm-2.24\\nssm-2.24\\win64\\nssm.exe 'C:\\Programs\\nssm.exe'\nRemove-Item nssm-2.24.zip\nRemove-Item nssm-2.24 -Force -Recurse\n$PATH = [Environment]::GetEnvironmentVariable(\"PATH\")\n$PATH += \";C:\\Programs\"\n[Environment]::SetEnvironmentVariable(\"PATH\", $PATH, \"2\")\n\nLogWrite \"SETTING UP WINDOWS SERVICES\"\nSet-Location -Path $VIZ_DIR\n\u0026 .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_windows_services.ps1 $WINDOWS_SERVICE_STARTUP $WINDOWS_SERVICE_STATUS $PIPELINE_USER $PIPELINE_USER_ACCOUNT_PASSWORD\n\nLogWrite \"DONE SETTING UP PIPELINE\"\n\u003c/powershell\u003e\n\u003cpersist\u003efalse\u003c/persist\u003e\n",
                "content_type": "text/x-shellscript",
                "filename": "prc_setup.ps1",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"prc_setup.ps1\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n\u003cpowershell\u003e\n$Fileshare = '\\\\10.27.2.29'\n$EGIS_HOST = 'maps-staging.water.noaa.gov'\n$VIZ_ENVIRONMENT = 'staging'\n$FIM_VERSION = '3.0.23.3'\n$SSH_KEY_CONTENT = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAYEA4BR4+o+atEvTxc2k0n+4lhN4jpJSDRg9sUNseJm6fpXUX72ml7M+\nTDCiicpjU4ja7fX/tMY5do3X/ggy9wHFYjYbzAlRD0//gzKkr7Azo9Sl+4rArENNFaoEmT\nge/ZW5q9g9NukOKESZXQETbVWIFFDlVTO9dUj8w23OhE4NMio/zre4EOPgeuC4I+sqfPSp\nkEY14Udq6xh9YNkq9ouT6BeEvl2R1O0asS4WwZNpYLLErxwK7nNyqXZiXlglE89lArovEI\n43+MVphc2SeEdU1Sela9ShsK6ZWqmE9V1HgdSKIQUYRNurnNSyM5mMAM5ByiEkN27Xsczv\npdgGqXkNub3o3cloriiP70nGIefj+XH6sx/pBFOum+zzbPrrb5b0iYUz0c9KgWxypmeesW\nVFnw1Gs+K6wOlkqz1ejDjNNQiBLzkiZtaz4gcLeoBp0lsFJG5IXCvtoHlEC/oiXPoqpcxy\nThDBedX5mikJJvdK/9tOewdaQmm5ZAiWxTEoCnknAAAFmKQ3sJKkN7CSAAAAB3NzaC1yc2\nEAAAGBAOAUePqPmrRL08XNpNJ/uJYTeI6SUg0YPbFDbHiZun6V1F+9ppezPkwwoonKY1OI\n2u31/7TGOXaN1/4IMvcBxWI2G8wJUQ9P/4MypK+wM6PUpfuKwKxDTRWqBJk4Hv2VuavYPT\nbpDihEmV0BE21ViBRQ5VUzvXVI/MNtzoRODTIqP863uBDj4HrguCPrKnz0qZBGNeFHausY\nfWDZKvaLk+gXhL5dkdTtGrEuFsGTaWCyxK8cCu5zcql2Yl5YJRPPZQK6LxCON/jFaYXNkn\nhHVNUnpWvUobCumVqphPVdR4HUiiEFGETbq5zUsjOZjADOQcohJDdu17HM76XYBql5Dbm9\n6N3JaK4oj+9JxiHn4/lx+rMf6QRTrpvs82z662+W9ImFM9HPSoFscqZnnrFlRZ8NRrPius\nDpZKs9Xow4zTUIgS85ImbWs+IHC3qAadJbBSRuSFwr7aB5RAv6Ilz6KqXMck4QwXnV+Zop\nCSb3Sv/bTnsHWkJpuWQIlsUxKAp5JwAAAAMBAAEAAAGAON+5XQ852u0sERaC8RKNzTmf7b\n/hp4Uxk15jl7CdDygEQVCnifVqqHfnqUV/NGKV/rPjdQSi7R5PZiC6nssKSEUnhQAQXOyX\nE7u05Qq58Kk2f8PV52Mlm4wNor4Fz6NC/wThdKBugXX33w042xVMdquZqah6O9yMmyWxtw\n8Adm0WyOcEhvTvswB6fFNh81k9+Gp5nnY8AvOyTvSP3QfMQKpHfPHO49ZSYgoqqHM72dlF\n5pQdiiwvPCfaC8wfjQmkRhkPu5D6IO2aY/zuFX+2sJ0Ha2aQLc/wEyDinu5SlPReh7sD2Z\nxpbidqMhVyRIZZ+oIsAbuCR0rhxHP0a/vTBX6PGHMhi7VxUXtRjudbkL+SSLNe6eOofBv+\nny+Z6IHgh/pv7zYSxWw+2KpK8Bx6FPzEgae+VFW2D9MUSOhdWXLZHtsPK7TMukCpsuuaO9\nAtRlMRvsWMLi5ObVqGstozkjH+7/W1ZRHoxD9p/gCVvY7vWpJmDOlQNGSJkWYts2JRAAAA\nwQCXnexIjVhU/+wCDwQmkzPIdVRHbSwiXINMUo8BJwpYE8ac9T81fqEcGf9Kdsj8Y9IRdh\nD5WydNVaryiGNAmyQV3DdPVMPNw9SfD5yArx8ZXlq4cbqBiQJaL89FfrnPIDmT8D4zF/eX\nS8PbFg9EKKqFwHNpT+pKVxJJdeqSWJBX4ZfhYfy5n7vYLjd1XAOm924o2V2v6SgOhS6qZE\ntAJvM1E3xQjHdFCNRmFTFtw/mbaPo3mIi4tUPWaS5cL0avVd8AAADBAPFkdwLug7OLuTaB\n0Pzwm+HshxF978yS08PJAUeKn9k3+SOCGbWW1AGnnTpJjzPaZAu209Qkge7aVVLA/kawEb\ntJr5jWq1VqSQE+LRShUZv9NxTwUA4aXO/37hLW02Q0ImHTWfK4ZHK93vPz5CjhrFjM5mwc\nztCopRypxg1Frx8lMC+iWfz8EoS5odCusmNOa6abNX1PDxIvxBrAgfhyiPnRpWJ3rcE8sq\nnpv/V4ulwhT9lDt9ZlFji73Qkr7GXB1QAAAMEA7aPPrs871BS7ZZ9C/7KBqeK/a3PpcZqW\nqepObo4FtCO7EMGjiFbdC6pKelF9hj2brQ2Iv4QEZZK0rsnyAnBaMTebsHXdKRxjM+gnWI\nzd5frrcYdrcvfATL8FXV6XKmKW57fipjUQS7Qk37ZfyWCRV2IOvJyFtz9Dw/5e97jBChiW\noMhmfU7CAZYd25oMRftgasQk6Qf6Wsi8fg+sEWi4uFwsCD6Xwbht52kU99V+G4tBjlCZSn\nJSQI64GqSgnBELAAAAIW53Y1xjb3JleS5rcmV3c29uQE5XQ0FMLUwtNDMzOTMzMwE=\n-----END OPENSSH PRIVATE KEY-----\n'\n$LICENSE_REG_CONTENT = 'Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\arcgis\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@10.27.2.156\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\arcgis\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n'\n$WRDS_HOST = '10.27.2.90'\n$S3_STATIC_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$DEPLOY_FILES_PREFIX = 'viz/'\n$NWM_DATA_BUCKET = 'hydrovis-uat-nwm-us-east-1'\n$FIM_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$FIM_OUTPUT_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$NWM_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$RNR_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-rnr-us-east-1'\n$WINDOWS_SERVICE_STATUS = 'start'\n$WINDOWS_SERVICE_STARTUP = 'SERVICE_AUTO_START'\n$PIPELINE_USER = 'arcgis'\n$PIPELINE_USER_ACCOUNT_PASSWORD = 'hardwork123donehere!'\n\n$HYDROVIS_EGIS_USER = \"hydrovis.proc\"\n$HYDROVIS_EGIS_PASS = 'WaterIsFun1@'\n\n$LOGSTASH_IP = '10.27.2.20'\n$VLAB_REPO_PREFIX   = 'ssh://corey.krewson@vlab.noaa.gov:29418'\n$VLAB_HOST   = 'vlab.noaa.gov'\n\nWrite-Host \"Setting up $PIPELINE_USER profile\"\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n# This command will fail but that is on purpose. It will initialize the profile which is what we want\n$securePassword = ConvertTo-SecureString $PIPELINE_USER_ACCOUNT_PASSWORD -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential $PIPELINE_USER, $securePassword\nStart-Process program.exe -Credential $credential\n\n$Logfile = \"C:\\Users\\$PIPELINE_USER\\Desktop\\pipeline_setup.log\"\n\nfunction LogWrite\n{\nParam ([string]$logstring)\nWrite-Host $logstring\n$currentdate = Get-Date -Format \"MM/dd/yyyy HH:mm K\"\n$logstring =  $currentdate + \": \" +  $logstring\nAdd-content $Logfile -value $logstring\n}\n\nfunction CreateUTF8File\n{\n  Param ([string]$file_content, [string]$file_dir, [string]$file_name)\n\n  Set-Location -Path $file_dir\n  $file_path = $file_dir + \"\\\" + $file_name\n  $file_content | Out-File -Encoding ascii -FilePath $file_path\n  Get-ChildItem $file_name | ForEach-Object {\n    # get the contents and replace line breaks by U+000A\n    $contents = [IO.File]::ReadAllText($_) -replace \"`r`n?\", \"`n\"\n    # create UTF-8 encoding without signature\n    $utf8 = New-Object System.Text.UTF8Encoding $false\n    # write the text back\n    [IO.File]::WriteAllText($_, $contents, $utf8)\n  }\n}\n\nLogWrite \"Setting up file variables\"\n$StaticDir = \"D:\\static\"\n$DynamicDir = \"D:\\dynamic\"\n\n$AUTHORITATIVE_ROOT = \"$StaticDir\\authoritative\"\n$CACHE_ROOT = \"$DynamicDir\\cache\"\n$FLAGS_ROOT = \"s3://$FIM_OUTPUT_BUCKET/published_flags\"\n$PRISTINE_ROOT = \"$StaticDir\\pristine\"\n$PRO_PROJECT_ROOT = \"$StaticDir\\pro_project\"\n$PUBLISHED_ROOT = \"$Fileshare\\viz\\published\"\n$WORKSPACE_ROOT = \"$DynamicDir\\authoritative\"\n$PIPELINE_WORKSPACE = \"D:\\pipeline_workspace\"\n\nLogWrite \"Setting up D drive\"\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nLogWrite \"ADDING SSH Files\"\n$HV_SSH_DIR = \"C:\\Users\\$PIPELINE_USER\\.ssh\"\n$UD_SSH_DIR = \"$HOME\\.ssh\"\n\nLogWrite \"Opening Firewall for ArcgisPro License Connection\"\nNew-NetFirewallRule -DisplayName \"ArcGISPro License Manager Connection\" -Direction \"Outbound\" -Program \"$env:ProgramFiles\\ArcGIS\\Pro\\bin\\ArcGISPro.exe\" -Action \"Allow\"\n\nLogWrite \"ADDING ArcGIS Pro License Registry\"\n$HV_LICENSE = \"C:\\Users\\$PIPELINE_USER\\Documents\\licensed_pro.reg\"\n$LICENSE_REG_CONTENT | Out-File  $HV_LICENSE\n\n$UD_LICENSE_REG_CONTENT = $LICENSE_REG_CONTENT.Replace(\"[HKEY_USERS\\$PIPELINE_USER\\\", \"[HKEY_CURRENT_USER\\\")\n$UD_LICENSE = \"$env:TEMP\\ud_pro_license.reg\"\n$UD_LICENSE_REG_CONTENT | Out-File $UD_LICENSE\n\nGet-Command reg\nreg load \"HKU\\$PIPELINE_USER\" \"C:\\Users\\$PIPELINE_USER\\ntuser.dat\"\nreg import $HV_LICENSE\nreg import $UD_LICENSE\n[gc]::Collect()\nreg unload \"HKU\\$PIPELINE_USER\"\n\nNew-Item -ItemType Directory -Force -Path $HV_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $HV_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e C:\\Users\\$PIPELINE_USER\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\nNew-Item -ItemType Directory -Force -Path $UD_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $UD_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e $HOME\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\nLogWrite \"Setting up file structure of static and dynamic data\"\nNew-Item -ItemType Directory -Force -Path $AUTHORITATIVE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"AUTHORITATIVE_ROOT\", $AUTHORITATIVE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $CACHE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"CACHE_ROOT\", $CACHE_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"FLAGS_ROOT\", $FLAGS_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRISTINE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRISTINE_ROOT\", $PRISTINE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRO_PROJECT_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRO_PROJECT_ROOT\", $PRO_PROJECT_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"PUBLISHED_ROOT\", $PUBLISHED_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $WORKSPACE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"WORKSPACE_ROOT\", $WORKSPACE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PIPELINE_WORKSPACE | Out-Null\n[Environment]::SetEnvironmentVariable(\"PIPELINE_WORKSPACE\", $PIPELINE_WORKSPACE, \"2\")\n\nLogWrite \"Setting up environment variables\"\n[Environment]::SetEnvironmentVariable(\"CACHE_DAYS\", \"3\", \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_HOST\", $EGIS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_USERNAME\", $HYDROVIS_EGIS_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_PASSWORD\", $HYDROVIS_EGIS_PASS, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_VERSION\", $FIM_VERSION, \"2\")\n[Environment]::SetEnvironmentVariable(\"IMAGE_SERVER\", \"image\", \"2\")\n[Environment]::SetEnvironmentVariable(\"PRIMARY_SERVER\", \"server\", \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_ENVIRONMENT\", $VIZ_ENVIRONMENT, \"2\")\n[Environment]::SetEnvironmentVariable(\"WRDS_HOST\", $WRDS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_USER\", $PIPELINE_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_MAX_FLOWS_DATA_BUCKET\", $NWM_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"RNR_MAX_FLOWS_DATA_BUCKET\", $RNR_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_DATA_BUCKET\", $NWM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_DATA_BUCKET\", $FIM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_OUTPUT_BUCKET\", $FIM_OUTPUT_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"LOGSTASH_SOCKET\", \"$LOGSTASH_IP`:5000\", \"2\")\n\nfunction GetRepo\n{\n   Param ([string]$branch, [string]$repo)\n\n   if (Test-Path -Path $repo) {\n       Remove-Item $repo -Recurse\n       Get-ChildItem $repo -Hidden -Recurse | Remove-Item -Force -Recurse\n   }\n   git clone -b $branch $VLAB_REPO_PREFIX/$repo\n\n   if ($LASTEXITCODE -gt 0) { throw \"Error occurred getting \" + $repo }\n}\n\nfunction Retry([Action]$action)\n{\n    $attempts=3\n    $sleepInSeconds=10\n    do\n    {\n        try\n        {\n            $action.Invoke();\n            $message = \"Successfully cloned \" + $repo\n            LogWrite $message\n            break;\n        }\n        catch [Exception]\n        {\n            LogWrite $_.Exception.Message\n        }\n        $attempts--\n        if ($attempts -gt 0) {\n            $message = \"Error: \" + $attempts + \" attempts left for getting \" + $repo\n            LogWrite $message\n            Start-Sleep $sleepInSeconds\n        } else {\n            $message = \"Error: Attempt limit reached while cloning \" + $repo\n            throw $message\n        }\n    } while ($attempts -gt 0)\n}\n\nLogWrite \"Setting up viz pipeline\"\n\nLogWrite \"Creating viz file structure\"\n$VIZ_DIR = \"C:\\Users\\$PIPELINE_USER\\NWC\\viz\"\nNew-Item -ItemType Directory -Force -Path $VIZ_DIR | Out-Null\n\nSet-Location -Path $VIZ_DIR\nLogWrite \"CLONING PIPELINE REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo master owp-viz-proc-pipeline})\n\nLogWrite \"CLONING VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\n$AWS_VIZ_ENVIRONMENT = \"aws-\" + $VIZ_ENVIRONMENT\nRetry({GetRepo $AWS_VIZ_ENVIRONMENT owp-viz-services})\n\nLogWrite \"CLONING AWS VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo $VIZ_ENVIRONMENT owp-viz-services-aws})\n\nLogWrite \"CREATING FRESH viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" create -y --name viz --clone arcgispro-py3\n\nLogWrite \"ACTIVATING viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\activate.bat\" viz\n\n$window_python_exe = \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\"\n$user_python_exe = \"C:\\Users\\$PIPELINE_USER\\AppData\\Local\\ESRI\\conda\\envs\\viz\\python.exe\"\nif (Test-Path -Path $window_python_exe -PathType Leaf) {\n    $python_exe = $window_python_exe\n} else {\n    $python_exe = $user_python_exe\n}\n\nLogWrite \"INSTALLING PROCESSING PIPELINE REPO\"\n$PIPELINE_REPO = $VIZ_DIR + \"\\owp-viz-proc-pipeline\"\nSet-Location -Path $PIPELINE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"INSTALLING SERVICE REPO\"\n$SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services\"\nSet-Location -Path $SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" install -y -n viz -c esri arcgis\n\nLogWrite \"INSTALLING AWS SERVICE REPO\"\n$AWS_SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services-aws\"\nSet-Location -Path $AWS_SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"--\u003eTRANFERRING AUTHORITATIVE DATA\"\n$s3_authoritative = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"authoritative_data/\"\naws s3 cp $s3_authoritative $AUTHORITATIVE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRISTINE DATA\"\n$s3_pristine = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pristine_data/\"\naws s3 cp $s3_pristine $PRISTINE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRO PROJECT DATA\"\n$s3_pro_projects = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pro_project_data/\"\naws s3 cp $s3_pro_projects $PRO_PROJECT_ROOT --recursive\n\nLogWrite \"CREATING CONNECTION FILES FOR $FIM_DATA_BUCKET\"\nSet-Location -Path $VIZ_DIR\n$env:AUTHORITATIVE_ROOT = $AUTHORITATIVE_ROOT\n$env:FIM_OUTPUT_BUCKET = $FIM_OUTPUT_BUCKET\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_s3_connection_files.py\n\nSet-Location HKCU:\\Software\\ESRI\\ArcGISPro\nRemove-Item -Recurse -Force -Confirm:$false Licensing\n\nLogWrite \"UPDATING PYTHON PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n\nLogWrite \"UPDATING WORKSPACE PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"D:\\\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"D:\\\"\n\nLogWrite \"ADDING $PUBLISHED_ROOT TO $EGIS_HOST\"\nSet-Location -Path $VIZ_DIR\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\update_data_stores.py $EGIS_HOST $PUBLISHED_ROOT $HYDROVIS_EGIS_USER $HYDROVIS_EGIS_PASS\n\nLogWrite \"DELETING PUBLISHED FLAGS IF THEY EXIST\"\n$EXISTING_PUBLISHED_FLAGS = aws s3 ls $FLAGS_ROOT\nif ($EXISTING_PUBLISHED_FLAGS) {\n    LogWrite \"DELETING PUBLISHED FLAGS\"\n    aws s3 rm $FLAGS_ROOT --recursive\n}\n\nLogWrite \"GETTING NSSM\"\nNew-Item -ItemType Directory -Force -Path 'C:\\Programs' | Out-Null\nSet-Location -Path 'C:\\Programs'\nInvoke-WebRequest https://nssm.cc/release/nssm-2.24.zip -OutFile nssm-2.24.zip\nExpand-Archive -LiteralPath 'nssm-2.24.zip' -DestinationPath nssm-2.24\nCopy-Item .\\nssm-2.24\\nssm-2.24\\win64\\nssm.exe 'C:\\Programs\\nssm.exe'\nRemove-Item nssm-2.24.zip\nRemove-Item nssm-2.24 -Force -Recurse\n$PATH = [Environment]::GetEnvironmentVariable(\"PATH\")\n$PATH += \";C:\\Programs\"\n[Environment]::SetEnvironmentVariable(\"PATH\", $PATH, \"2\")\n\nLogWrite \"SETTING UP WINDOWS SERVICES\"\nSet-Location -Path $VIZ_DIR\n\u0026 .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_windows_services.ps1 $WINDOWS_SERVICE_STARTUP $WINDOWS_SERVICE_STATUS $PIPELINE_USER $PIPELINE_USER_ACCOUNT_PASSWORD\n\nLogWrite \"DONE SETTING UP PIPELINE\"\n\u003c/powershell\u003e\n\u003cpersist\u003efalse\u003c/persist\u003e\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "arcgispro_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "7ddd37044ce7ba63277dbe5b7bec1c47248a0f8cefcef5d8c69405c9b2316fa1",
            "rendered": "Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\arcgis\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@10.27.2.156\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\arcgis\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n",
            "template": "Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\${PIPELINE_USER}\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@${LICENSE_SERVER}\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\${PIPELINE_USER}\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n",
            "vars": {
              "LICENSE_SERVER": "10.27.2.156",
              "PIPELINE_USER": "arcgis"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PIPELINE_USER",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "fileshare_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fb49dc08c06519cad5c605068a88b3cce9b11c3622f0383c20dcbf46a08d7ed3",
            "rendered": "\u003cpowershell\u003e\n$PIPELINE_USER = 'arcgis'\n\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nNew-Item -ItemType Directory -Force -Path D:\\viz | Out-Null\nNew-Item -ItemType Directory -Force -Path D:\\viz\\published | Out-Null\n\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n\nNew-SmbShare -Name \"viz\" -Path \"D:\\viz\" -FullAccess $PIPELINE_USER\n\n\u003c/powershell\u003e\n",
            "template": "\u003cpowershell\u003e\n$PIPELINE_USER = '${PIPELINE_USER}'\n\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nNew-Item -ItemType Directory -Force -Path D:\\viz | Out-Null\nNew-Item -ItemType Directory -Force -Path D:\\viz\\published | Out-Null\n\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n\nNew-SmbShare -Name \"viz\" -Path \"D:\\viz\" -FullAccess $PIPELINE_USER\n\n\u003c/powershell\u003e\n",
            "vars": {
              "PIPELINE_USER": "arcgis"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PIPELINE_USER",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "data",
      "type": "template_file",
      "name": "pipeline_setup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fec6db134e5dfa22d02f0216c17cd921719a31de7cb290c64ae9f78dc5840532",
            "rendered": "\u003cpowershell\u003e\n$Fileshare = '\\\\10.27.2.29'\n$EGIS_HOST = 'maps-staging.water.noaa.gov'\n$VIZ_ENVIRONMENT = 'staging'\n$FIM_VERSION = '3.0.23.3'\n$SSH_KEY_CONTENT = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAYEA4BR4+o+atEvTxc2k0n+4lhN4jpJSDRg9sUNseJm6fpXUX72ml7M+\nTDCiicpjU4ja7fX/tMY5do3X/ggy9wHFYjYbzAlRD0//gzKkr7Azo9Sl+4rArENNFaoEmT\nge/ZW5q9g9NukOKESZXQETbVWIFFDlVTO9dUj8w23OhE4NMio/zre4EOPgeuC4I+sqfPSp\nkEY14Udq6xh9YNkq9ouT6BeEvl2R1O0asS4WwZNpYLLErxwK7nNyqXZiXlglE89lArovEI\n43+MVphc2SeEdU1Sela9ShsK6ZWqmE9V1HgdSKIQUYRNurnNSyM5mMAM5ByiEkN27Xsczv\npdgGqXkNub3o3cloriiP70nGIefj+XH6sx/pBFOum+zzbPrrb5b0iYUz0c9KgWxypmeesW\nVFnw1Gs+K6wOlkqz1ejDjNNQiBLzkiZtaz4gcLeoBp0lsFJG5IXCvtoHlEC/oiXPoqpcxy\nThDBedX5mikJJvdK/9tOewdaQmm5ZAiWxTEoCnknAAAFmKQ3sJKkN7CSAAAAB3NzaC1yc2\nEAAAGBAOAUePqPmrRL08XNpNJ/uJYTeI6SUg0YPbFDbHiZun6V1F+9ppezPkwwoonKY1OI\n2u31/7TGOXaN1/4IMvcBxWI2G8wJUQ9P/4MypK+wM6PUpfuKwKxDTRWqBJk4Hv2VuavYPT\nbpDihEmV0BE21ViBRQ5VUzvXVI/MNtzoRODTIqP863uBDj4HrguCPrKnz0qZBGNeFHausY\nfWDZKvaLk+gXhL5dkdTtGrEuFsGTaWCyxK8cCu5zcql2Yl5YJRPPZQK6LxCON/jFaYXNkn\nhHVNUnpWvUobCumVqphPVdR4HUiiEFGETbq5zUsjOZjADOQcohJDdu17HM76XYBql5Dbm9\n6N3JaK4oj+9JxiHn4/lx+rMf6QRTrpvs82z662+W9ImFM9HPSoFscqZnnrFlRZ8NRrPius\nDpZKs9Xow4zTUIgS85ImbWs+IHC3qAadJbBSRuSFwr7aB5RAv6Ilz6KqXMck4QwXnV+Zop\nCSb3Sv/bTnsHWkJpuWQIlsUxKAp5JwAAAAMBAAEAAAGAON+5XQ852u0sERaC8RKNzTmf7b\n/hp4Uxk15jl7CdDygEQVCnifVqqHfnqUV/NGKV/rPjdQSi7R5PZiC6nssKSEUnhQAQXOyX\nE7u05Qq58Kk2f8PV52Mlm4wNor4Fz6NC/wThdKBugXX33w042xVMdquZqah6O9yMmyWxtw\n8Adm0WyOcEhvTvswB6fFNh81k9+Gp5nnY8AvOyTvSP3QfMQKpHfPHO49ZSYgoqqHM72dlF\n5pQdiiwvPCfaC8wfjQmkRhkPu5D6IO2aY/zuFX+2sJ0Ha2aQLc/wEyDinu5SlPReh7sD2Z\nxpbidqMhVyRIZZ+oIsAbuCR0rhxHP0a/vTBX6PGHMhi7VxUXtRjudbkL+SSLNe6eOofBv+\nny+Z6IHgh/pv7zYSxWw+2KpK8Bx6FPzEgae+VFW2D9MUSOhdWXLZHtsPK7TMukCpsuuaO9\nAtRlMRvsWMLi5ObVqGstozkjH+7/W1ZRHoxD9p/gCVvY7vWpJmDOlQNGSJkWYts2JRAAAA\nwQCXnexIjVhU/+wCDwQmkzPIdVRHbSwiXINMUo8BJwpYE8ac9T81fqEcGf9Kdsj8Y9IRdh\nD5WydNVaryiGNAmyQV3DdPVMPNw9SfD5yArx8ZXlq4cbqBiQJaL89FfrnPIDmT8D4zF/eX\nS8PbFg9EKKqFwHNpT+pKVxJJdeqSWJBX4ZfhYfy5n7vYLjd1XAOm924o2V2v6SgOhS6qZE\ntAJvM1E3xQjHdFCNRmFTFtw/mbaPo3mIi4tUPWaS5cL0avVd8AAADBAPFkdwLug7OLuTaB\n0Pzwm+HshxF978yS08PJAUeKn9k3+SOCGbWW1AGnnTpJjzPaZAu209Qkge7aVVLA/kawEb\ntJr5jWq1VqSQE+LRShUZv9NxTwUA4aXO/37hLW02Q0ImHTWfK4ZHK93vPz5CjhrFjM5mwc\nztCopRypxg1Frx8lMC+iWfz8EoS5odCusmNOa6abNX1PDxIvxBrAgfhyiPnRpWJ3rcE8sq\nnpv/V4ulwhT9lDt9ZlFji73Qkr7GXB1QAAAMEA7aPPrs871BS7ZZ9C/7KBqeK/a3PpcZqW\nqepObo4FtCO7EMGjiFbdC6pKelF9hj2brQ2Iv4QEZZK0rsnyAnBaMTebsHXdKRxjM+gnWI\nzd5frrcYdrcvfATL8FXV6XKmKW57fipjUQS7Qk37ZfyWCRV2IOvJyFtz9Dw/5e97jBChiW\noMhmfU7CAZYd25oMRftgasQk6Qf6Wsi8fg+sEWi4uFwsCD6Xwbht52kU99V+G4tBjlCZSn\nJSQI64GqSgnBELAAAAIW53Y1xjb3JleS5rcmV3c29uQE5XQ0FMLUwtNDMzOTMzMwE=\n-----END OPENSSH PRIVATE KEY-----\n'\n$LICENSE_REG_CONTENT = 'Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\arcgis\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@10.27.2.156\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\arcgis\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n'\n$WRDS_HOST = '10.27.2.90'\n$S3_STATIC_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$DEPLOY_FILES_PREFIX = 'viz/'\n$NWM_DATA_BUCKET = 'hydrovis-uat-nwm-us-east-1'\n$FIM_DATA_BUCKET = 'hydrovis-uat-deployment-us-east-1'\n$FIM_OUTPUT_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$NWM_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-fim-us-east-1'\n$RNR_MAX_FLOWS_DATA_BUCKET = 'hydrovis-uat-rnr-us-east-1'\n$WINDOWS_SERVICE_STATUS = 'start'\n$WINDOWS_SERVICE_STARTUP = 'SERVICE_AUTO_START'\n$PIPELINE_USER = 'arcgis'\n$PIPELINE_USER_ACCOUNT_PASSWORD = 'hardwork123donehere!'\n\n$HYDROVIS_EGIS_USER = \"hydrovis.proc\"\n$HYDROVIS_EGIS_PASS = 'WaterIsFun1@'\n\n$LOGSTASH_IP = '10.27.2.20'\n$VLAB_REPO_PREFIX   = 'ssh://corey.krewson@vlab.noaa.gov:29418'\n$VLAB_HOST   = 'vlab.noaa.gov'\n\nWrite-Host \"Setting up $PIPELINE_USER profile\"\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n# This command will fail but that is on purpose. It will initialize the profile which is what we want\n$securePassword = ConvertTo-SecureString $PIPELINE_USER_ACCOUNT_PASSWORD -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential $PIPELINE_USER, $securePassword\nStart-Process program.exe -Credential $credential\n\n$Logfile = \"C:\\Users\\$PIPELINE_USER\\Desktop\\pipeline_setup.log\"\n\nfunction LogWrite\n{\nParam ([string]$logstring)\nWrite-Host $logstring\n$currentdate = Get-Date -Format \"MM/dd/yyyy HH:mm K\"\n$logstring =  $currentdate + \": \" +  $logstring\nAdd-content $Logfile -value $logstring\n}\n\nfunction CreateUTF8File\n{\n  Param ([string]$file_content, [string]$file_dir, [string]$file_name)\n\n  Set-Location -Path $file_dir\n  $file_path = $file_dir + \"\\\" + $file_name\n  $file_content | Out-File -Encoding ascii -FilePath $file_path\n  Get-ChildItem $file_name | ForEach-Object {\n    # get the contents and replace line breaks by U+000A\n    $contents = [IO.File]::ReadAllText($_) -replace \"`r`n?\", \"`n\"\n    # create UTF-8 encoding without signature\n    $utf8 = New-Object System.Text.UTF8Encoding $false\n    # write the text back\n    [IO.File]::WriteAllText($_, $contents, $utf8)\n  }\n}\n\nLogWrite \"Setting up file variables\"\n$StaticDir = \"D:\\static\"\n$DynamicDir = \"D:\\dynamic\"\n\n$AUTHORITATIVE_ROOT = \"$StaticDir\\authoritative\"\n$CACHE_ROOT = \"$DynamicDir\\cache\"\n$FLAGS_ROOT = \"s3://$FIM_OUTPUT_BUCKET/published_flags\"\n$PRISTINE_ROOT = \"$StaticDir\\pristine\"\n$PRO_PROJECT_ROOT = \"$StaticDir\\pro_project\"\n$PUBLISHED_ROOT = \"$Fileshare\\viz\\published\"\n$WORKSPACE_ROOT = \"$DynamicDir\\authoritative\"\n$PIPELINE_WORKSPACE = \"D:\\pipeline_workspace\"\n\nLogWrite \"Setting up D drive\"\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nLogWrite \"ADDING SSH Files\"\n$HV_SSH_DIR = \"C:\\Users\\$PIPELINE_USER\\.ssh\"\n$UD_SSH_DIR = \"$HOME\\.ssh\"\n\nLogWrite \"Opening Firewall for ArcgisPro License Connection\"\nNew-NetFirewallRule -DisplayName \"ArcGISPro License Manager Connection\" -Direction \"Outbound\" -Program \"$env:ProgramFiles\\ArcGIS\\Pro\\bin\\ArcGISPro.exe\" -Action \"Allow\"\n\nLogWrite \"ADDING ArcGIS Pro License Registry\"\n$HV_LICENSE = \"C:\\Users\\$PIPELINE_USER\\Documents\\licensed_pro.reg\"\n$LICENSE_REG_CONTENT | Out-File  $HV_LICENSE\n\n$UD_LICENSE_REG_CONTENT = $LICENSE_REG_CONTENT.Replace(\"[HKEY_USERS\\$PIPELINE_USER\\\", \"[HKEY_CURRENT_USER\\\")\n$UD_LICENSE = \"$env:TEMP\\ud_pro_license.reg\"\n$UD_LICENSE_REG_CONTENT | Out-File $UD_LICENSE\n\nGet-Command reg\nreg load \"HKU\\$PIPELINE_USER\" \"C:\\Users\\$PIPELINE_USER\\ntuser.dat\"\nreg import $HV_LICENSE\nreg import $UD_LICENSE\n[gc]::Collect()\nreg unload \"HKU\\$PIPELINE_USER\"\n\nNew-Item -ItemType Directory -Force -Path $HV_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $HV_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e C:\\Users\\$PIPELINE_USER\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\nNew-Item -ItemType Directory -Force -Path $UD_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $UD_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e $HOME\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\nLogWrite \"Setting up file structure of static and dynamic data\"\nNew-Item -ItemType Directory -Force -Path $AUTHORITATIVE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"AUTHORITATIVE_ROOT\", $AUTHORITATIVE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $CACHE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"CACHE_ROOT\", $CACHE_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"FLAGS_ROOT\", $FLAGS_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRISTINE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRISTINE_ROOT\", $PRISTINE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRO_PROJECT_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRO_PROJECT_ROOT\", $PRO_PROJECT_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"PUBLISHED_ROOT\", $PUBLISHED_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $WORKSPACE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"WORKSPACE_ROOT\", $WORKSPACE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PIPELINE_WORKSPACE | Out-Null\n[Environment]::SetEnvironmentVariable(\"PIPELINE_WORKSPACE\", $PIPELINE_WORKSPACE, \"2\")\n\nLogWrite \"Setting up environment variables\"\n[Environment]::SetEnvironmentVariable(\"CACHE_DAYS\", \"3\", \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_HOST\", $EGIS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_USERNAME\", $HYDROVIS_EGIS_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_PASSWORD\", $HYDROVIS_EGIS_PASS, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_VERSION\", $FIM_VERSION, \"2\")\n[Environment]::SetEnvironmentVariable(\"IMAGE_SERVER\", \"image\", \"2\")\n[Environment]::SetEnvironmentVariable(\"PRIMARY_SERVER\", \"server\", \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_ENVIRONMENT\", $VIZ_ENVIRONMENT, \"2\")\n[Environment]::SetEnvironmentVariable(\"WRDS_HOST\", $WRDS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_USER\", $PIPELINE_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_MAX_FLOWS_DATA_BUCKET\", $NWM_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"RNR_MAX_FLOWS_DATA_BUCKET\", $RNR_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_DATA_BUCKET\", $NWM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_DATA_BUCKET\", $FIM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_OUTPUT_BUCKET\", $FIM_OUTPUT_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"LOGSTASH_SOCKET\", \"$LOGSTASH_IP`:5000\", \"2\")\n\nfunction GetRepo\n{\n   Param ([string]$branch, [string]$repo)\n\n   if (Test-Path -Path $repo) {\n       Remove-Item $repo -Recurse\n       Get-ChildItem $repo -Hidden -Recurse | Remove-Item -Force -Recurse\n   }\n   git clone -b $branch $VLAB_REPO_PREFIX/$repo\n\n   if ($LASTEXITCODE -gt 0) { throw \"Error occurred getting \" + $repo }\n}\n\nfunction Retry([Action]$action)\n{\n    $attempts=3\n    $sleepInSeconds=10\n    do\n    {\n        try\n        {\n            $action.Invoke();\n            $message = \"Successfully cloned \" + $repo\n            LogWrite $message\n            break;\n        }\n        catch [Exception]\n        {\n            LogWrite $_.Exception.Message\n        }\n        $attempts--\n        if ($attempts -gt 0) {\n            $message = \"Error: \" + $attempts + \" attempts left for getting \" + $repo\n            LogWrite $message\n            Start-Sleep $sleepInSeconds\n        } else {\n            $message = \"Error: Attempt limit reached while cloning \" + $repo\n            throw $message\n        }\n    } while ($attempts -gt 0)\n}\n\nLogWrite \"Setting up viz pipeline\"\n\nLogWrite \"Creating viz file structure\"\n$VIZ_DIR = \"C:\\Users\\$PIPELINE_USER\\NWC\\viz\"\nNew-Item -ItemType Directory -Force -Path $VIZ_DIR | Out-Null\n\nSet-Location -Path $VIZ_DIR\nLogWrite \"CLONING PIPELINE REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo master owp-viz-proc-pipeline})\n\nLogWrite \"CLONING VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\n$AWS_VIZ_ENVIRONMENT = \"aws-\" + $VIZ_ENVIRONMENT\nRetry({GetRepo $AWS_VIZ_ENVIRONMENT owp-viz-services})\n\nLogWrite \"CLONING AWS VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo $VIZ_ENVIRONMENT owp-viz-services-aws})\n\nLogWrite \"CREATING FRESH viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" create -y --name viz --clone arcgispro-py3\n\nLogWrite \"ACTIVATING viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\activate.bat\" viz\n\n$window_python_exe = \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\"\n$user_python_exe = \"C:\\Users\\$PIPELINE_USER\\AppData\\Local\\ESRI\\conda\\envs\\viz\\python.exe\"\nif (Test-Path -Path $window_python_exe -PathType Leaf) {\n    $python_exe = $window_python_exe\n} else {\n    $python_exe = $user_python_exe\n}\n\nLogWrite \"INSTALLING PROCESSING PIPELINE REPO\"\n$PIPELINE_REPO = $VIZ_DIR + \"\\owp-viz-proc-pipeline\"\nSet-Location -Path $PIPELINE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"INSTALLING SERVICE REPO\"\n$SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services\"\nSet-Location -Path $SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" install -y -n viz -c esri arcgis\n\nLogWrite \"INSTALLING AWS SERVICE REPO\"\n$AWS_SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services-aws\"\nSet-Location -Path $AWS_SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"--\u003eTRANFERRING AUTHORITATIVE DATA\"\n$s3_authoritative = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"authoritative_data/\"\naws s3 cp $s3_authoritative $AUTHORITATIVE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRISTINE DATA\"\n$s3_pristine = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pristine_data/\"\naws s3 cp $s3_pristine $PRISTINE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRO PROJECT DATA\"\n$s3_pro_projects = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pro_project_data/\"\naws s3 cp $s3_pro_projects $PRO_PROJECT_ROOT --recursive\n\nLogWrite \"CREATING CONNECTION FILES FOR $FIM_DATA_BUCKET\"\nSet-Location -Path $VIZ_DIR\n$env:AUTHORITATIVE_ROOT = $AUTHORITATIVE_ROOT\n$env:FIM_OUTPUT_BUCKET = $FIM_OUTPUT_BUCKET\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_s3_connection_files.py\n\nSet-Location HKCU:\\Software\\ESRI\\ArcGISPro\nRemove-Item -Recurse -Force -Confirm:$false Licensing\n\nLogWrite \"UPDATING PYTHON PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n\nLogWrite \"UPDATING WORKSPACE PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"D:\\\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"D:\\\"\n\nLogWrite \"ADDING $PUBLISHED_ROOT TO $EGIS_HOST\"\nSet-Location -Path $VIZ_DIR\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\update_data_stores.py $EGIS_HOST $PUBLISHED_ROOT $HYDROVIS_EGIS_USER $HYDROVIS_EGIS_PASS\n\nLogWrite \"DELETING PUBLISHED FLAGS IF THEY EXIST\"\n$EXISTING_PUBLISHED_FLAGS = aws s3 ls $FLAGS_ROOT\nif ($EXISTING_PUBLISHED_FLAGS) {\n    LogWrite \"DELETING PUBLISHED FLAGS\"\n    aws s3 rm $FLAGS_ROOT --recursive\n}\n\nLogWrite \"GETTING NSSM\"\nNew-Item -ItemType Directory -Force -Path 'C:\\Programs' | Out-Null\nSet-Location -Path 'C:\\Programs'\nInvoke-WebRequest https://nssm.cc/release/nssm-2.24.zip -OutFile nssm-2.24.zip\nExpand-Archive -LiteralPath 'nssm-2.24.zip' -DestinationPath nssm-2.24\nCopy-Item .\\nssm-2.24\\nssm-2.24\\win64\\nssm.exe 'C:\\Programs\\nssm.exe'\nRemove-Item nssm-2.24.zip\nRemove-Item nssm-2.24 -Force -Recurse\n$PATH = [Environment]::GetEnvironmentVariable(\"PATH\")\n$PATH += \";C:\\Programs\"\n[Environment]::SetEnvironmentVariable(\"PATH\", $PATH, \"2\")\n\nLogWrite \"SETTING UP WINDOWS SERVICES\"\nSet-Location -Path $VIZ_DIR\n\u0026 .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_windows_services.ps1 $WINDOWS_SERVICE_STARTUP $WINDOWS_SERVICE_STATUS $PIPELINE_USER $PIPELINE_USER_ACCOUNT_PASSWORD\n\nLogWrite \"DONE SETTING UP PIPELINE\"\n\u003c/powershell\u003e\n\u003cpersist\u003efalse\u003c/persist\u003e\n",
            "template": "\u003cpowershell\u003e\n$Fileshare = '${Fileshare_IP}'\n$EGIS_HOST = '${EGIS_HOST}'\n$VIZ_ENVIRONMENT = '${VIZ_ENVIRONMENT}'\n$FIM_VERSION = '${FIM_VERSION}'\n$SSH_KEY_CONTENT = '${SSH_KEY_CONTENT}'\n$LICENSE_REG_CONTENT = '${LICENSE_REG_CONTENT}'\n$WRDS_HOST = '${WRDS_HOST}'\n$S3_STATIC_DATA_BUCKET = '${S3_STATIC_DATA_BUCKET}'\n$DEPLOY_FILES_PREFIX = '${DEPLOY_FILES_PREFIX}'\n$NWM_DATA_BUCKET = '${NWM_DATA_BUCKET}'\n$FIM_DATA_BUCKET = '${FIM_DATA_BUCKET}'\n$FIM_OUTPUT_BUCKET = '${FIM_OUTPUT_BUCKET}'\n$NWM_MAX_FLOWS_DATA_BUCKET = '${NWM_MAX_FLOWS_DATA_BUCKET}'\n$RNR_MAX_FLOWS_DATA_BUCKET = '${RNR_MAX_FLOWS_DATA_BUCKET}'\n$WINDOWS_SERVICE_STATUS = '${WINDOWS_SERVICE_STATUS}'\n$WINDOWS_SERVICE_STARTUP = '${WINDOWS_SERVICE_STARTUP}'\n$PIPELINE_USER = '${PIPELINE_USER}'\n$PIPELINE_USER_ACCOUNT_PASSWORD = '${PIPELINE_USER_ACCOUNT_PASSWORD}'\n\n$HYDROVIS_EGIS_USER = \"hydrovis.proc\"\n$HYDROVIS_EGIS_PASS = '${HYDROVIS_EGIS_PASS}'\n\n$LOGSTASH_IP = '${LOGSTASH_IP}'\n$VLAB_REPO_PREFIX   = '${VLAB_REPO_PREFIX}'\n$VLAB_HOST   = '${VLAB_HOST}'\n\nWrite-Host \"Setting up $PIPELINE_USER profile\"\nAdd-LocalGroupMember -Group \"Administrators\" -Member $PIPELINE_USER\n# This command will fail but that is on purpose. It will initialize the profile which is what we want\n$securePassword = ConvertTo-SecureString $PIPELINE_USER_ACCOUNT_PASSWORD -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential $PIPELINE_USER, $securePassword\nStart-Process program.exe -Credential $credential\n\n$Logfile = \"C:\\Users\\$PIPELINE_USER\\Desktop\\pipeline_setup.log\"\n\nfunction LogWrite\n{\nParam ([string]$logstring)\nWrite-Host $logstring\n$currentdate = Get-Date -Format \"MM/dd/yyyy HH:mm K\"\n$logstring =  $currentdate + \": \" +  $logstring\nAdd-content $Logfile -value $logstring\n}\n\nfunction CreateUTF8File\n{\n  Param ([string]$file_content, [string]$file_dir, [string]$file_name)\n\n  Set-Location -Path $file_dir\n  $file_path = $file_dir + \"\\\" + $file_name\n  $file_content | Out-File -Encoding ascii -FilePath $file_path\n  Get-ChildItem $file_name | ForEach-Object {\n    # get the contents and replace line breaks by U+000A\n    $contents = [IO.File]::ReadAllText($_) -replace \"`r`n?\", \"`n\"\n    # create UTF-8 encoding without signature\n    $utf8 = New-Object System.Text.UTF8Encoding $false\n    # write the text back\n    [IO.File]::WriteAllText($_, $contents, $utf8)\n  }\n}\n\nLogWrite \"Setting up file variables\"\n$StaticDir = \"D:\\static\"\n$DynamicDir = \"D:\\dynamic\"\n\n$AUTHORITATIVE_ROOT = \"$StaticDir\\authoritative\"\n$CACHE_ROOT = \"$DynamicDir\\cache\"\n$FLAGS_ROOT = \"s3://$FIM_OUTPUT_BUCKET/published_flags\"\n$PRISTINE_ROOT = \"$StaticDir\\pristine\"\n$PRO_PROJECT_ROOT = \"$StaticDir\\pro_project\"\n$PUBLISHED_ROOT = \"$Fileshare\\viz\\published\"\n$WORKSPACE_ROOT = \"$DynamicDir\\authoritative\"\n$PIPELINE_WORKSPACE = \"D:\\pipeline_workspace\"\n\nLogWrite \"Setting up D drive\"\nInitialize-Disk -Number 1 -PartitionStyle MBR\nNew-Partition -DiskNumber 1 -UseMaximumSize -IsActive -DriveLetter D\nFormat-Volume -DriveLetter D -FileSystem NTFS -Confirm:$False\n\nLogWrite \"ADDING SSH Files\"\n$HV_SSH_DIR = \"C:\\Users\\$PIPELINE_USER\\.ssh\"\n$UD_SSH_DIR = \"$HOME\\.ssh\"\n\nLogWrite \"Opening Firewall for ArcgisPro License Connection\"\nNew-NetFirewallRule -DisplayName \"ArcGISPro License Manager Connection\" -Direction \"Outbound\" -Program \"$env:ProgramFiles\\ArcGIS\\Pro\\bin\\ArcGISPro.exe\" -Action \"Allow\"\n\nLogWrite \"ADDING ArcGIS Pro License Registry\"\n$HV_LICENSE = \"C:\\Users\\$PIPELINE_USER\\Documents\\licensed_pro.reg\"\n$LICENSE_REG_CONTENT | Out-File  $HV_LICENSE\n\n$UD_LICENSE_REG_CONTENT = $LICENSE_REG_CONTENT.Replace(\"[HKEY_USERS\\$PIPELINE_USER\\\", \"[HKEY_CURRENT_USER\\\")\n$UD_LICENSE = \"$env:TEMP\\ud_pro_license.reg\"\n$UD_LICENSE_REG_CONTENT | Out-File $UD_LICENSE\n\nGet-Command reg\nreg load \"HKU\\$PIPELINE_USER\" \"C:\\Users\\$PIPELINE_USER\\ntuser.dat\"\nreg import $HV_LICENSE\nreg import $UD_LICENSE\n[gc]::Collect()\nreg unload \"HKU\\$PIPELINE_USER\"\n\nNew-Item -ItemType Directory -Force -Path $HV_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $HV_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e C:\\Users\\$PIPELINE_USER\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\hv_keyscan.bat\"\n\nNew-Item -ItemType Directory -Force -Path $UD_SSH_DIR | Out-Null\nCreateUTF8File $SSH_KEY_CONTENT $UD_SSH_DIR id_rsa\n\"call ssh-keyscan -p 29418 -H $VLAB_HOST \u003e\u003e $HOME\\.ssh\\known_hosts\" | Out-File -Encoding ascii -FilePath \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\u0026 \"C:\\Users\\$PIPELINE_USER\\Desktop\\ud_keyscan.bat\"\n\nLogWrite \"Setting up file structure of static and dynamic data\"\nNew-Item -ItemType Directory -Force -Path $AUTHORITATIVE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"AUTHORITATIVE_ROOT\", $AUTHORITATIVE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $CACHE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"CACHE_ROOT\", $CACHE_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"FLAGS_ROOT\", $FLAGS_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRISTINE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRISTINE_ROOT\", $PRISTINE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PRO_PROJECT_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"PRO_PROJECT_ROOT\", $PRO_PROJECT_ROOT, \"2\")\n\n[Environment]::SetEnvironmentVariable(\"PUBLISHED_ROOT\", $PUBLISHED_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $WORKSPACE_ROOT | Out-Null\n[Environment]::SetEnvironmentVariable(\"WORKSPACE_ROOT\", $WORKSPACE_ROOT, \"2\")\n\nNew-Item -ItemType Directory -Force -Path $PIPELINE_WORKSPACE | Out-Null\n[Environment]::SetEnvironmentVariable(\"PIPELINE_WORKSPACE\", $PIPELINE_WORKSPACE, \"2\")\n\nLogWrite \"Setting up environment variables\"\n[Environment]::SetEnvironmentVariable(\"CACHE_DAYS\", \"3\", \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_HOST\", $EGIS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_USERNAME\", $HYDROVIS_EGIS_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"EGIS_PASSWORD\", $HYDROVIS_EGIS_PASS, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_VERSION\", $FIM_VERSION, \"2\")\n[Environment]::SetEnvironmentVariable(\"IMAGE_SERVER\", \"image\", \"2\")\n[Environment]::SetEnvironmentVariable(\"PRIMARY_SERVER\", \"server\", \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_ENVIRONMENT\", $VIZ_ENVIRONMENT, \"2\")\n[Environment]::SetEnvironmentVariable(\"WRDS_HOST\", $WRDS_HOST, \"2\")\n[Environment]::SetEnvironmentVariable(\"VIZ_USER\", $PIPELINE_USER, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_MAX_FLOWS_DATA_BUCKET\", $NWM_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"RNR_MAX_FLOWS_DATA_BUCKET\", $RNR_MAX_FLOWS_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"NWM_DATA_BUCKET\", $NWM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_DATA_BUCKET\", $FIM_DATA_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"FIM_OUTPUT_BUCKET\", $FIM_OUTPUT_BUCKET, \"2\")\n[Environment]::SetEnvironmentVariable(\"LOGSTASH_SOCKET\", \"$LOGSTASH_IP`:5000\", \"2\")\n\nfunction GetRepo\n{\n   Param ([string]$branch, [string]$repo)\n\n   if (Test-Path -Path $repo) {\n       Remove-Item $repo -Recurse\n       Get-ChildItem $repo -Hidden -Recurse | Remove-Item -Force -Recurse\n   }\n   git clone -b $branch $VLAB_REPO_PREFIX/$repo\n\n   if ($LASTEXITCODE -gt 0) { throw \"Error occurred getting \" + $repo }\n}\n\nfunction Retry([Action]$action)\n{\n    $attempts=3\n    $sleepInSeconds=10\n    do\n    {\n        try\n        {\n            $action.Invoke();\n            $message = \"Successfully cloned \" + $repo\n            LogWrite $message\n            break;\n        }\n        catch [Exception]\n        {\n            LogWrite $_.Exception.Message\n        }\n        $attempts--\n        if ($attempts -gt 0) {\n            $message = \"Error: \" + $attempts + \" attempts left for getting \" + $repo\n            LogWrite $message\n            Start-Sleep $sleepInSeconds\n        } else {\n            $message = \"Error: Attempt limit reached while cloning \" + $repo\n            throw $message\n        }\n    } while ($attempts -gt 0)\n}\n\nLogWrite \"Setting up viz pipeline\"\n\nLogWrite \"Creating viz file structure\"\n$VIZ_DIR = \"C:\\Users\\$PIPELINE_USER\\NWC\\viz\"\nNew-Item -ItemType Directory -Force -Path $VIZ_DIR | Out-Null\n\nSet-Location -Path $VIZ_DIR\nLogWrite \"CLONING PIPELINE REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo master owp-viz-proc-pipeline})\n\nLogWrite \"CLONING VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\n$AWS_VIZ_ENVIRONMENT = \"aws-\" + $VIZ_ENVIRONMENT\nRetry({GetRepo $AWS_VIZ_ENVIRONMENT owp-viz-services})\n\nLogWrite \"CLONING AWS VIZ SERVICES REPOSITORY INTO viz DIRECTORY\"\nRetry({GetRepo $VIZ_ENVIRONMENT owp-viz-services-aws})\n\nLogWrite \"CREATING FRESH viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" create -y --name viz --clone arcgispro-py3\n\nLogWrite \"ACTIVATING viz VIRTUAL ENVIRONMENT\"\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\activate.bat\" viz\n\n$window_python_exe = \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\"\n$user_python_exe = \"C:\\Users\\$PIPELINE_USER\\AppData\\Local\\ESRI\\conda\\envs\\viz\\python.exe\"\nif (Test-Path -Path $window_python_exe -PathType Leaf) {\n    $python_exe = $window_python_exe\n} else {\n    $python_exe = $user_python_exe\n}\n\nLogWrite \"INSTALLING PROCESSING PIPELINE REPO\"\n$PIPELINE_REPO = $VIZ_DIR + \"\\owp-viz-proc-pipeline\"\nSet-Location -Path $PIPELINE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"INSTALLING SERVICE REPO\"\n$SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services\"\nSet-Location -Path $SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\Scripts\\conda.exe\" install -y -n viz -c esri arcgis\n\nLogWrite \"INSTALLING AWS SERVICE REPO\"\n$AWS_SERVICE_REPO = $VIZ_DIR + \"\\owp-viz-services-aws\"\nSet-Location -Path $AWS_SERVICE_REPO\n\u0026 $python_exe setup.py develop\n\nLogWrite \"--\u003eTRANFERRING AUTHORITATIVE DATA\"\n$s3_authoritative = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"authoritative_data/\"\naws s3 cp $s3_authoritative $AUTHORITATIVE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRISTINE DATA\"\n$s3_pristine = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pristine_data/\"\naws s3 cp $s3_pristine $PRISTINE_ROOT --recursive\n\nLogWrite \"--\u003eTRANFERRING PRO PROJECT DATA\"\n$s3_pro_projects = \"s3://\" + $S3_STATIC_DATA_BUCKET + \"/\" + $DEPLOY_FILES_PREFIX + \"pro_project_data/\"\naws s3 cp $s3_pro_projects $PRO_PROJECT_ROOT --recursive\n\nLogWrite \"CREATING CONNECTION FILES FOR $FIM_DATA_BUCKET\"\nSet-Location -Path $VIZ_DIR\n$env:AUTHORITATIVE_ROOT = $AUTHORITATIVE_ROOT\n$env:FIM_OUTPUT_BUCKET = $FIM_OUTPUT_BUCKET\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_s3_connection_files.py\n\nSet-Location HKCU:\\Software\\ESRI\\ArcGISPro\nRemove-Item -Recurse -Force -Confirm:$false Licensing\n\nLogWrite \"UPDATING PYTHON PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\"\n\nLogWrite \"UPDATING WORKSPACE PERMISSIONS FOR $PIPELINE_USER\"\n$ACL = Get-ACL -Path \"D:\\\"\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"everyone\",\"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\")\n$ACL.SetAccessRule($AccessRule)\n$ACL | Set-Acl -Path \"D:\\\"\n\nLogWrite \"ADDING $PUBLISHED_ROOT TO $EGIS_HOST\"\nSet-Location -Path $VIZ_DIR\n\u0026 \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\viz\\python.exe\" .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\update_data_stores.py $EGIS_HOST $PUBLISHED_ROOT $HYDROVIS_EGIS_USER $HYDROVIS_EGIS_PASS\n\nLogWrite \"DELETING PUBLISHED FLAGS IF THEY EXIST\"\n$EXISTING_PUBLISHED_FLAGS = aws s3 ls $FLAGS_ROOT\nif ($EXISTING_PUBLISHED_FLAGS) {\n    LogWrite \"DELETING PUBLISHED FLAGS\"\n    aws s3 rm $FLAGS_ROOT --recursive\n}\n\nLogWrite \"GETTING NSSM\"\nNew-Item -ItemType Directory -Force -Path 'C:\\Programs' | Out-Null\nSet-Location -Path 'C:\\Programs'\nInvoke-WebRequest https://nssm.cc/release/nssm-2.24.zip -OutFile nssm-2.24.zip\nExpand-Archive -LiteralPath 'nssm-2.24.zip' -DestinationPath nssm-2.24\nCopy-Item .\\nssm-2.24\\nssm-2.24\\win64\\nssm.exe 'C:\\Programs\\nssm.exe'\nRemove-Item nssm-2.24.zip\nRemove-Item nssm-2.24 -Force -Recurse\n$PATH = [Environment]::GetEnvironmentVariable(\"PATH\")\n$PATH += \";C:\\Programs\"\n[Environment]::SetEnvironmentVariable(\"PATH\", $PATH, \"2\")\n\nLogWrite \"SETTING UP WINDOWS SERVICES\"\nSet-Location -Path $VIZ_DIR\n\u0026 .\\owp-viz-services-aws\\aws_loosa\\ec2\\deploy\\create_windows_services.ps1 $WINDOWS_SERVICE_STARTUP $WINDOWS_SERVICE_STATUS $PIPELINE_USER $PIPELINE_USER_ACCOUNT_PASSWORD\n\nLogWrite \"DONE SETTING UP PIPELINE\"\n\u003c/powershell\u003e\n\u003cpersist\u003efalse\u003c/persist\u003e\n",
            "vars": {
              "DEPLOY_FILES_PREFIX": "viz/",
              "EGIS_HOST": "maps-staging.water.noaa.gov",
              "FIM_DATA_BUCKET": "hydrovis-uat-deployment-us-east-1",
              "FIM_OUTPUT_BUCKET": "hydrovis-uat-fim-us-east-1",
              "FIM_VERSION": "3.0.23.3",
              "Fileshare_IP": "\\\\10.27.2.29",
              "HYDROVIS_EGIS_PASS": "WaterIsFun1@",
              "LICENSE_REG_CONTENT": "Windows Registry Editor Version 5.00\n\n[HKEY_USERS\\arcgis\\Software\\ESRI\\ArcGISPro\\Licensing]\n\"ARCPROWORKOFFLINE\"=\"FALSE\"\n\"DESKTOP_CONFIG\"=\"TRUE\"\n\"FlexNetService\"=\"False\"\n\"LICENSE_FILE_PATH\"=\"\"\n\"RENEWAL_CHECK\"=\"\"\n\"SEAT_PREFERENCE\"=\"Float\"\n\"SingleUse_Installed\"=\"Professional\"\n\"SOFTWARE_CLASS\"=\"Professional\"\n\"SOFTWARE_TYPE\"=\"CLASSIC\"\n\"TIMEOUTWARNING\"=\"TRUE\"\n\"LICENSE_SERVER_PRO_ON_PREMISE\"=\"none\"\n\"ARCPRO_AUTH_TYPE\"=\"\"\n\"LICENSE_SERVER\"=\"@10.27.2.156\"\n\"SOFTWARE_CLASS_FN\"=\"Professional\"\n\n[HKEY_USERS\\arcgis\\\\Software\\ESRI\\ArcGISPro\\Licensing\\Extensions]\n\"Spatial Analyst Pro\"=dword:00000001\n",
              "LOGSTASH_IP": "10.27.2.20",
              "NWM_DATA_BUCKET": "hydrovis-uat-nwm-us-east-1",
              "NWM_MAX_FLOWS_DATA_BUCKET": "hydrovis-uat-fim-us-east-1",
              "PIPELINE_USER": "arcgis",
              "PIPELINE_USER_ACCOUNT_PASSWORD": "hardwork123donehere!",
              "RNR_MAX_FLOWS_DATA_BUCKET": "hydrovis-uat-rnr-us-east-1",
              "S3_STATIC_DATA_BUCKET": "hydrovis-uat-deployment-us-east-1",
              "SSH_KEY_CONTENT": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAYEA4BR4+o+atEvTxc2k0n+4lhN4jpJSDRg9sUNseJm6fpXUX72ml7M+\nTDCiicpjU4ja7fX/tMY5do3X/ggy9wHFYjYbzAlRD0//gzKkr7Azo9Sl+4rArENNFaoEmT\nge/ZW5q9g9NukOKESZXQETbVWIFFDlVTO9dUj8w23OhE4NMio/zre4EOPgeuC4I+sqfPSp\nkEY14Udq6xh9YNkq9ouT6BeEvl2R1O0asS4WwZNpYLLErxwK7nNyqXZiXlglE89lArovEI\n43+MVphc2SeEdU1Sela9ShsK6ZWqmE9V1HgdSKIQUYRNurnNSyM5mMAM5ByiEkN27Xsczv\npdgGqXkNub3o3cloriiP70nGIefj+XH6sx/pBFOum+zzbPrrb5b0iYUz0c9KgWxypmeesW\nVFnw1Gs+K6wOlkqz1ejDjNNQiBLzkiZtaz4gcLeoBp0lsFJG5IXCvtoHlEC/oiXPoqpcxy\nThDBedX5mikJJvdK/9tOewdaQmm5ZAiWxTEoCnknAAAFmKQ3sJKkN7CSAAAAB3NzaC1yc2\nEAAAGBAOAUePqPmrRL08XNpNJ/uJYTeI6SUg0YPbFDbHiZun6V1F+9ppezPkwwoonKY1OI\n2u31/7TGOXaN1/4IMvcBxWI2G8wJUQ9P/4MypK+wM6PUpfuKwKxDTRWqBJk4Hv2VuavYPT\nbpDihEmV0BE21ViBRQ5VUzvXVI/MNtzoRODTIqP863uBDj4HrguCPrKnz0qZBGNeFHausY\nfWDZKvaLk+gXhL5dkdTtGrEuFsGTaWCyxK8cCu5zcql2Yl5YJRPPZQK6LxCON/jFaYXNkn\nhHVNUnpWvUobCumVqphPVdR4HUiiEFGETbq5zUsjOZjADOQcohJDdu17HM76XYBql5Dbm9\n6N3JaK4oj+9JxiHn4/lx+rMf6QRTrpvs82z662+W9ImFM9HPSoFscqZnnrFlRZ8NRrPius\nDpZKs9Xow4zTUIgS85ImbWs+IHC3qAadJbBSRuSFwr7aB5RAv6Ilz6KqXMck4QwXnV+Zop\nCSb3Sv/bTnsHWkJpuWQIlsUxKAp5JwAAAAMBAAEAAAGAON+5XQ852u0sERaC8RKNzTmf7b\n/hp4Uxk15jl7CdDygEQVCnifVqqHfnqUV/NGKV/rPjdQSi7R5PZiC6nssKSEUnhQAQXOyX\nE7u05Qq58Kk2f8PV52Mlm4wNor4Fz6NC/wThdKBugXX33w042xVMdquZqah6O9yMmyWxtw\n8Adm0WyOcEhvTvswB6fFNh81k9+Gp5nnY8AvOyTvSP3QfMQKpHfPHO49ZSYgoqqHM72dlF\n5pQdiiwvPCfaC8wfjQmkRhkPu5D6IO2aY/zuFX+2sJ0Ha2aQLc/wEyDinu5SlPReh7sD2Z\nxpbidqMhVyRIZZ+oIsAbuCR0rhxHP0a/vTBX6PGHMhi7VxUXtRjudbkL+SSLNe6eOofBv+\nny+Z6IHgh/pv7zYSxWw+2KpK8Bx6FPzEgae+VFW2D9MUSOhdWXLZHtsPK7TMukCpsuuaO9\nAtRlMRvsWMLi5ObVqGstozkjH+7/W1ZRHoxD9p/gCVvY7vWpJmDOlQNGSJkWYts2JRAAAA\nwQCXnexIjVhU/+wCDwQmkzPIdVRHbSwiXINMUo8BJwpYE8ac9T81fqEcGf9Kdsj8Y9IRdh\nD5WydNVaryiGNAmyQV3DdPVMPNw9SfD5yArx8ZXlq4cbqBiQJaL89FfrnPIDmT8D4zF/eX\nS8PbFg9EKKqFwHNpT+pKVxJJdeqSWJBX4ZfhYfy5n7vYLjd1XAOm924o2V2v6SgOhS6qZE\ntAJvM1E3xQjHdFCNRmFTFtw/mbaPo3mIi4tUPWaS5cL0avVd8AAADBAPFkdwLug7OLuTaB\n0Pzwm+HshxF978yS08PJAUeKn9k3+SOCGbWW1AGnnTpJjzPaZAu209Qkge7aVVLA/kawEb\ntJr5jWq1VqSQE+LRShUZv9NxTwUA4aXO/37hLW02Q0ImHTWfK4ZHK93vPz5CjhrFjM5mwc\nztCopRypxg1Frx8lMC+iWfz8EoS5odCusmNOa6abNX1PDxIvxBrAgfhyiPnRpWJ3rcE8sq\nnpv/V4ulwhT9lDt9ZlFji73Qkr7GXB1QAAAMEA7aPPrs871BS7ZZ9C/7KBqeK/a3PpcZqW\nqepObo4FtCO7EMGjiFbdC6pKelF9hj2brQ2Iv4QEZZK0rsnyAnBaMTebsHXdKRxjM+gnWI\nzd5frrcYdrcvfATL8FXV6XKmKW57fipjUQS7Qk37ZfyWCRV2IOvJyFtz9Dw/5e97jBChiW\noMhmfU7CAZYd25oMRftgasQk6Qf6Wsi8fg+sEWi4uFwsCD6Xwbht52kU99V+G4tBjlCZSn\nJSQI64GqSgnBELAAAAIW53Y1xjb3JleS5rcmV3c29uQE5XQ0FMLUwtNDMzOTMzMwE=\n-----END OPENSSH PRIVATE KEY-----\n",
              "VIZ_ENVIRONMENT": "staging",
              "VLAB_HOST": "vlab.noaa.gov",
              "VLAB_REPO_PREFIX": "ssh://corey.krewson@vlab.noaa.gov:29418",
              "WINDOWS_SERVICE_STARTUP": "SERVICE_AUTO_START",
              "WINDOWS_SERVICE_STATUS": "start",
              "WRDS_HOST": "10.27.2.90"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PIPELINE_USER",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "PIPELINE_USER_ACCOUNT_PASSWORD",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "managed",
      "type": "aws_instance",
      "name": "viz_fileshare",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-04a55960d35c82ecc",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-04ca62e9537e9538a",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "xvdf",
                "encrypted": true,
                "iops": 3000,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "snapshot_id": "",
                "tags": {
                  "Name": "hv-uat-viz-fs-drive",
                  "TaskOrderId": "1305L420QNWWJ0057",
                  "VPC": "uat",
                  "hydrovis-env": "uat",
                  "noaa:fismaid": "noaa8501",
                  "noaa:lineoffice": "nws",
                  "noaa:programoffice": "owp",
                  "noaa:project": "hydrovis",
                  "noaa:projectid": "799732994462"
                },
                "throughput": 0,
                "volume_id": "vol-02431ae1df8dd5d96",
                "volume_size": 1000,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisESRISSMDeploy",
            "id": "i-04ca62e9537e9538a",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "m5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "hv-uat-ec2-key-pair",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-06403dfb8a416b637",
            "private_dns": "ip-10-27-2-29.ec2.internal",
            "private_ip": "10.27.2.29",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 450,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-06d53cb8f05db09fd",
                "volume_size": 150,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-099d60b8910d25894",
            "tags": {
              "Name": "hv-uat-viz-fileshare",
              "OS": "Windows"
            },
            "tags_all": {
              "Name": "hv-uat-viz-fileshare",
              "OS": "Windows",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "7e49052bc0b2fd70061fe4dd52e9df41635a1548",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-013db899dbaeea4ce",
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.viz_ec2.data.aws_ami.windows",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.viz_ec2.data.template_file.fileshare_setup",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.security-groups.aws_security_group.egis-overlord",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.vpc.aws_vpc.main",
            "module.viz_ec2.data.template_cloudinit_config.fileshare_setup",
            "module.iam-roles.aws_iam_instance_profile.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret.hydrovis",
            "module.secrets-manager.module.secret.aws_secretsmanager_secret_version.hydrovis",
            "module.secrets-manager.module.secret.random_password.password"
          ]
        }
      ]
    },
    {
      "module": "module.viz_ec2",
      "mode": "managed",
      "type": "aws_instance",
      "name": "viz_pipeline",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0b266e75d54048c9f",
            "arn": "arn:aws:ec2:us-east-1:799732994462:instance/i-037974f6f5d9cfebd",
            "associate_public_ip_address": false,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 2,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "xvdf",
                "encrypted": true,
                "iops": 3000,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "snapshot_id": "",
                "tags": {
                  "Name": "hv-uat-viz-prc-drive"
                },
                "throughput": 0,
                "volume_id": "vol-053a4062453899b02",
                "volume_size": 1000,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "HydrovisESRISSMDeploy",
            "id": "i-037974f6f5d9cfebd",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "m5.xlarge",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "hv-uat-ec2-key-pair",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-02227d05acfadeda2",
            "private_dns": "ip-10-27-2-27.ec2.internal",
            "private_ip": "10.27.2.27",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": true,
                "iops": 450,
                "kms_key_id": "arn:aws:kms:us-east-1:799732994462:key/aa5b0ac1-8373-4333-a1a3-5956a9a80f2d",
                "tags": null,
                "throughput": 0,
                "volume_id": "vol-06e8248c13e7bdd3b",
                "volume_size": 150,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "subnet_id": "subnet-099d60b8910d25894",
            "tags": {
              "Name": "hv-uat-viz-prc-1",
              "OS": "Windows"
            },
            "tags_all": {
              "Name": "hv-uat-viz-prc-1",
              "OS": "Windows",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "f77bba8d47360d2fcf523b8f94b12e8ff87a4009",
            "user_data_base64": null,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-013db899dbaeea4ce",
              "sg-01a5ed608003e9f20"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_instance_profile.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_service_linked_role.autoscaling",
            "module.kms.module.key.aws_kms_alias.hydrovis",
            "module.kms.module.key.aws_kms_key.hydrovis",
            "module.security-groups.aws_security_group.egis-overlord",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.viz_ec2.data.aws_ami.windows",
            "module.viz_ec2.data.template_cloudinit_config.pipeline_setup",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "799732994462",
            "arn": "arn:aws:iam::799732994462:user/nick.chadwick@noaa.gov",
            "id": "799732994462",
            "user_id": "AIDA3UM6NCGPNWOLCYKWO"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "viz_huc_inundation_processing",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_huc_inundation_processing_uat",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Lambda function to calcuate FIM depths for each HUC",
            "environment": [
              {
                "variables": {
                  "EMPTY_RASTER_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "EMPTY_RASTER_MRF_PREFIX": "empty_rasters/mrf",
                  "FR_FIM_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "FR_FIM_PREFIX": "fim_3_0_23_3_fr_c",
                  "MS_FIM_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "MS_FIM_PREFIX": "fim_3_0_23_3_ms_c",
                  "PROCESSED_OUTPUT_BUCKET": "hydrovis-uat-fim-us-east-1",
                  "PROCESSED_OUTPUT_PREFIX": "processing_outputs",
                  "viz_optimize_raster_function": "arn:aws:lambda:us-east-1:799732994462:function:viz_optimize_rasters_uat"
                }
              }
            ],
            "file_system_config": [],
            "filename": null,
            "function_name": "viz_huc_inundation_processing_uat",
            "handler": "lambda_function.lambda_handler",
            "id": "viz_huc_inundation_processing_uat",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:viz_huc_inundation_processing_uat/invocations",
            "kms_key_arn": "",
            "last_modified": "2021-12-15T18:37:48.000+0000",
            "layers": [
              "arn:aws:lambda:us-east-1:799732994462:layer:rasterio_uat:7",
              "arn:aws:lambda:us-east-1:799732994462:layer:pandas_uat:4",
              "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
              "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5"
            ],
            "memory_size": 3072,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_huc_inundation_processing_uat:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda",
            "runtime": "python3.6",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "viz/lambda_functions/viz_huc_inundation_processing.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "uEfoq3hNj0T6z0xsybFzvliGK1GOvRDwRTHOE1o7UrA=",
            "source_code_size": 8468,
            "tags": {
              "Name": "viz_huc_inundation_processing_uat"
            },
            "tags_all": {
              "Name": "viz_huc_inundation_processing_uat",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 900,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "viz_inundation_parent",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Lambda function to process NWM data and kick off HUC inundation lambdas for each HUC with streams above bankfull threshold",
            "environment": [
              {
                "variables": {
                  "EMPTY_RASTER_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "EMPTY_RASTER_MRF_PREFIX": "empty_rasters/mrf",
                  "FIM_DATA_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "FIM_VERSION": "3.0.23.3",
                  "NWM_DATA_BUCKET": "hydrovis-uat-nwm-us-east-1",
                  "PROCESSED_OUTPUT_BUCKET": "hydrovis-uat-fim-us-east-1",
                  "PROCESSED_OUTPUT_PREFIX": "processing_outputs",
                  "RECURRENCE_BANKFULL": "1_5_year_recurrence_flow",
                  "RECURRENCE_FILENAME": "viz/authoritative_data/derived_data/nwm_v21_recurrence_flows/nwm_v20_recurrence_flows_slim.nc",
                  "RECURRENCE_HAWAII_BANKFULL": "2_0_year_recurrence_flow",
                  "RECURRENCE_HAWAII_FILENAME": "viz/authoritative_data/derived_data/nwm_v21_recurrence_flows/nwm_v20_recurrence_flows_hawaii.nc",
                  "RECURRENCE_PRVI_BANKFULL": "2_0_year_recurrence_flow",
                  "RECURRENCE_PRVI_FILENAME": "viz/authoritative_data/derived_data/nwm_v21_recurrence_flows/nwm_v21_recurrence_flows_prvi.nc",
                  "VIZ_AUTHORITATIVE_BUCKET": "hydrovis-uat-deployment-us-east-1",
                  "max_flows_function": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
                  "viz_huc_inundation_function": "arn:aws:lambda:us-east-1:799732994462:function:viz_huc_inundation_processing_uat"
                }
              }
            ],
            "file_system_config": [],
            "filename": null,
            "function_name": "viz_inundation_parent_uat",
            "handler": "lambda_function.lambda_handler",
            "id": "viz_inundation_parent_uat",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat/invocations",
            "kms_key_arn": "",
            "last_modified": "2022-01-21T15:27:23.000+0000",
            "layers": [
              "arn:aws:lambda:us-east-1:799732994462:layer:multiprocessing_uat:4",
              "arn:aws:lambda:us-east-1:799732994462:layer:xarray_uat:4",
              "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
              "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5"
            ],
            "memory_size": 1024,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda",
            "runtime": "python3.7",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "viz/lambda_functions/viz_inundation_parent.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "B3jRDbEOSdGzm3w2ITY6pq/qsq2MVF1y04Nz1PYYKnc=",
            "source_code_size": 4373,
            "tags": {
              "Name": "viz_inundation_parent_uat"
            },
            "tags_all": {
              "Name": "viz_inundation_parent_uat",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 900,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "viz_max_flows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Lambda function to create max streamflow files for NWM data",
            "environment": [
              {
                "variables": {
                  "CACHE_DAYS": "1",
                  "MAX_FLOWS_BUCKET": "hydrovis-uat-fim-us-east-1"
                }
              }
            ],
            "file_system_config": [],
            "filename": null,
            "function_name": "viz_max_flows_uat",
            "handler": "lambda_function.lambda_handler",
            "id": "viz_max_flows_uat",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat/invocations",
            "kms_key_arn": "",
            "last_modified": "2021-12-20T21:40:41.980+0000",
            "layers": [
              "arn:aws:lambda:us-east-1:799732994462:layer:xarray_uat:4",
              "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
              "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5"
            ],
            "memory_size": 512,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda",
            "runtime": "python3.7",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "viz/lambda_functions/viz_max_flows.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "s2hPyCkyetFmOykECzAKgpJT8cHR/YLNma6+Dlq7jjM=",
            "source_code_size": 3084,
            "tags": {
              "Name": "viz_max_flows_uat"
            },
            "tags_all": {
              "Name": "viz_max_flows_uat",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 900,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "viz_optimize_rasters",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_optimize_rasters_uat",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Lambda function to optimize tifs to mrfs",
            "environment": [],
            "file_system_config": [],
            "filename": null,
            "function_name": "viz_optimize_rasters_uat",
            "handler": "lambda_function.lambda_handler",
            "id": "viz_optimize_rasters_uat",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:799732994462:function:viz_optimize_rasters_uat/invocations",
            "kms_key_arn": "",
            "last_modified": "2021-12-15T18:37:36.000+0000",
            "layers": [
              "arn:aws:lambda:us-east-1:799732994462:layer:mrf_rasterio_uat:4",
              "arn:aws:lambda:us-east-1:799732994462:layer:es_logging_uat:3",
              "arn:aws:lambda:us-east-1:799732994462:layer:viz_lambda_shared_funcs_uat:5"
            ],
            "memory_size": 1024,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:799732994462:function:viz_optimize_rasters_uat:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::799732994462:role/hydrovis-viz-proc-pipeline-lambda",
            "runtime": "python3.6",
            "s3_bucket": "hydrovis-uat-deployment-us-east-1",
            "s3_key": "viz/lambda_functions/viz_optimize_rasters.zip",
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "EM4dVlGfCYxOjOPp69ReMpQT4jh7xZDi3rxTvpiYxj8=",
            "source_code_size": 66713,
            "tags": {
              "Name": "viz_optimize_rasters_uat"
            },
            "tags_all": {
              "Name": "viz_optimize_rasters_uat",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeout": 900,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "inundation_parent_permissions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_inundation_parent_uat",
            "id": "terraform-2021122021404100530000000b",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "statement_id": "terraform-2021122021404100530000000b",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_hi",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_inundation_parent_uat",
            "id": "terraform-20211220214039537500000001",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi",
            "statement_id": "terraform-20211220214039537500000001",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_prvi",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_inundation_parent_uat",
            "id": "terraform-20211220214039547900000007",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi",
            "statement_id": "terraform-20211220214039547900000007",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters"
          ]
        },
        {
          "index_key": "nwm_max_flows",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_inundation_parent_uat",
            "id": "terraform-20211220214040604200000009",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows",
            "statement_id": "terraform-20211220214040604200000009",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.es_logging"
          ]
        },
        {
          "index_key": "rnr_max_flows",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_inundation_parent_uat",
            "id": "terraform-20211220214039543200000004",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows",
            "statement_id": "terraform-20211220214039543200000004",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "max_flows_permissions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-2021122021404158820000000c",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana",
            "statement_id": "terraform-2021122021404158820000000c",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_10day",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-20211220214039543300000005",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day",
            "statement_id": "terraform-20211220214039543300000005",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_3day",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-20211220214039538400000002",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day",
            "statement_id": "terraform-20211220214039538400000002",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_5day",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-2021122021404063540000000a",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day",
            "statement_id": "terraform-2021122021404063540000000a",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_srf",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-20211220214039543600000006",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf",
            "statement_id": "terraform-20211220214039543600000006",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_hi",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-20211220214039538900000003",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi",
            "statement_id": "terraform-20211220214039538900000003",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.sns.aws_sns_topic.sns_topics"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_prvi",
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "viz_max_flows_uat",
            "id": "terraform-20211220214039793200000008",
            "principal": "sns.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi",
            "statement_id": "terraform-20211220214039793200000008",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_sns_topic_subscription",
      "name": "inundation_parent_subscriptions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana:3bb1965a-7c5e-4a15-94cb-ae31bc78e546",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana:3bb1965a-7c5e-4a15-94cb-ae31bc78e546",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_hi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi:0d2ac941-6796-46ad-a244-04d4a0466ba2",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi:0d2ac941-6796-46ad-a244-04d4a0466ba2",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_hi"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_ana_prvi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi:ba5dd58f-5958-4adb-a39b-dc5e7f6511d5",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi:ba5dd58f-5958-4adb-a39b-dc5e7f6511d5",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana_prvi"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing"
          ]
        },
        {
          "index_key": "nwm_max_flows",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows:c273cd39-c20c-48f8-ad25-022114e59974",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows:c273cd39-c20c-48f8-ad25-022114e59974",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_max_flows"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3"
          ]
        },
        {
          "index_key": "rnr_max_flows",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows:8423973e-a0f1-4fea-a714-474d9be0b79b",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_inundation_parent_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows:8423973e-a0f1-4fea-a714-474d9be0b79b",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_rnr_max_flows"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.viz_lambda_functions.aws_lambda_function.viz_optimize_rasters",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.lambda_layers.aws_lambda_layer_version.pandas",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_huc_inundation_processing",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.lambda_layers.aws_lambda_layer_version.mrf_rasterio",
            "module.lambda_layers.aws_lambda_layer_version.rasterio",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.multiprocessing",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.viz_lambda_functions.aws_lambda_function.viz_inundation_parent",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis"
          ]
        }
      ]
    },
    {
      "module": "module.viz_lambda_functions",
      "mode": "managed",
      "type": "aws_sns_topic_subscription",
      "name": "max_flows_subscriptions",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "nwm_ingest_ana",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana:30541a79-ee55-470f-84c8-50d6b7be8eba",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana:30541a79-ee55-470f-84c8-50d6b7be8eba",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_ana"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_10day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day:25004040-4323-4b73-b8cd-563ac956aff0",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day:25004040-4323-4b73-b8cd-563ac956aff0",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_10day"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_3day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day:cd4e046f-65fa-4eb6-82db-7efe46634c42",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day:cd4e046f-65fa-4eb6-82db-7efe46634c42",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_3day"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows"
          ]
        },
        {
          "index_key": "nwm_ingest_mrf_5day",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day:3c63d88a-ace8-447f-99b5-95dc6840f8bb",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day:3c63d88a-ace8-447f-99b5-95dc6840f8bb",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_mrf_5day"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging"
          ]
        },
        {
          "index_key": "nwm_ingest_srf",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf:bb3114d0-811e-4344-bec0-30568634647c",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf:bb3114d0-811e-4344-bec0-30568634647c",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_hi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi:ffe581d2-a60e-4f34-a938-58d7f0f128ac",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi:ffe581d2-a60e-4f34-a938-58d7f0f128ac",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_hi"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.sns.aws_sns_topic.sns_topics",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis"
          ]
        },
        {
          "index_key": "nwm_ingest_srf_prvi",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi:698fa3ae-23da-40de-be94-0cfe18538ec7",
            "confirmation_timeout_in_minutes": 1,
            "confirmation_was_authenticated": true,
            "delivery_policy": "",
            "endpoint": "arn:aws:lambda:us-east-1:799732994462:function:viz_max_flows_uat",
            "endpoint_auto_confirms": false,
            "filter_policy": "",
            "id": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi:698fa3ae-23da-40de-be94-0cfe18538ec7",
            "owner_id": "799732994462",
            "pending_confirmation": false,
            "protocol": "lambda",
            "raw_message_delivery": false,
            "redrive_policy": "",
            "subscription_role_arn": "",
            "topic_arn": "arn:aws:sns:us-east-1:799732994462:uat_nwm_ingest_srf_prvi"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam-roles.aws_iam_role.Hydroviz-RnR-EC2-Profile",
            "module.s3-replication.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3.module.bucket.aws_s3_bucket_ownership_controls.hydrovis",
            "module.iam-roles.aws_iam_role.HydrovisSSMInstanceProfileRole",
            "module.lambda_layers.aws_lambda_layer_version.viz_lambda_shared_funcs",
            "module.lambda_layers.aws_lambda_layer_version.xarray",
            "module.s3-replication.module.bucket.aws_s3_bucket.hydrovis",
            "module.s3-replication.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.s3.module.bucket.aws_kms_key.hydrovis-s3",
            "module.iam-roles.aws_iam_role.hydrovis-viz-proc-pipeline-lambda",
            "module.lambda_layers.aws_lambda_layer_version.es_logging",
            "module.s3-replication.module.bucket.aws_kms_key.hydrovis-s3",
            "module.s3.module.bucket.aws_kms_alias.hydrovis-s3",
            "module.s3.module.bucket.aws_s3_bucket_policy.hydrovis",
            "module.viz_lambda_functions.aws_lambda_function.viz_max_flows",
            "module.iam-roles.aws_iam_role.HydrovisESRISSMDeploy",
            "module.iam-roles.aws_iam_role.hydrovis-hml-ingest-role",
            "module.sns.aws_sns_topic.sns_topics"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "data",
      "type": "aws_vpn_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "amazon_side_asn": "64512",
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpn-gateway/vgw-0a1479ac61b2ae2b4",
            "attached_vpc_id": "vpc-0a52d5a43a8da3c6c",
            "availability_zone": "",
            "filter": null,
            "id": "vgw-0a1479ac61b2ae2b4",
            "state": "available",
            "tags": {
              "Name": "hydrovis-uat-vgw"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_main_route_table_association",
      "name": "main_private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "rtbassoc-0a1e221394c5d9bb4",
            "original_route_table_id": "rtb-00f073068d12bedfc",
            "route_table_id": "rtb-07bf28430f59fac9d",
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "hv-pub-nat-gw-a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": "",
            "connectivity_type": "private",
            "id": "nat-00aa0ae043321ef05",
            "network_interface_id": "eni-01e4ee9d4eb9b7dc1",
            "private_ip": "137.75.89.120",
            "public_ip": "",
            "subnet_id": "subnet-04ed3a40b54e90e57",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "hv-pub-nat-gw-b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": "",
            "connectivity_type": "private",
            "id": "nat-0027b9d1545c7695b",
            "network_interface_id": "eni-02fb0d1dad5f99228",
            "private_ip": "137.75.89.80",
            "public_ip": "",
            "subnet_id": "subnet-07c1ca08dffbc5581",
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-pub-1b",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_network_acl",
      "name": "hydrovis-acl-default",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:network-acl/acl-05fd0edaee9388ea9",
            "egress": [
              {
                "action": "allow",
                "cidr_block": "0.0.0.0/0",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 100,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "135.148.143.217/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 14,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "159.223.5.30/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 15,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "185.224.139.151/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 10,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "195.54.160.149/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 13,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "31.131.16.127/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 12,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "45.83.193.150/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 11,
                "to_port": 0
              }
            ],
            "id": "acl-05fd0edaee9388ea9",
            "ingress": [
              {
                "action": "allow",
                "cidr_block": "0.0.0.0/0",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 100,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "135.148.143.217/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 14,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "159.223.5.30/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 15,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "185.224.139.151/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 10,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "195.54.160.149/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 13,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "31.131.16.127/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 12,
                "to_port": 0
              },
              {
                "action": "deny",
                "cidr_block": "45.83.193.150/32",
                "from_port": 0,
                "icmp_code": 0,
                "icmp_type": 0,
                "ipv6_cidr_block": "",
                "protocol": "-1",
                "rule_no": 11,
                "to_port": 0
              }
            ],
            "owner_id": "799732994462",
            "subnet_ids": [
              "subnet-002c2ed1565d4579d",
              "subnet-043daf075a7ed8e32",
              "subnet-04914abb2085ae5dd",
              "subnet-04ed3a40b54e90e57",
              "subnet-07c1ca08dffbc5581",
              "subnet-099d60b8910d25894",
              "subnet-0b6ebeb0d08ee1fab",
              "subnet-0d6d51d00f4367af4"
            ],
            "tags": {
              "Name": "hydrovis-uat-acl-default"
            },
            "tags_all": {
              "Name": "hydrovis-uat-acl-default",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-web1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1b",
            "module.vpc.aws_subnet.hydrovis-sn-prv-web1a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-app1b",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1a",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:route-table/rtb-07bf28430f59fac9d",
            "id": "rtb-07bf28430f59fac9d",
            "owner_id": "799732994462",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "nat-00aa0ae043321ef05",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:route-table/rtb-03ef5a87203600895",
            "id": "rtb-03ef5a87203600895",
            "owner_id": "799732994462",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "vgw-0a1479ac61b2ae2b4",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.main",
            "module.vpc.data.aws_vpn_gateway.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "hydrovis-sn-pub-1a_public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-070c84815aa381f2c",
            "route_table_id": "rtb-03ef5a87203600895",
            "subnet_id": "subnet-04ed3a40b54e90e57"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.data.aws_vpn_gateway.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-app1a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-099d60b8910d25894",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.27.2.0/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-099d60b8910d25894",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-app1a"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-app1a",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-app1b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-0b6ebeb0d08ee1fab",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az4",
            "cidr_block": "10.27.2.32/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-0b6ebeb0d08ee1fab",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-app1b"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-app1b",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-data1a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-04914abb2085ae5dd",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.27.2.64/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-04914abb2085ae5dd",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-data1a"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-data1a",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-data1b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-002c2ed1565d4579d",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az4",
            "cidr_block": "10.27.2.160/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-002c2ed1565d4579d",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-data1b"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-data1b",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-web1a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-0d6d51d00f4367af4",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.27.2.128/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-0d6d51d00f4367af4",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-web1a"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-web1a",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-prv-web1b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-043daf075a7ed8e32",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az4",
            "cidr_block": "10.27.2.96/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-043daf075a7ed8e32",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-prv-uat-web1b"
            },
            "tags_all": {
              "Name": "hydrovis-sn-prv-uat-web1b",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.main",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-pub-1a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-04ed3a40b54e90e57",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az2",
            "cidr_block": "137.75.89.96/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-04ed3a40b54e90e57",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-pub-uat-1a"
            },
            "tags_all": {
              "Name": "hydrovis-sn-pub-uat-1a",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "hydrovis-sn-pub-1b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:subnet/subnet-07c1ca08dffbc5581",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az4",
            "cidr_block": "137.75.89.64/27",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-07c1ca08dffbc5581",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-sn-pub-uat-1b"
            },
            "tags_all": {
              "Name": "hydrovis-sn-pub-uat-1b",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpc/vpc-0a52d5a43a8da3c6c",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.27.2.0/23",
            "default_network_acl_id": "acl-0548292656d28e4cf",
            "default_route_table_id": "rtb-07bf28430f59fac9d",
            "default_security_group_id": "sg-0e41fa1ac6d10402b",
            "dhcp_options_id": "dopt-b24d2dc8",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "id": "vpc-0a52d5a43a8da3c6c",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "main_route_table_id": "rtb-07bf28430f59fac9d",
            "owner_id": "799732994462",
            "tags": {
              "Name": "hydrovis-uat-vpc"
            },
            "tags_all": {
              "Name": "hydrovis-uat-vpc",
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_ipv4_cidr_block_association",
      "name": "public_cidr",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cidr_block": "137.75.89.64/26",
            "id": "vpc-cidr-assoc-090298816603140b9",
            "timeouts": null,
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpn_gateway_attachment",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "vpn-attachment-a2758f7a",
            "vpc_id": "vpc-0a52d5a43a8da3c6c",
            "vpn_gateway_id": "vgw-0a1479ac61b2ae2b4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.main",
            "module.vpc.data.aws_vpn_gateway.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpces",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ec2messages",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpc-endpoint/vpce-0df33ce54c48947fa",
            "auto_accept": null,
            "cidr_blocks": [],
            "dns_entry": [
              {
                "dns_name": "vpce-0df33ce54c48947fa-byf1yoyw.ec2messages.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "vpce-0df33ce54c48947fa-byf1yoyw-us-east-1b.ec2messages.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "ec2messages.us-east-1.amazonaws.com",
                "hosted_zone_id": "Z0342079351N5M0HXRKG0"
              }
            ],
            "id": "vpce-0df33ce54c48947fa",
            "network_interface_ids": [
              "eni-04a5a265932a1b685"
            ],
            "owner_id": "799732994462",
            "policy": "{\"Statement\":[{\"Action\":\"*\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"*\"}]}",
            "prefix_list_id": null,
            "private_dns_enabled": true,
            "requester_managed": false,
            "route_table_ids": [],
            "security_group_ids": [
              "sg-01a5ed608003e9f20"
            ],
            "service_name": "com.amazonaws.us-east-1.ec2messages",
            "state": "available",
            "subnet_ids": [
              "subnet-002c2ed1565d4579d"
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_endpoint_type": "Interface",
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b"
          ]
        }
      ]
    },
    {
      "module": "module.vpces",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "s3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpc-endpoint/vpce-0ef5b3ef596333e3a",
            "auto_accept": null,
            "cidr_blocks": [
              "52.216.0.0/15",
              "54.231.0.0/16",
              "3.5.0.0/19"
            ],
            "dns_entry": [],
            "id": "vpce-0ef5b3ef596333e3a",
            "network_interface_ids": [],
            "owner_id": "799732994462",
            "policy": "{\"Statement\":[{\"Action\":\"*\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"*\"}],\"Version\":\"2008-10-17\"}",
            "prefix_list_id": "pl-63a5400a",
            "private_dns_enabled": false,
            "requester_managed": false,
            "route_table_ids": [
              "rtb-07bf28430f59fac9d"
            ],
            "security_group_ids": [],
            "service_name": "com.amazonaws.us-east-1.s3",
            "state": "available",
            "subnet_ids": [],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_endpoint_type": "Gateway",
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpces",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssm",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpc-endpoint/vpce-025265793a56904ba",
            "auto_accept": null,
            "cidr_blocks": [],
            "dns_entry": [
              {
                "dns_name": "vpce-025265793a56904ba-r6o3a04e.ssm.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "vpce-025265793a56904ba-r6o3a04e-us-east-1b.ssm.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "ssm.us-east-1.amazonaws.com",
                "hosted_zone_id": "Z0137513293D5P6SRP117"
              }
            ],
            "id": "vpce-025265793a56904ba",
            "network_interface_ids": [
              "eni-056fee96d931c5812"
            ],
            "owner_id": "799732994462",
            "policy": "{\"Statement\":[{\"Action\":\"*\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"*\"}]}",
            "prefix_list_id": null,
            "private_dns_enabled": true,
            "requester_managed": false,
            "route_table_ids": [],
            "security_group_ids": [
              "sg-01a5ed608003e9f20"
            ],
            "service_name": "com.amazonaws.us-east-1.ssm",
            "state": "available",
            "subnet_ids": [
              "subnet-002c2ed1565d4579d"
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_endpoint_type": "Interface",
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main"
          ]
        }
      ]
    },
    {
      "module": "module.vpces",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ssmmessages",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:799732994462:vpc-endpoint/vpce-0e4eef814c7be33ce",
            "auto_accept": null,
            "cidr_blocks": [],
            "dns_entry": [
              {
                "dns_name": "vpce-0e4eef814c7be33ce-4vksvid9.ssmmessages.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "vpce-0e4eef814c7be33ce-4vksvid9-us-east-1b.ssmmessages.us-east-1.vpce.amazonaws.com",
                "hosted_zone_id": "Z7HUB22UULQXV"
              },
              {
                "dns_name": "ssmmessages.us-east-1.amazonaws.com",
                "hosted_zone_id": "Z01387941CT2FFPGJWCVE"
              }
            ],
            "id": "vpce-0e4eef814c7be33ce",
            "network_interface_ids": [
              "eni-0ad6903a4aeabb6bf"
            ],
            "owner_id": "799732994462",
            "policy": "{\"Statement\":[{\"Action\":\"*\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"*\"}]}",
            "prefix_list_id": null,
            "private_dns_enabled": true,
            "requester_managed": false,
            "route_table_ids": [],
            "security_group_ids": [
              "sg-01a5ed608003e9f20"
            ],
            "service_name": "com.amazonaws.us-east-1.ssmmessages",
            "state": "available",
            "subnet_ids": [
              "subnet-002c2ed1565d4579d"
            ],
            "tags": {},
            "tags_all": {
              "TaskOrderID": "1305L420QNWWJ0057",
              "VPC": "uat",
              "hydrovis-env": "uat",
              "noaa:fismaid": "noaa8501",
              "noaa:lineoffice": "nws",
              "noaa:programoffice": "owp",
              "noaa:project": "hydrovis",
              "noaa:projectid": "799732994462"
            },
            "timeouts": null,
            "vpc_endpoint_type": "Interface",
            "vpc_id": "vpc-0a52d5a43a8da3c6c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "module.vpc.aws_subnet.hydrovis-sn-prv-data1b",
            "module.vpc.aws_subnet.hydrovis-sn-pub-1a",
            "module.vpc.aws_vpc.main",
            "module.security-groups.aws_security_group.ssm-session-manager-sg",
            "module.vpc.aws_main_route_table_association.main_private",
            "module.vpc.aws_nat_gateway.hv-pub-nat-gw-a",
            "module.vpc.aws_route_table.private"
          ]
        }
      ]
    }
  ]
}
