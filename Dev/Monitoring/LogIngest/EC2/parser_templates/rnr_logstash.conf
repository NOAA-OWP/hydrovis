filter {
    if [hydrovis_application] == "replace_route" {
        grok {
            match => {"message" => "%%{WORD:logger_level}    %%{WORD}.py %%{SPACE} %%{NUMBER}  : %%{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        grok {
            match => {"message" => "%%{WORD:logger_level} %%{WORD}.py %%{SPACE} %%{NUMBER}  : %%{GREEDYDATA:message}"}
            overwrite => ["message"]
        }

        mutate {
            gsub => [ "message", "#01\d", " " ]
        }

        if [logger_level] in ["FATAL", "ERROR"] {
            mutate {
                add_field => { "rnr_process_status_code" => 999 }
            }
        }


        ######################
        ## Main RnR Process ##
        ######################

        grok {
            match => { "message" => "BEGINNING run_wrf_hydro"}
            add_field => { "rnr_process_status_code" => 1 }
        }

        grok {
            match => { "message" => "Archiving old run instance directories at: '%%{GREEDYDATA:run_instance_dir}' to: '%%{GREEDYDATA:archive_dir}'"}
            add_field => { "rnr_process_status_code" => 2 }
        }

        grok {
            match => { "message" => "Downloaded files for timestamp: %%{TIMESTAMP_ISO8601:latest_data_time}"}
            add_field => { "rnr_process_status_code" => 3 }
        }

        grok {
            match => { "message" => "_get_action_forecasts\(\):   response = <Response \[%%{NUMBER:forecast_api_response:int}\]>"}
            add_field => { "rnr_process_status_code" => 4 }
        }

        grok {
            match => { "message" => "_get_nonaction_forecasts\(\):  conus_route_link_fpath = %%{GREEDYDATA:conus_routelink_path}"}
            add_field => { "rnr_process_status_code" => 5 }
        }

        grok {
            match => { "message" => "_create_forecast_point_dict\(\):  Original list of lids length = %%{NUMBER:total_forecast_points:int}"}
            add_field => { "rnr_process_status_code" => 6 }
        }

        grok {
            match => { "message" => "Succesfully generated route link file: %%{GREEDYDATA:route_link_file}"}
            add_field => { "rnr_process_status_code" => 7 }
        }

        grok {
            match => { "message" => "SUCCESSFULLY generated nudging params file: %%{GREEDYDATA:nudging_file}"}
            add_field => { "rnr_process_status_code" => 8 }
        }

        grok {
            match => { "message" => "LAKEPARM file successfully generated the subset file.  %%{GREEDYDATA:lakeparm_file}"}
            add_field => { "rnr_process_status_code" => 9 }
        }

        grok {
            match => { "message" => "GWBUCKPARM file successfully generated. %%{GREEDYDATA:gwbuckparm_file}"}
            add_field => { "rnr_process_status_code" => 10 }
        }

        grok {
            match => { "message" => "HYDRO_RST file successfully generated.  %%{GREEDYDATA:hydro_rst_file}"}
            add_field => { "rnr_process_status_code" => 11 }
        }

        grok {
            match => { "message" => "Successfully generated FORCING file: %%{GREEDYDATA:forcing_file}"}
            add_field => { "rnr_process_status_code" => 12 }
        }

        grok {
            match => { "message" => "Finished creating %%{NUMBER:forcing_file_count:int} FORCING files"}
            add_field => { "rnr_process_status_code" => 13 }
        }

        grok {
            match => { "message" => "Beginning WRF-Hydro execution with command: %%{GREEDYDATA:wfr_hydro_cmd} in directory: .*/(?<latest_data_year>[\d.]{4})(?<latest_data_month>[\d.]{2})(?<latest_data_day>[\d.]{2})(?<latest_data_hour>[\d.]{2})"}
            add_field => {"latest_data_time" => "%%{latest_data_year}-%%{latest_data_month}-%%{latest_data_day} %%{latest_data_hour}:00:00"}
            add_field => { "rnr_process_status_code" => 14 }
        }

        grok {
            match => { "message" => "Beginning nwm output processing"}
            add_field => { "rnr_process_status_code" => 15 }
        }

        grok {
            match => { "message" => "Finished processing nwm output"}
            add_field => { "rnr_process_status_code" => 16 }
        }

        grok {
            match => { "message" => "FINISHED run_wrf_hydro"}
            add_field => { "rnr_process_status_code" => 17 }
        }

        ####################################
        ## NWS LID Data Retrieval Process ##
        ####################################

        grok {
            match => {"message" => "_get_forecast_map_from_json_forecast\(\):  lid = %%{WORD:nws_lid}"}
            add_field => { "nws_lid_process_status_code" => 1 }
        }

        grok {
            match => {"message" => "No rating curve found for %%{WORD:nws_lid}. Attempting to get official flow forecast..."}
        }
        
        grok {
            match => { "message" => "_getStreamFlowInTimeWindowByLidURL\(\)  url = %%{GREEDYDATA:streamflow_forecast_api_call}"}
            add_field => { "nws_lid_process_status_code" => 2 }
        }

        if [streamflow_forecast_api_call] {
            grok {
                match => { "streamflow_forecast_api_call" => "/nws_lid/%%{WORD:nws_lid}/"}
            }
        }

        grok {
            match => { "message" => "The latest flow forecast at %%{WORD:nws_lid} has no values above 0. Skipping..."}
            add_field => { "nws_lid_process_status_code" => 998 }
        }

        grok {
            match => { "message" => "There is no flow forecast available at %%{WORD:nws_lid} . Skipping..."}
            add_field => { "nws_lid_process_status_code" => 998 }
        }

        #######################
        ## General API Calls ##
        #######################

        grok {
            match => { "message" => "_getAllStageActionDataInWindowURL\(\) endTime =  %%{TIMESTAMP_ISO8601:latest_data_time} windowInHours = %%{NUMBER:forecast_api_window:int}  original url = %%{GREEDYDATA:original_forecast_api_call}  newUrl = %%{GREEDYDATA:forecast_api_call}"}
        }

        grok {
            match => { "message" => "Returned lid count = %%{NUMBER:rating_curves_found:int} rating curves"}
        }

        grok {
            match => { "message" => " _get_rating_curves_map_inner\(\):  request = %%{GREEDYDATA:rating_curve_api_call}  response = <Response \[%%{NUMBER:rating_curve_api_response:int}\]>"}
        }

        grok {
            match => { "message" => "_create_forecast_point_dict_inner\(\):   request = %%{GREEDYDATA:location_metadata_api_call}  response = <Response \[%%{NUMBER:location_metadata_api_response:int}\]>"}
        }

        ##########################
        ## Non-action Forecasts ##
        ##########################

        grok {
            match => { "message" => "_get_nonaction_forecasts\(\):  adding downstream_lid = %%{WORD:nonaction_nws_lid}"}
        }

        grok {
            match => { "message" => "_get_nonaction_forecasts\(\):   downstream_lid = %%{WORD:nonaction_nws_lid} is already in the action_forecast_lids list, so it will not be added"}
        }

        grok {
            match => { "message" => "_get_nonaction_forecast_chunks\(\):  This is a current hour run. URL = %%{GREEDYDATA:nonaction_forecast_api_call}"}
        }

        grok {
            match => { "message" => "_get_nonaction_forecast_chunks\(\):  response = <Response \[%%{NUMBER:forecast_api_response:int}\]>"}
        }

        grok {
            match => { "message" => "_get_nonaction_forecast_chunks\(\):  %%{NUMBER:nonaction_forecasts_found:int} forecasts returned from  %%{NUMBER:nonaction_forecasts_searched:int} nws location ids"}
        }

        grok {
            match => { "message" => "\*\*\*\* _get_nonaction_forecasts\(\):  After comparing with action forecast list, ended up with new %%{NUMBER:nonaction_nws_lids:int} NWS lids"}
        }

        #########################
        ## Forecast Point Dict ##
        #########################

        grok {
            match => { "message" => "_create_forecast_point_dict_inner\(\):  lid = %%{WORD:nws_lid}, is_rfc_defined_fcst_point = %%{WORD:defined_fcst_point}"}
            add_field => { "forecast_point_status_code" => 1 }
        }

        grok {
            match => { "message" => "NWS LID \"%%{WORD:nws_lid}\" is not found in %%{GREEDYDATA:gages_map_csv}"}
            add_field => { "lid_in_gages_map" => "False" }
        }

        ###########
        ## Other ##
        ###########

        grok {
            match => { "message" => "_create_forecast_point_dict\(\):  Total processed lids = %%{NUMBER:total_lids_processed:int}"}
        }

        #####################
        ## Field Mutations ##
        #####################

        mutate {
            convert => {
                "rnr_process_status_code" => "integer"
                "nws_lid_process_status_code" => "integer"
                "forecast_point_status_code" => "integer"
            }
        }

        date {
            match => [ "latest_data_time", "YYYY-MM-dd HH:mm:ss" ]
            target => "latest_data_time"
        }

        if ![nws_lid] {
            mutate {
                remove_field => ["forecast_category"]
            }
        }
    }
}

#############
## Spin Up ##
#############

filter {
    if [hydrovis_application] == "replace_route" and [programname] == "cloud-init" {
        grok {
            match => { "message" => "Setting up Rsyslog Configuration"}
            add_field => { "rnr_spinup_status_code" => 1 }
        }
        
        grok {
            match => { "message" => "Setting up RNR Mount"}
            add_field => { "rnr_spinup_status_code" => 2 }
        } 
        
        grok {
            match => { "message" => "Installing System Dependencies"}
            add_field => { "rnr_spinup_status_code" => 3 }
        } 
        
        grok {
            match => { "message" => "Installing Python Dependencies"}
            add_field => { "rnr_spinup_status_code" => 4 }
        } 
        
        grok {
            match => { "message" => "Updating Permissions"}
            add_field => { "rnr_spinup_status_code" => 5 }
        } 
        
        grok {
            match => { "message" => "Installing WRF-Hydro Files"}
            add_field => { "rnr_spinup_status_code" => 6 }
        } 
        
        grok {
            match => { "message" => "Installing Replace and Route"}
            add_field => { "rnr_spinup_status_code" => 7 }
        } 
        
        grok {
            match => { "message" => "Installing RNR Dependencies"}
            add_field => { "rnr_spinup_status_code" => 8 }
        } 
        
        grok {
            match => { "message" => "Copying Static Resources"}
            add_field => { "rnr_spinup_status_code" => 9 }
        } 
        
        grok {
            match => { "message" => "Updating Libnetcdf Link"}
            add_field => { "rnr_spinup_status_code" => 10 }
        } 
        
        grok {
            match => { "message" => "Setting up RNR File Structure"}
            add_field => { "rnr_spinup_status_code" => 11 }
        } 
        
        grok {
            match => { "message" => "Copying Rendered Template File to Replace and Route"}
            add_field => { "rnr_spinup_status_code" => 12 }
        } 
        
        grok {
            match => { "message" => "Setting up RNR Crontab"}
            add_field => { "rnr_spinup_status_code" => 13 }
        }  
        
        grok {
            match => { "message" => "Finished Setup"}
            add_field => { "rnr_spinup_status_code" => 14 }
        } 
    }

    mutate {
        convert => {
            "rnr_spinup_status_code" => "integer"
        }
    }
}