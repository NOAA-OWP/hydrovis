# Keep all the sensitive data out of the repo
**/sensitive/*
**/sensitive

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate*
!terraform.tfstate.d

# Crash log files
crash.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore visualization repo zip files
**/LAMBDA/**/repos

# Ignore image based lambda viz_classes
**/LAMBDA/viz_functions/image_based/*/viz_classes.py
**/LAMBDA/viz_functions/image_based/*/viz_lambda_shared_funcs.py

# Ignore elasticsearch zip files
**/ELASTICSEARCH/lambda_code*.zip

**/buildplan
**/destroyplan


###################
# Replace and Route
###################
Source/RnR/.venv
Source/RnR/src/rnr/app/core/config.ini
Source/RnR/mock_db/rnr_schema_dump_20240612.dump
Source/RnR/data
Source/RnR/output
Source/RnR/dist
Source/RnR/notebooks/historical_flood_event
Source/RnR/.Trash*

*.ruff_cache
*.pytest_cache

*.pyc
*.egg-info/
__pycache__/
*.py[cod]
.env
.python-version


# Ignore all jupyter checkpoint folders
.ipynb_checkpoints

Dev/env.yaml
